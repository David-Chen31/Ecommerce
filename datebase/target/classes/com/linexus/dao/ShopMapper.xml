<?xml version="1.0" encoding="UTF-8" ?>
<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
<!--       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">-->

<!--</beans>-->



<!--XML映射文件的名称与Mapper接口名称一致，并且将SML映射文件和Mapper接口放置在相同包下-->
<!--
    XML映射文件将 ShopMapper 接口中的方法映射到实际的 SQL 语句。每个 id 对应接口中的方法，
    这样 MyBatis 就知道如何执行 SQL 操作。
-->
<!--
    当 ShopMapper 接口的方法被调用时，MyBatis 会通过这个 XML 文件将接口方法与 SQL 映射起来，
    并执行相应的 SQL 操作。
-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linexus.dao.ShopMapper"> <!--要与接口全限定名一致-->
    <cache readOnly="true"/>
    <!--getShopList 方法会执行 SELECT * FROM cppdatabase.shop，查询所有客户端。-->
    <select id='getShopList' resultType="Shop">
        SELECT *
        FROM cppdatabase.shop;
    </select>

    <select id="getShopByNameAndPwd" resultType="Shop">
        SELECT *
        FROM cppdatabase.shop
        WHERE shop_name = #{name}
          AND shop_pwd = #{pwd};
    </select>

    <insert id="InsertShop" parameterType="Shop">
        INSERT INTO cppdatabase.shop (shop_name, shop_phone, shop_email, shop_sign_time, shop_pwd, shop_image)
        VALUES (#{shopName}, #{shopPhone}, #{shopEmail}, #{shopSignTime}, #{shopPwd}, #{shopImage});
    </insert>

    <update id="updateShop" parameterType="Shop">
        UPDATE cppdatabase.shop
        <!--    <set>作用：动态地在行首插入SET关键字，并且会删掉额外的逗号-->
        <set>
            <if test="shopName!=null">shop_name=#{shopName},</if>
            <if test="shopPhone!=null">shop_phone=#{shopPhone},</if>
            <if test="shopEmail!=null">shop_email=#{shopEmail},</if>
            <if test="shopPwd!=null">shop_pwd=#{shopPwd},</if>
            <if test="shopImage!=null">shop_image=#{shopImage}</if>
        </set>
        WHERE shop_id = #{shopId};
    </update>

    <select id="getShopLikeList" resultType="Shop">
        select *
        FROM cppdatabase.shop
        WHERE shop_name LIKE "%"#{mess}"%";
    </select>

    <delete id="deleteShopByNameAndPwd">
        delete
        FROM cppdatabase.shop
        WHERE shop_name = #{name}
          AND shop_pwd = #{pwd};
    </delete>
</mapper>
        