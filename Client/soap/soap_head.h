// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* soap_head.h
   Generated by wsdl2h 2.8.135 from http://localhost:8090/WholeMapper?wsdl and typemap.dat
   2025-01-05 12:46:17 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000,2024, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on soap_head.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000,2024, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.linexus.com/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://service.linexus.com/"
ns2 = "http://dao.linexus.com/"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://dao.linexus.com/"
//gsoap ns2   schema namespace:	http://dao.linexus.com/
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns2__selectProductForUpdate;

class ns2__selectProductForUpdateResponse;

class ns2__product;

class ns2__addProduct;

class ns2__addProductResponse;

class ns2__deleteProductTypeByName;

class ns2__deleteProductTypeByNameResponse;

class ns2__getOrderList;

class ns2__order;

class ns2__getOrderListResponse;

class ns2__getShopByNameAndPwd;

class ns2__getShopByNameAndPwdResponse;

class ns2__shop;

class ns2__updateShop;

class ns2__updateShopResponse;

class ns2__getProductListByInfo;

class ns2__getProductListByInfoResponse;

class ns2__getReadMessageFromShop;

class ns2__client;

class ns2__getReadMessageFromShopResponse;

class ns2__message;

class ns2__updateClient;

class ns2__updateClientResponse;

class ns2__deleteProductByInfo;

class ns2__deleteProductByInfoResponse;

class ns2__deleteClientByNameAndPwd;

class ns2__deleteClientByNameAndPwdResponse;

class ns2__InsertShop;

class ns2__InsertShopResponse;

class ns2__updateMessageFromShop;

class ns2__updateMessageFromShopResponse;

class ns2__getProductTypeByProName;

class ns2__getProductTypeByProNameResponse;

class ns2__productType;

class ns2__getClientList;

class ns2__getClientListResponse;

class ns2__purchaseProduct;

class ns2__purchaseProductResponse;

class ns2__updateMessageFromClient;

class ns2__updateMessageFromClientResponse;

class ns2__getUnreadMessageFromClient;

class ns2__getUnreadMessageFromClientResponse;

class ns2__updateProductByInfo;

class ns2__updateProductByInfoResponse;

class ns2__getMessageFromClient;

class ns2__getMessageFromClientResponse;

class ns2__addOrder;

class ns2__addOrderResponse;

class ns2__deleteShopByNameAndPwd;

class ns2__deleteShopByNameAndPwdResponse;

class ns2__getProductList;

class ns2__getProductListResponse;

class ns2__getOrderListHistory;

class ns2__getOrderListHistoryResponse;

class ns2__getReadMessageFromClient;

class ns2__getReadMessageFromClientResponse;

class ns2__updateHistory;

class ns2__updateHistoryResponse;

class ns2__InsertMessage;

class ns2__InsertMessageResponse;

class ns2__getShopLikeList;

class ns2__getShopLikeListResponse;

class ns2__getMessageFromShop;

class ns2__getMessageFromShopResponse;

class ns2__deleteMessageFromShop;

class ns2__deleteMessageFromShopResponse;

class ns2__getOrderLikeList;

class ns2__getOrderLikeListResponse;

class ns2__getUnreadMessageFromShop;

class ns2__getUnreadMessageFromShopResponse;

class ns2__getClientLikeList;

class ns2__getClientLikeListResponse;

class ns2__getShopList;

class ns2__getShopListResponse;

class ns2__getOrderListByInfo;

class ns2__getOrderListByInfoResponse;

class ns2__addProductType;

class ns2__addProductTypeResponse;

class ns2__deleteMessageFromClient;

class ns2__deleteMessageFromClientResponse;

class ns2__getProductLikeList;

class ns2__getProductLikeListResponse;

class ns2__getClientByNameAndPwd;

class ns2__getClientByNameAndPwdResponse;

class ns2__deleteShoppingCart;

class ns2__deleteShoppingCartResponse;

class ns2__InsertClient;

class ns2__InsertClientResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://dao.linexus.com/":selectProductForUpdate is a complexType.
///
/// @note class ns2__selectProductForUpdate operations:
/// - ns2__selectProductForUpdate* soap_new_ns2__selectProductForUpdate(soap*) allocate and default initialize
/// - ns2__selectProductForUpdate* soap_new_ns2__selectProductForUpdate(soap*, int num) allocate and default initialize an array
/// - ns2__selectProductForUpdate* soap_new_req_ns2__selectProductForUpdate(soap*, ...) allocate, set required members
/// - ns2__selectProductForUpdate* soap_new_set_ns2__selectProductForUpdate(soap*, ...) allocate, set all public members
/// - ns2__selectProductForUpdate::soap_default(soap*) default initialize members
/// - int soap_read_ns2__selectProductForUpdate(soap*, ns2__selectProductForUpdate*) deserialize from a stream
/// - int soap_write_ns2__selectProductForUpdate(soap*, ns2__selectProductForUpdate*) serialize to a stream
/// - ns2__selectProductForUpdate* ns2__selectProductForUpdate::soap_dup(soap*) returns deep copy of ns2__selectProductForUpdate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__selectProductForUpdate::soap_del() deep deletes ns2__selectProductForUpdate data members, use only after ns2__selectProductForUpdate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__selectProductForUpdate::soap_type() returns SOAP_TYPE_ns2__selectProductForUpdate or derived type identifier
class ns2__selectProductForUpdate
{ public:
/// Element "arg0" of type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":selectProductForUpdateResponse is a complexType.
///
/// @note class ns2__selectProductForUpdateResponse operations:
/// - ns2__selectProductForUpdateResponse* soap_new_ns2__selectProductForUpdateResponse(soap*) allocate and default initialize
/// - ns2__selectProductForUpdateResponse* soap_new_ns2__selectProductForUpdateResponse(soap*, int num) allocate and default initialize an array
/// - ns2__selectProductForUpdateResponse* soap_new_req_ns2__selectProductForUpdateResponse(soap*, ...) allocate, set required members
/// - ns2__selectProductForUpdateResponse* soap_new_set_ns2__selectProductForUpdateResponse(soap*, ...) allocate, set all public members
/// - ns2__selectProductForUpdateResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__selectProductForUpdateResponse(soap*, ns2__selectProductForUpdateResponse*) deserialize from a stream
/// - int soap_write_ns2__selectProductForUpdateResponse(soap*, ns2__selectProductForUpdateResponse*) serialize to a stream
/// - ns2__selectProductForUpdateResponse* ns2__selectProductForUpdateResponse::soap_dup(soap*) returns deep copy of ns2__selectProductForUpdateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__selectProductForUpdateResponse::soap_del() deep deletes ns2__selectProductForUpdateResponse data members, use only after ns2__selectProductForUpdateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__selectProductForUpdateResponse::soap_type() returns SOAP_TYPE_ns2__selectProductForUpdateResponse or derived type identifier
class ns2__selectProductForUpdateResponse
{ public:
/// Element "return" of type "http://dao.linexus.com/":product.
    ns2__product*                        return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":product is a complexType.
///
/// @note class ns2__product operations:
/// - ns2__product* soap_new_ns2__product(soap*) allocate and default initialize
/// - ns2__product* soap_new_ns2__product(soap*, int num) allocate and default initialize an array
/// - ns2__product* soap_new_req_ns2__product(soap*, ...) allocate, set required members
/// - ns2__product* soap_new_set_ns2__product(soap*, ...) allocate, set all public members
/// - ns2__product::soap_default(soap*) default initialize members
/// - int soap_read_ns2__product(soap*, ns2__product*) deserialize from a stream
/// - int soap_write_ns2__product(soap*, ns2__product*) serialize to a stream
/// - ns2__product* ns2__product::soap_dup(soap*) returns deep copy of ns2__product, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__product::soap_del() deep deletes ns2__product data members, use only after ns2__product::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__product::soap_type() returns SOAP_TYPE_ns2__product or derived type identifier
class ns2__product
{ public:
/// Element "discountEndTime" of type xs:dateTime.
    time_t*                              discountEndTime                0;	///< Optional element.
/// Element "discountStartTime" of type xs:dateTime.
    time_t*                              discountStartTime              0;	///< Optional element.
/// Element "flashSaleEndTime" of type xs:dateTime.
    time_t*                              flashSaleEndTime               0;	///< Optional element.
/// Element "flashSalePurchaseLimit" of type xs:int.
    int                                  flashSalePurchaseLimit         1;	///< Required element.
/// Element "flashSaleStartTime" of type xs:dateTime.
    time_t*                              flashSaleStartTime             0;	///< Optional element.
/// Element "productBuyNum" of type xs:int.
    int                                  productBuyNum                  1;	///< Required element.
/// Element "productDiscount" of type xs:float.
    float                                productDiscount                1;	///< Required element.
/// Element "productFlashSalePrice" of type xs:float.
    float                                productFlashSalePrice          1;	///< Required element.
/// Element "productId" of type xs:int.
    int                                  productId                      1;	///< Required element.
/// Element "productImage" of type xs:string.
    std::string*                         productImage                   0;	///< Optional element.
/// Element "productName" of type xs:string.
    std::string*                         productName                    0;	///< Optional element.
/// Element "productNum" of type xs:int.
    int                                  productNum                     1;	///< Required element.
/// Element "productPrice" of type xs:int.
    int                                  productPrice                   1;	///< Required element.
/// Element "productShopId" of type xs:int.
    int                                  productShopId                  1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProduct is a complexType.
///
/// @note class ns2__addProduct operations:
/// - ns2__addProduct* soap_new_ns2__addProduct(soap*) allocate and default initialize
/// - ns2__addProduct* soap_new_ns2__addProduct(soap*, int num) allocate and default initialize an array
/// - ns2__addProduct* soap_new_req_ns2__addProduct(soap*, ...) allocate, set required members
/// - ns2__addProduct* soap_new_set_ns2__addProduct(soap*, ...) allocate, set all public members
/// - ns2__addProduct::soap_default(soap*) default initialize members
/// - int soap_read_ns2__addProduct(soap*, ns2__addProduct*) deserialize from a stream
/// - int soap_write_ns2__addProduct(soap*, ns2__addProduct*) serialize to a stream
/// - ns2__addProduct* ns2__addProduct::soap_dup(soap*) returns deep copy of ns2__addProduct, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__addProduct::soap_del() deep deletes ns2__addProduct data members, use only after ns2__addProduct::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__addProduct::soap_type() returns SOAP_TYPE_ns2__addProduct or derived type identifier
class ns2__addProduct
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    ns2__product*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProductResponse is a complexType.
///
/// @note class ns2__addProductResponse operations:
/// - ns2__addProductResponse* soap_new_ns2__addProductResponse(soap*) allocate and default initialize
/// - ns2__addProductResponse* soap_new_ns2__addProductResponse(soap*, int num) allocate and default initialize an array
/// - ns2__addProductResponse* soap_new_req_ns2__addProductResponse(soap*, ...) allocate, set required members
/// - ns2__addProductResponse* soap_new_set_ns2__addProductResponse(soap*, ...) allocate, set all public members
/// - ns2__addProductResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__addProductResponse(soap*, ns2__addProductResponse*) deserialize from a stream
/// - int soap_write_ns2__addProductResponse(soap*, ns2__addProductResponse*) serialize to a stream
/// - ns2__addProductResponse* ns2__addProductResponse::soap_dup(soap*) returns deep copy of ns2__addProductResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__addProductResponse::soap_del() deep deletes ns2__addProductResponse data members, use only after ns2__addProductResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__addProductResponse::soap_type() returns SOAP_TYPE_ns2__addProductResponse or derived type identifier
class ns2__addProductResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductTypeByName is a complexType.
///
/// @note class ns2__deleteProductTypeByName operations:
/// - ns2__deleteProductTypeByName* soap_new_ns2__deleteProductTypeByName(soap*) allocate and default initialize
/// - ns2__deleteProductTypeByName* soap_new_ns2__deleteProductTypeByName(soap*, int num) allocate and default initialize an array
/// - ns2__deleteProductTypeByName* soap_new_req_ns2__deleteProductTypeByName(soap*, ...) allocate, set required members
/// - ns2__deleteProductTypeByName* soap_new_set_ns2__deleteProductTypeByName(soap*, ...) allocate, set all public members
/// - ns2__deleteProductTypeByName::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteProductTypeByName(soap*, ns2__deleteProductTypeByName*) deserialize from a stream
/// - int soap_write_ns2__deleteProductTypeByName(soap*, ns2__deleteProductTypeByName*) serialize to a stream
/// - ns2__deleteProductTypeByName* ns2__deleteProductTypeByName::soap_dup(soap*) returns deep copy of ns2__deleteProductTypeByName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteProductTypeByName::soap_del() deep deletes ns2__deleteProductTypeByName data members, use only after ns2__deleteProductTypeByName::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteProductTypeByName::soap_type() returns SOAP_TYPE_ns2__deleteProductTypeByName or derived type identifier
class ns2__deleteProductTypeByName
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductTypeByNameResponse is a complexType.
///
/// @note class ns2__deleteProductTypeByNameResponse operations:
/// - ns2__deleteProductTypeByNameResponse* soap_new_ns2__deleteProductTypeByNameResponse(soap*) allocate and default initialize
/// - ns2__deleteProductTypeByNameResponse* soap_new_ns2__deleteProductTypeByNameResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteProductTypeByNameResponse* soap_new_req_ns2__deleteProductTypeByNameResponse(soap*, ...) allocate, set required members
/// - ns2__deleteProductTypeByNameResponse* soap_new_set_ns2__deleteProductTypeByNameResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteProductTypeByNameResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteProductTypeByNameResponse(soap*, ns2__deleteProductTypeByNameResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteProductTypeByNameResponse(soap*, ns2__deleteProductTypeByNameResponse*) serialize to a stream
/// - ns2__deleteProductTypeByNameResponse* ns2__deleteProductTypeByNameResponse::soap_dup(soap*) returns deep copy of ns2__deleteProductTypeByNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteProductTypeByNameResponse::soap_del() deep deletes ns2__deleteProductTypeByNameResponse data members, use only after ns2__deleteProductTypeByNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteProductTypeByNameResponse::soap_type() returns SOAP_TYPE_ns2__deleteProductTypeByNameResponse or derived type identifier
class ns2__deleteProductTypeByNameResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderList is a complexType.
///
/// @note class ns2__getOrderList operations:
/// - ns2__getOrderList* soap_new_ns2__getOrderList(soap*) allocate and default initialize
/// - ns2__getOrderList* soap_new_ns2__getOrderList(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderList* soap_new_req_ns2__getOrderList(soap*, ...) allocate, set required members
/// - ns2__getOrderList* soap_new_set_ns2__getOrderList(soap*, ...) allocate, set all public members
/// - ns2__getOrderList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderList(soap*, ns2__getOrderList*) deserialize from a stream
/// - int soap_write_ns2__getOrderList(soap*, ns2__getOrderList*) serialize to a stream
/// - ns2__getOrderList* ns2__getOrderList::soap_dup(soap*) returns deep copy of ns2__getOrderList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderList::soap_del() deep deletes ns2__getOrderList data members, use only after ns2__getOrderList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderList::soap_type() returns SOAP_TYPE_ns2__getOrderList or derived type identifier
class ns2__getOrderList
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":order is a complexType.
///
/// @note class ns2__order operations:
/// - ns2__order* soap_new_ns2__order(soap*) allocate and default initialize
/// - ns2__order* soap_new_ns2__order(soap*, int num) allocate and default initialize an array
/// - ns2__order* soap_new_req_ns2__order(soap*, ...) allocate, set required members
/// - ns2__order* soap_new_set_ns2__order(soap*, ...) allocate, set all public members
/// - ns2__order::soap_default(soap*) default initialize members
/// - int soap_read_ns2__order(soap*, ns2__order*) deserialize from a stream
/// - int soap_write_ns2__order(soap*, ns2__order*) serialize to a stream
/// - ns2__order* ns2__order::soap_dup(soap*) returns deep copy of ns2__order, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__order::soap_del() deep deletes ns2__order data members, use only after ns2__order::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__order::soap_type() returns SOAP_TYPE_ns2__order or derived type identifier
class ns2__order
{ public:
/// Element "orderCheck" of type xs:int.
    int                                  orderCheck                     1;	///< Required element.
/// Element "orderClient" of type xs:string.
    std::string*                         orderClient                    0;	///< Optional element.
/// Element "orderClientId" of type xs:int.
    int                                  orderClientId                  1;	///< Required element.
/// Element "orderCost" of type xs:decimal.
    xsd__decimal*                        orderCost                      0;	///< Optional element.
/// Element "orderHide" of type xs:int.
    int                                  orderHide                      1;	///< Required element.
/// Element "orderId" of type xs:int.
    int                                  orderId                        1;	///< Required element.
/// Element "orderProductId" of type xs:int.
    int                                  orderProductId                 1;	///< Required element.
/// Element "orderProductName" of type xs:string.
    std::string*                         orderProductName               0;	///< Optional element.
/// Element "orderProductNum" of type xs:int.
    int                                  orderProductNum                1;	///< Required element.
/// Element "orderProductStyle" of type xs:string.
    std::string*                         orderProductStyle              0;	///< Optional element.
/// Element "orderRefund" of type xs:int.
    int                                  orderRefund                    1;	///< Required element.
/// Element "orderShip" of type xs:int.
    int                                  orderShip                      1;	///< Required element.
/// Element "orderShopId" of type xs:int.
    int                                  orderShopId                    1;	///< Required element.
/// Element "orderTime" of type xs:dateTime.
    time_t*                              orderTime                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListResponse is a complexType.
///
/// @note class ns2__getOrderListResponse operations:
/// - ns2__getOrderListResponse* soap_new_ns2__getOrderListResponse(soap*) allocate and default initialize
/// - ns2__getOrderListResponse* soap_new_ns2__getOrderListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderListResponse* soap_new_req_ns2__getOrderListResponse(soap*, ...) allocate, set required members
/// - ns2__getOrderListResponse* soap_new_set_ns2__getOrderListResponse(soap*, ...) allocate, set all public members
/// - ns2__getOrderListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderListResponse(soap*, ns2__getOrderListResponse*) deserialize from a stream
/// - int soap_write_ns2__getOrderListResponse(soap*, ns2__getOrderListResponse*) serialize to a stream
/// - ns2__getOrderListResponse* ns2__getOrderListResponse::soap_dup(soap*) returns deep copy of ns2__getOrderListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderListResponse::soap_del() deep deletes ns2__getOrderListResponse data members, use only after ns2__getOrderListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderListResponse::soap_type() returns SOAP_TYPE_ns2__getOrderListResponse or derived type identifier
class ns2__getOrderListResponse
{ public:
/// Vector of ns2__order* of length 0..unbounded.
    std::vector<ns2__order*            > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getShopByNameAndPwd is a complexType.
///
/// @note class ns2__getShopByNameAndPwd operations:
/// - ns2__getShopByNameAndPwd* soap_new_ns2__getShopByNameAndPwd(soap*) allocate and default initialize
/// - ns2__getShopByNameAndPwd* soap_new_ns2__getShopByNameAndPwd(soap*, int num) allocate and default initialize an array
/// - ns2__getShopByNameAndPwd* soap_new_req_ns2__getShopByNameAndPwd(soap*, ...) allocate, set required members
/// - ns2__getShopByNameAndPwd* soap_new_set_ns2__getShopByNameAndPwd(soap*, ...) allocate, set all public members
/// - ns2__getShopByNameAndPwd::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getShopByNameAndPwd(soap*, ns2__getShopByNameAndPwd*) deserialize from a stream
/// - int soap_write_ns2__getShopByNameAndPwd(soap*, ns2__getShopByNameAndPwd*) serialize to a stream
/// - ns2__getShopByNameAndPwd* ns2__getShopByNameAndPwd::soap_dup(soap*) returns deep copy of ns2__getShopByNameAndPwd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getShopByNameAndPwd::soap_del() deep deletes ns2__getShopByNameAndPwd data members, use only after ns2__getShopByNameAndPwd::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getShopByNameAndPwd::soap_type() returns SOAP_TYPE_ns2__getShopByNameAndPwd or derived type identifier
class ns2__getShopByNameAndPwd
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getShopByNameAndPwdResponse is a complexType.
///
/// @note class ns2__getShopByNameAndPwdResponse operations:
/// - ns2__getShopByNameAndPwdResponse* soap_new_ns2__getShopByNameAndPwdResponse(soap*) allocate and default initialize
/// - ns2__getShopByNameAndPwdResponse* soap_new_ns2__getShopByNameAndPwdResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getShopByNameAndPwdResponse* soap_new_req_ns2__getShopByNameAndPwdResponse(soap*, ...) allocate, set required members
/// - ns2__getShopByNameAndPwdResponse* soap_new_set_ns2__getShopByNameAndPwdResponse(soap*, ...) allocate, set all public members
/// - ns2__getShopByNameAndPwdResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getShopByNameAndPwdResponse(soap*, ns2__getShopByNameAndPwdResponse*) deserialize from a stream
/// - int soap_write_ns2__getShopByNameAndPwdResponse(soap*, ns2__getShopByNameAndPwdResponse*) serialize to a stream
/// - ns2__getShopByNameAndPwdResponse* ns2__getShopByNameAndPwdResponse::soap_dup(soap*) returns deep copy of ns2__getShopByNameAndPwdResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getShopByNameAndPwdResponse::soap_del() deep deletes ns2__getShopByNameAndPwdResponse data members, use only after ns2__getShopByNameAndPwdResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getShopByNameAndPwdResponse::soap_type() returns SOAP_TYPE_ns2__getShopByNameAndPwdResponse or derived type identifier
class ns2__getShopByNameAndPwdResponse
{ public:
/// Element "return" of type "http://dao.linexus.com/":shop.
    ns2__shop*                           return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":shop is a complexType.
///
/// @note class ns2__shop operations:
/// - ns2__shop* soap_new_ns2__shop(soap*) allocate and default initialize
/// - ns2__shop* soap_new_ns2__shop(soap*, int num) allocate and default initialize an array
/// - ns2__shop* soap_new_req_ns2__shop(soap*, ...) allocate, set required members
/// - ns2__shop* soap_new_set_ns2__shop(soap*, ...) allocate, set all public members
/// - ns2__shop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__shop(soap*, ns2__shop*) deserialize from a stream
/// - int soap_write_ns2__shop(soap*, ns2__shop*) serialize to a stream
/// - ns2__shop* ns2__shop::soap_dup(soap*) returns deep copy of ns2__shop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__shop::soap_del() deep deletes ns2__shop data members, use only after ns2__shop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__shop::soap_type() returns SOAP_TYPE_ns2__shop or derived type identifier
class ns2__shop
{ public:
/// Element "shopEmail" of type xs:string.
    std::string*                         shopEmail                      0;	///< Optional element.
/// Element "shopId" of type xs:int.
    int                                  shopId                         1;	///< Required element.
/// Element "shopImage" of type xs:string.
    std::string*                         shopImage                      0;	///< Optional element.
/// Element "shopName" of type xs:string.
    std::string*                         shopName                       0;	///< Optional element.
/// Element "shopPhone" of type xs:string.
    std::string*                         shopPhone                      0;	///< Optional element.
/// Element "shopPwd" of type xs:string.
    std::string*                         shopPwd                        0;	///< Optional element.
/// Element "shopSignTime" of type xs:dateTime.
    time_t*                              shopSignTime                   0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateShop is a complexType.
///
/// @note class ns2__updateShop operations:
/// - ns2__updateShop* soap_new_ns2__updateShop(soap*) allocate and default initialize
/// - ns2__updateShop* soap_new_ns2__updateShop(soap*, int num) allocate and default initialize an array
/// - ns2__updateShop* soap_new_req_ns2__updateShop(soap*, ...) allocate, set required members
/// - ns2__updateShop* soap_new_set_ns2__updateShop(soap*, ...) allocate, set all public members
/// - ns2__updateShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateShop(soap*, ns2__updateShop*) deserialize from a stream
/// - int soap_write_ns2__updateShop(soap*, ns2__updateShop*) serialize to a stream
/// - ns2__updateShop* ns2__updateShop::soap_dup(soap*) returns deep copy of ns2__updateShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateShop::soap_del() deep deletes ns2__updateShop data members, use only after ns2__updateShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateShop::soap_type() returns SOAP_TYPE_ns2__updateShop or derived type identifier
class ns2__updateShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":shop.
    ns2__shop*                           arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateShopResponse is a complexType.
///
/// @note class ns2__updateShopResponse operations:
/// - ns2__updateShopResponse* soap_new_ns2__updateShopResponse(soap*) allocate and default initialize
/// - ns2__updateShopResponse* soap_new_ns2__updateShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__updateShopResponse* soap_new_req_ns2__updateShopResponse(soap*, ...) allocate, set required members
/// - ns2__updateShopResponse* soap_new_set_ns2__updateShopResponse(soap*, ...) allocate, set all public members
/// - ns2__updateShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateShopResponse(soap*, ns2__updateShopResponse*) deserialize from a stream
/// - int soap_write_ns2__updateShopResponse(soap*, ns2__updateShopResponse*) serialize to a stream
/// - ns2__updateShopResponse* ns2__updateShopResponse::soap_dup(soap*) returns deep copy of ns2__updateShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateShopResponse::soap_del() deep deletes ns2__updateShopResponse data members, use only after ns2__updateShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateShopResponse::soap_type() returns SOAP_TYPE_ns2__updateShopResponse or derived type identifier
class ns2__updateShopResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductListByInfo is a complexType.
///
/// @note class ns2__getProductListByInfo operations:
/// - ns2__getProductListByInfo* soap_new_ns2__getProductListByInfo(soap*) allocate and default initialize
/// - ns2__getProductListByInfo* soap_new_ns2__getProductListByInfo(soap*, int num) allocate and default initialize an array
/// - ns2__getProductListByInfo* soap_new_req_ns2__getProductListByInfo(soap*, ...) allocate, set required members
/// - ns2__getProductListByInfo* soap_new_set_ns2__getProductListByInfo(soap*, ...) allocate, set all public members
/// - ns2__getProductListByInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductListByInfo(soap*, ns2__getProductListByInfo*) deserialize from a stream
/// - int soap_write_ns2__getProductListByInfo(soap*, ns2__getProductListByInfo*) serialize to a stream
/// - ns2__getProductListByInfo* ns2__getProductListByInfo::soap_dup(soap*) returns deep copy of ns2__getProductListByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductListByInfo::soap_del() deep deletes ns2__getProductListByInfo data members, use only after ns2__getProductListByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductListByInfo::soap_type() returns SOAP_TYPE_ns2__getProductListByInfo or derived type identifier
class ns2__getProductListByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    ns2__product*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductListByInfoResponse is a complexType.
///
/// @note class ns2__getProductListByInfoResponse operations:
/// - ns2__getProductListByInfoResponse* soap_new_ns2__getProductListByInfoResponse(soap*) allocate and default initialize
/// - ns2__getProductListByInfoResponse* soap_new_ns2__getProductListByInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getProductListByInfoResponse* soap_new_req_ns2__getProductListByInfoResponse(soap*, ...) allocate, set required members
/// - ns2__getProductListByInfoResponse* soap_new_set_ns2__getProductListByInfoResponse(soap*, ...) allocate, set all public members
/// - ns2__getProductListByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductListByInfoResponse(soap*, ns2__getProductListByInfoResponse*) deserialize from a stream
/// - int soap_write_ns2__getProductListByInfoResponse(soap*, ns2__getProductListByInfoResponse*) serialize to a stream
/// - ns2__getProductListByInfoResponse* ns2__getProductListByInfoResponse::soap_dup(soap*) returns deep copy of ns2__getProductListByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductListByInfoResponse::soap_del() deep deletes ns2__getProductListByInfoResponse data members, use only after ns2__getProductListByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductListByInfoResponse::soap_type() returns SOAP_TYPE_ns2__getProductListByInfoResponse or derived type identifier
class ns2__getProductListByInfoResponse
{ public:
/// Vector of ns2__product* of length 0..unbounded.
    std::vector<ns2__product*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getReadMessageFromShop is a complexType.
///
/// @note class ns2__getReadMessageFromShop operations:
/// - ns2__getReadMessageFromShop* soap_new_ns2__getReadMessageFromShop(soap*) allocate and default initialize
/// - ns2__getReadMessageFromShop* soap_new_ns2__getReadMessageFromShop(soap*, int num) allocate and default initialize an array
/// - ns2__getReadMessageFromShop* soap_new_req_ns2__getReadMessageFromShop(soap*, ...) allocate, set required members
/// - ns2__getReadMessageFromShop* soap_new_set_ns2__getReadMessageFromShop(soap*, ...) allocate, set all public members
/// - ns2__getReadMessageFromShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getReadMessageFromShop(soap*, ns2__getReadMessageFromShop*) deserialize from a stream
/// - int soap_write_ns2__getReadMessageFromShop(soap*, ns2__getReadMessageFromShop*) serialize to a stream
/// - ns2__getReadMessageFromShop* ns2__getReadMessageFromShop::soap_dup(soap*) returns deep copy of ns2__getReadMessageFromShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getReadMessageFromShop::soap_del() deep deletes ns2__getReadMessageFromShop data members, use only after ns2__getReadMessageFromShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getReadMessageFromShop::soap_type() returns SOAP_TYPE_ns2__getReadMessageFromShop or derived type identifier
class ns2__getReadMessageFromShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    ns2__client*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":client is a complexType.
///
/// @note class ns2__client operations:
/// - ns2__client* soap_new_ns2__client(soap*) allocate and default initialize
/// - ns2__client* soap_new_ns2__client(soap*, int num) allocate and default initialize an array
/// - ns2__client* soap_new_req_ns2__client(soap*, ...) allocate, set required members
/// - ns2__client* soap_new_set_ns2__client(soap*, ...) allocate, set all public members
/// - ns2__client::soap_default(soap*) default initialize members
/// - int soap_read_ns2__client(soap*, ns2__client*) deserialize from a stream
/// - int soap_write_ns2__client(soap*, ns2__client*) serialize to a stream
/// - ns2__client* ns2__client::soap_dup(soap*) returns deep copy of ns2__client, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__client::soap_del() deep deletes ns2__client data members, use only after ns2__client::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__client::soap_type() returns SOAP_TYPE_ns2__client or derived type identifier
class ns2__client
{ public:
/// Element "clientBought" of type xs:int.
    int                                  clientBought                   1;	///< Required element.
/// Element "clientEmail" of type xs:string.
    std::string*                         clientEmail                    0;	///< Optional element.
/// Element "clientId" of type xs:int.
    int                                  clientId                       1;	///< Required element.
/// Element "clientImage" of type xs:string.
    std::string*                         clientImage                    0;	///< Optional element.
/// Element "clientName" of type xs:string.
    std::string*                         clientName                     0;	///< Optional element.
/// Element "clientPhone" of type xs:string.
    std::string*                         clientPhone                    0;	///< Optional element.
/// Element "clientPwd" of type xs:string.
    std::string*                         clientPwd                      0;	///< Optional element.
/// Element "clientSignTime" of type xs:dateTime.
    time_t*                              clientSignTime                 0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getReadMessageFromShopResponse is a complexType.
///
/// @note class ns2__getReadMessageFromShopResponse operations:
/// - ns2__getReadMessageFromShopResponse* soap_new_ns2__getReadMessageFromShopResponse(soap*) allocate and default initialize
/// - ns2__getReadMessageFromShopResponse* soap_new_ns2__getReadMessageFromShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getReadMessageFromShopResponse* soap_new_req_ns2__getReadMessageFromShopResponse(soap*, ...) allocate, set required members
/// - ns2__getReadMessageFromShopResponse* soap_new_set_ns2__getReadMessageFromShopResponse(soap*, ...) allocate, set all public members
/// - ns2__getReadMessageFromShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getReadMessageFromShopResponse(soap*, ns2__getReadMessageFromShopResponse*) deserialize from a stream
/// - int soap_write_ns2__getReadMessageFromShopResponse(soap*, ns2__getReadMessageFromShopResponse*) serialize to a stream
/// - ns2__getReadMessageFromShopResponse* ns2__getReadMessageFromShopResponse::soap_dup(soap*) returns deep copy of ns2__getReadMessageFromShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getReadMessageFromShopResponse::soap_del() deep deletes ns2__getReadMessageFromShopResponse data members, use only after ns2__getReadMessageFromShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getReadMessageFromShopResponse::soap_type() returns SOAP_TYPE_ns2__getReadMessageFromShopResponse or derived type identifier
class ns2__getReadMessageFromShopResponse
{ public:
/// Vector of ns2__message* of length 0..unbounded.
    std::vector<ns2__message*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":message is a complexType.
///
/// @note class ns2__message operations:
/// - ns2__message* soap_new_ns2__message(soap*) allocate and default initialize
/// - ns2__message* soap_new_ns2__message(soap*, int num) allocate and default initialize an array
/// - ns2__message* soap_new_req_ns2__message(soap*, ...) allocate, set required members
/// - ns2__message* soap_new_set_ns2__message(soap*, ...) allocate, set all public members
/// - ns2__message::soap_default(soap*) default initialize members
/// - int soap_read_ns2__message(soap*, ns2__message*) deserialize from a stream
/// - int soap_write_ns2__message(soap*, ns2__message*) serialize to a stream
/// - ns2__message* ns2__message::soap_dup(soap*) returns deep copy of ns2__message, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__message::soap_del() deep deletes ns2__message data members, use only after ns2__message::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__message::soap_type() returns SOAP_TYPE_ns2__message or derived type identifier
class ns2__message
{ public:
/// Element "msgClientId" of type xs:int.
    int                                  msgClientId                    1;	///< Required element.
/// Element "msgClientName" of type xs:string.
    std::string*                         msgClientName                  0;	///< Optional element.
/// Element "msgContent" of type xs:string.
    std::string*                         msgContent                     0;	///< Optional element.
/// Element "msgFrom" of type xs:int.
    int                                  msgFrom                        1;	///< Required element.
/// Element "msgId" of type xs:int.
    int                                  msgId                          1;	///< Required element.
/// Element "msgShopId" of type xs:int.
    int                                  msgShopId                      1;	///< Required element.
/// Element "msgShopName" of type xs:string.
    std::string*                         msgShopName                    0;	///< Optional element.
/// Element "msgTime" of type xs:dateTime.
    time_t*                              msgTime                        0;	///< Optional element.
/// Element "readStatus" of type xs:int.
    int                                  readStatus                     1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateClient is a complexType.
///
/// @note class ns2__updateClient operations:
/// - ns2__updateClient* soap_new_ns2__updateClient(soap*) allocate and default initialize
/// - ns2__updateClient* soap_new_ns2__updateClient(soap*, int num) allocate and default initialize an array
/// - ns2__updateClient* soap_new_req_ns2__updateClient(soap*, ...) allocate, set required members
/// - ns2__updateClient* soap_new_set_ns2__updateClient(soap*, ...) allocate, set all public members
/// - ns2__updateClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateClient(soap*, ns2__updateClient*) deserialize from a stream
/// - int soap_write_ns2__updateClient(soap*, ns2__updateClient*) serialize to a stream
/// - ns2__updateClient* ns2__updateClient::soap_dup(soap*) returns deep copy of ns2__updateClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateClient::soap_del() deep deletes ns2__updateClient data members, use only after ns2__updateClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateClient::soap_type() returns SOAP_TYPE_ns2__updateClient or derived type identifier
class ns2__updateClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    ns2__client*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateClientResponse is a complexType.
///
/// @note class ns2__updateClientResponse operations:
/// - ns2__updateClientResponse* soap_new_ns2__updateClientResponse(soap*) allocate and default initialize
/// - ns2__updateClientResponse* soap_new_ns2__updateClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__updateClientResponse* soap_new_req_ns2__updateClientResponse(soap*, ...) allocate, set required members
/// - ns2__updateClientResponse* soap_new_set_ns2__updateClientResponse(soap*, ...) allocate, set all public members
/// - ns2__updateClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateClientResponse(soap*, ns2__updateClientResponse*) deserialize from a stream
/// - int soap_write_ns2__updateClientResponse(soap*, ns2__updateClientResponse*) serialize to a stream
/// - ns2__updateClientResponse* ns2__updateClientResponse::soap_dup(soap*) returns deep copy of ns2__updateClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateClientResponse::soap_del() deep deletes ns2__updateClientResponse data members, use only after ns2__updateClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateClientResponse::soap_type() returns SOAP_TYPE_ns2__updateClientResponse or derived type identifier
class ns2__updateClientResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductByInfo is a complexType.
///
/// @note class ns2__deleteProductByInfo operations:
/// - ns2__deleteProductByInfo* soap_new_ns2__deleteProductByInfo(soap*) allocate and default initialize
/// - ns2__deleteProductByInfo* soap_new_ns2__deleteProductByInfo(soap*, int num) allocate and default initialize an array
/// - ns2__deleteProductByInfo* soap_new_req_ns2__deleteProductByInfo(soap*, ...) allocate, set required members
/// - ns2__deleteProductByInfo* soap_new_set_ns2__deleteProductByInfo(soap*, ...) allocate, set all public members
/// - ns2__deleteProductByInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteProductByInfo(soap*, ns2__deleteProductByInfo*) deserialize from a stream
/// - int soap_write_ns2__deleteProductByInfo(soap*, ns2__deleteProductByInfo*) serialize to a stream
/// - ns2__deleteProductByInfo* ns2__deleteProductByInfo::soap_dup(soap*) returns deep copy of ns2__deleteProductByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteProductByInfo::soap_del() deep deletes ns2__deleteProductByInfo data members, use only after ns2__deleteProductByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteProductByInfo::soap_type() returns SOAP_TYPE_ns2__deleteProductByInfo or derived type identifier
class ns2__deleteProductByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    ns2__product*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductByInfoResponse is a complexType.
///
/// @note class ns2__deleteProductByInfoResponse operations:
/// - ns2__deleteProductByInfoResponse* soap_new_ns2__deleteProductByInfoResponse(soap*) allocate and default initialize
/// - ns2__deleteProductByInfoResponse* soap_new_ns2__deleteProductByInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteProductByInfoResponse* soap_new_req_ns2__deleteProductByInfoResponse(soap*, ...) allocate, set required members
/// - ns2__deleteProductByInfoResponse* soap_new_set_ns2__deleteProductByInfoResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteProductByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteProductByInfoResponse(soap*, ns2__deleteProductByInfoResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteProductByInfoResponse(soap*, ns2__deleteProductByInfoResponse*) serialize to a stream
/// - ns2__deleteProductByInfoResponse* ns2__deleteProductByInfoResponse::soap_dup(soap*) returns deep copy of ns2__deleteProductByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteProductByInfoResponse::soap_del() deep deletes ns2__deleteProductByInfoResponse data members, use only after ns2__deleteProductByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteProductByInfoResponse::soap_type() returns SOAP_TYPE_ns2__deleteProductByInfoResponse or derived type identifier
class ns2__deleteProductByInfoResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteClientByNameAndPwd is a complexType.
///
/// @note class ns2__deleteClientByNameAndPwd operations:
/// - ns2__deleteClientByNameAndPwd* soap_new_ns2__deleteClientByNameAndPwd(soap*) allocate and default initialize
/// - ns2__deleteClientByNameAndPwd* soap_new_ns2__deleteClientByNameAndPwd(soap*, int num) allocate and default initialize an array
/// - ns2__deleteClientByNameAndPwd* soap_new_req_ns2__deleteClientByNameAndPwd(soap*, ...) allocate, set required members
/// - ns2__deleteClientByNameAndPwd* soap_new_set_ns2__deleteClientByNameAndPwd(soap*, ...) allocate, set all public members
/// - ns2__deleteClientByNameAndPwd::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteClientByNameAndPwd(soap*, ns2__deleteClientByNameAndPwd*) deserialize from a stream
/// - int soap_write_ns2__deleteClientByNameAndPwd(soap*, ns2__deleteClientByNameAndPwd*) serialize to a stream
/// - ns2__deleteClientByNameAndPwd* ns2__deleteClientByNameAndPwd::soap_dup(soap*) returns deep copy of ns2__deleteClientByNameAndPwd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteClientByNameAndPwd::soap_del() deep deletes ns2__deleteClientByNameAndPwd data members, use only after ns2__deleteClientByNameAndPwd::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteClientByNameAndPwd::soap_type() returns SOAP_TYPE_ns2__deleteClientByNameAndPwd or derived type identifier
class ns2__deleteClientByNameAndPwd
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteClientByNameAndPwdResponse is a complexType.
///
/// @note class ns2__deleteClientByNameAndPwdResponse operations:
/// - ns2__deleteClientByNameAndPwdResponse* soap_new_ns2__deleteClientByNameAndPwdResponse(soap*) allocate and default initialize
/// - ns2__deleteClientByNameAndPwdResponse* soap_new_ns2__deleteClientByNameAndPwdResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteClientByNameAndPwdResponse* soap_new_req_ns2__deleteClientByNameAndPwdResponse(soap*, ...) allocate, set required members
/// - ns2__deleteClientByNameAndPwdResponse* soap_new_set_ns2__deleteClientByNameAndPwdResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteClientByNameAndPwdResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteClientByNameAndPwdResponse(soap*, ns2__deleteClientByNameAndPwdResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteClientByNameAndPwdResponse(soap*, ns2__deleteClientByNameAndPwdResponse*) serialize to a stream
/// - ns2__deleteClientByNameAndPwdResponse* ns2__deleteClientByNameAndPwdResponse::soap_dup(soap*) returns deep copy of ns2__deleteClientByNameAndPwdResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteClientByNameAndPwdResponse::soap_del() deep deletes ns2__deleteClientByNameAndPwdResponse data members, use only after ns2__deleteClientByNameAndPwdResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteClientByNameAndPwdResponse::soap_type() returns SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse or derived type identifier
class ns2__deleteClientByNameAndPwdResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertShop is a complexType.
///
/// @note class ns2__InsertShop operations:
/// - ns2__InsertShop* soap_new_ns2__InsertShop(soap*) allocate and default initialize
/// - ns2__InsertShop* soap_new_ns2__InsertShop(soap*, int num) allocate and default initialize an array
/// - ns2__InsertShop* soap_new_req_ns2__InsertShop(soap*, ...) allocate, set required members
/// - ns2__InsertShop* soap_new_set_ns2__InsertShop(soap*, ...) allocate, set all public members
/// - ns2__InsertShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InsertShop(soap*, ns2__InsertShop*) deserialize from a stream
/// - int soap_write_ns2__InsertShop(soap*, ns2__InsertShop*) serialize to a stream
/// - ns2__InsertShop* ns2__InsertShop::soap_dup(soap*) returns deep copy of ns2__InsertShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InsertShop::soap_del() deep deletes ns2__InsertShop data members, use only after ns2__InsertShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__InsertShop::soap_type() returns SOAP_TYPE_ns2__InsertShop or derived type identifier
class ns2__InsertShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":shop.
    ns2__shop*                           arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertShopResponse is a complexType.
///
/// @note class ns2__InsertShopResponse operations:
/// - ns2__InsertShopResponse* soap_new_ns2__InsertShopResponse(soap*) allocate and default initialize
/// - ns2__InsertShopResponse* soap_new_ns2__InsertShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__InsertShopResponse* soap_new_req_ns2__InsertShopResponse(soap*, ...) allocate, set required members
/// - ns2__InsertShopResponse* soap_new_set_ns2__InsertShopResponse(soap*, ...) allocate, set all public members
/// - ns2__InsertShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InsertShopResponse(soap*, ns2__InsertShopResponse*) deserialize from a stream
/// - int soap_write_ns2__InsertShopResponse(soap*, ns2__InsertShopResponse*) serialize to a stream
/// - ns2__InsertShopResponse* ns2__InsertShopResponse::soap_dup(soap*) returns deep copy of ns2__InsertShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InsertShopResponse::soap_del() deep deletes ns2__InsertShopResponse data members, use only after ns2__InsertShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__InsertShopResponse::soap_type() returns SOAP_TYPE_ns2__InsertShopResponse or derived type identifier
class ns2__InsertShopResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateMessageFromShop is a complexType.
///
/// @note class ns2__updateMessageFromShop operations:
/// - ns2__updateMessageFromShop* soap_new_ns2__updateMessageFromShop(soap*) allocate and default initialize
/// - ns2__updateMessageFromShop* soap_new_ns2__updateMessageFromShop(soap*, int num) allocate and default initialize an array
/// - ns2__updateMessageFromShop* soap_new_req_ns2__updateMessageFromShop(soap*, ...) allocate, set required members
/// - ns2__updateMessageFromShop* soap_new_set_ns2__updateMessageFromShop(soap*, ...) allocate, set all public members
/// - ns2__updateMessageFromShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateMessageFromShop(soap*, ns2__updateMessageFromShop*) deserialize from a stream
/// - int soap_write_ns2__updateMessageFromShop(soap*, ns2__updateMessageFromShop*) serialize to a stream
/// - ns2__updateMessageFromShop* ns2__updateMessageFromShop::soap_dup(soap*) returns deep copy of ns2__updateMessageFromShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateMessageFromShop::soap_del() deep deletes ns2__updateMessageFromShop data members, use only after ns2__updateMessageFromShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateMessageFromShop::soap_type() returns SOAP_TYPE_ns2__updateMessageFromShop or derived type identifier
class ns2__updateMessageFromShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":message.
    ns2__message*                        arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateMessageFromShopResponse is a complexType.
///
/// @note class ns2__updateMessageFromShopResponse operations:
/// - ns2__updateMessageFromShopResponse* soap_new_ns2__updateMessageFromShopResponse(soap*) allocate and default initialize
/// - ns2__updateMessageFromShopResponse* soap_new_ns2__updateMessageFromShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__updateMessageFromShopResponse* soap_new_req_ns2__updateMessageFromShopResponse(soap*, ...) allocate, set required members
/// - ns2__updateMessageFromShopResponse* soap_new_set_ns2__updateMessageFromShopResponse(soap*, ...) allocate, set all public members
/// - ns2__updateMessageFromShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateMessageFromShopResponse(soap*, ns2__updateMessageFromShopResponse*) deserialize from a stream
/// - int soap_write_ns2__updateMessageFromShopResponse(soap*, ns2__updateMessageFromShopResponse*) serialize to a stream
/// - ns2__updateMessageFromShopResponse* ns2__updateMessageFromShopResponse::soap_dup(soap*) returns deep copy of ns2__updateMessageFromShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateMessageFromShopResponse::soap_del() deep deletes ns2__updateMessageFromShopResponse data members, use only after ns2__updateMessageFromShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateMessageFromShopResponse::soap_type() returns SOAP_TYPE_ns2__updateMessageFromShopResponse or derived type identifier
class ns2__updateMessageFromShopResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductTypeByProName is a complexType.
///
/// @note class ns2__getProductTypeByProName operations:
/// - ns2__getProductTypeByProName* soap_new_ns2__getProductTypeByProName(soap*) allocate and default initialize
/// - ns2__getProductTypeByProName* soap_new_ns2__getProductTypeByProName(soap*, int num) allocate and default initialize an array
/// - ns2__getProductTypeByProName* soap_new_req_ns2__getProductTypeByProName(soap*, ...) allocate, set required members
/// - ns2__getProductTypeByProName* soap_new_set_ns2__getProductTypeByProName(soap*, ...) allocate, set all public members
/// - ns2__getProductTypeByProName::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductTypeByProName(soap*, ns2__getProductTypeByProName*) deserialize from a stream
/// - int soap_write_ns2__getProductTypeByProName(soap*, ns2__getProductTypeByProName*) serialize to a stream
/// - ns2__getProductTypeByProName* ns2__getProductTypeByProName::soap_dup(soap*) returns deep copy of ns2__getProductTypeByProName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductTypeByProName::soap_del() deep deletes ns2__getProductTypeByProName data members, use only after ns2__getProductTypeByProName::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductTypeByProName::soap_type() returns SOAP_TYPE_ns2__getProductTypeByProName or derived type identifier
class ns2__getProductTypeByProName
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductTypeByProNameResponse is a complexType.
///
/// @note class ns2__getProductTypeByProNameResponse operations:
/// - ns2__getProductTypeByProNameResponse* soap_new_ns2__getProductTypeByProNameResponse(soap*) allocate and default initialize
/// - ns2__getProductTypeByProNameResponse* soap_new_ns2__getProductTypeByProNameResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getProductTypeByProNameResponse* soap_new_req_ns2__getProductTypeByProNameResponse(soap*, ...) allocate, set required members
/// - ns2__getProductTypeByProNameResponse* soap_new_set_ns2__getProductTypeByProNameResponse(soap*, ...) allocate, set all public members
/// - ns2__getProductTypeByProNameResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductTypeByProNameResponse(soap*, ns2__getProductTypeByProNameResponse*) deserialize from a stream
/// - int soap_write_ns2__getProductTypeByProNameResponse(soap*, ns2__getProductTypeByProNameResponse*) serialize to a stream
/// - ns2__getProductTypeByProNameResponse* ns2__getProductTypeByProNameResponse::soap_dup(soap*) returns deep copy of ns2__getProductTypeByProNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductTypeByProNameResponse::soap_del() deep deletes ns2__getProductTypeByProNameResponse data members, use only after ns2__getProductTypeByProNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductTypeByProNameResponse::soap_type() returns SOAP_TYPE_ns2__getProductTypeByProNameResponse or derived type identifier
class ns2__getProductTypeByProNameResponse
{ public:
/// Vector of ns2__productType* of length 0..unbounded.
    std::vector<ns2__productType*      > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":productType is a complexType.
///
/// @note class ns2__productType operations:
/// - ns2__productType* soap_new_ns2__productType(soap*) allocate and default initialize
/// - ns2__productType* soap_new_ns2__productType(soap*, int num) allocate and default initialize an array
/// - ns2__productType* soap_new_req_ns2__productType(soap*, ...) allocate, set required members
/// - ns2__productType* soap_new_set_ns2__productType(soap*, ...) allocate, set all public members
/// - ns2__productType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__productType(soap*, ns2__productType*) deserialize from a stream
/// - int soap_write_ns2__productType(soap*, ns2__productType*) serialize to a stream
/// - ns2__productType* ns2__productType::soap_dup(soap*) returns deep copy of ns2__productType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__productType::soap_del() deep deletes ns2__productType data members, use only after ns2__productType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__productType::soap_type() returns SOAP_TYPE_ns2__productType or derived type identifier
class ns2__productType
{ public:
/// Element "typeId" of type xs:int.
    int                                  typeId                         1;	///< Required element.
/// Element "typeName" of type xs:string.
    std::string*                         typeName                       0;	///< Optional element.
/// Element "typeProduct" of type xs:string.
    std::string*                         typeProduct                    0;	///< Optional element.
/// Element "typeProductId" of type xs:int.
    int                                  typeProductId                  1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientList is a complexType.
///
/// @note class ns2__getClientList operations:
/// - ns2__getClientList* soap_new_ns2__getClientList(soap*) allocate and default initialize
/// - ns2__getClientList* soap_new_ns2__getClientList(soap*, int num) allocate and default initialize an array
/// - ns2__getClientList* soap_new_req_ns2__getClientList(soap*, ...) allocate, set required members
/// - ns2__getClientList* soap_new_set_ns2__getClientList(soap*, ...) allocate, set all public members
/// - ns2__getClientList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getClientList(soap*, ns2__getClientList*) deserialize from a stream
/// - int soap_write_ns2__getClientList(soap*, ns2__getClientList*) serialize to a stream
/// - ns2__getClientList* ns2__getClientList::soap_dup(soap*) returns deep copy of ns2__getClientList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getClientList::soap_del() deep deletes ns2__getClientList data members, use only after ns2__getClientList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getClientList::soap_type() returns SOAP_TYPE_ns2__getClientList or derived type identifier
class ns2__getClientList
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientListResponse is a complexType.
///
/// @note class ns2__getClientListResponse operations:
/// - ns2__getClientListResponse* soap_new_ns2__getClientListResponse(soap*) allocate and default initialize
/// - ns2__getClientListResponse* soap_new_ns2__getClientListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getClientListResponse* soap_new_req_ns2__getClientListResponse(soap*, ...) allocate, set required members
/// - ns2__getClientListResponse* soap_new_set_ns2__getClientListResponse(soap*, ...) allocate, set all public members
/// - ns2__getClientListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getClientListResponse(soap*, ns2__getClientListResponse*) deserialize from a stream
/// - int soap_write_ns2__getClientListResponse(soap*, ns2__getClientListResponse*) serialize to a stream
/// - ns2__getClientListResponse* ns2__getClientListResponse::soap_dup(soap*) returns deep copy of ns2__getClientListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getClientListResponse::soap_del() deep deletes ns2__getClientListResponse data members, use only after ns2__getClientListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getClientListResponse::soap_type() returns SOAP_TYPE_ns2__getClientListResponse or derived type identifier
class ns2__getClientListResponse
{ public:
/// Vector of ns2__client* of length 0..unbounded.
    std::vector<ns2__client*           > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":purchaseProduct is a complexType.
///
/// @note class ns2__purchaseProduct operations:
/// - ns2__purchaseProduct* soap_new_ns2__purchaseProduct(soap*) allocate and default initialize
/// - ns2__purchaseProduct* soap_new_ns2__purchaseProduct(soap*, int num) allocate and default initialize an array
/// - ns2__purchaseProduct* soap_new_req_ns2__purchaseProduct(soap*, ...) allocate, set required members
/// - ns2__purchaseProduct* soap_new_set_ns2__purchaseProduct(soap*, ...) allocate, set all public members
/// - ns2__purchaseProduct::soap_default(soap*) default initialize members
/// - int soap_read_ns2__purchaseProduct(soap*, ns2__purchaseProduct*) deserialize from a stream
/// - int soap_write_ns2__purchaseProduct(soap*, ns2__purchaseProduct*) serialize to a stream
/// - ns2__purchaseProduct* ns2__purchaseProduct::soap_dup(soap*) returns deep copy of ns2__purchaseProduct, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__purchaseProduct::soap_del() deep deletes ns2__purchaseProduct data members, use only after ns2__purchaseProduct::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__purchaseProduct::soap_type() returns SOAP_TYPE_ns2__purchaseProduct or derived type identifier
class ns2__purchaseProduct
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":purchaseProductResponse is a complexType.
///
/// @note class ns2__purchaseProductResponse operations:
/// - ns2__purchaseProductResponse* soap_new_ns2__purchaseProductResponse(soap*) allocate and default initialize
/// - ns2__purchaseProductResponse* soap_new_ns2__purchaseProductResponse(soap*, int num) allocate and default initialize an array
/// - ns2__purchaseProductResponse* soap_new_req_ns2__purchaseProductResponse(soap*, ...) allocate, set required members
/// - ns2__purchaseProductResponse* soap_new_set_ns2__purchaseProductResponse(soap*, ...) allocate, set all public members
/// - ns2__purchaseProductResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__purchaseProductResponse(soap*, ns2__purchaseProductResponse*) deserialize from a stream
/// - int soap_write_ns2__purchaseProductResponse(soap*, ns2__purchaseProductResponse*) serialize to a stream
/// - ns2__purchaseProductResponse* ns2__purchaseProductResponse::soap_dup(soap*) returns deep copy of ns2__purchaseProductResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__purchaseProductResponse::soap_del() deep deletes ns2__purchaseProductResponse data members, use only after ns2__purchaseProductResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__purchaseProductResponse::soap_type() returns SOAP_TYPE_ns2__purchaseProductResponse or derived type identifier
class ns2__purchaseProductResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateMessageFromClient is a complexType.
///
/// @note class ns2__updateMessageFromClient operations:
/// - ns2__updateMessageFromClient* soap_new_ns2__updateMessageFromClient(soap*) allocate and default initialize
/// - ns2__updateMessageFromClient* soap_new_ns2__updateMessageFromClient(soap*, int num) allocate and default initialize an array
/// - ns2__updateMessageFromClient* soap_new_req_ns2__updateMessageFromClient(soap*, ...) allocate, set required members
/// - ns2__updateMessageFromClient* soap_new_set_ns2__updateMessageFromClient(soap*, ...) allocate, set all public members
/// - ns2__updateMessageFromClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateMessageFromClient(soap*, ns2__updateMessageFromClient*) deserialize from a stream
/// - int soap_write_ns2__updateMessageFromClient(soap*, ns2__updateMessageFromClient*) serialize to a stream
/// - ns2__updateMessageFromClient* ns2__updateMessageFromClient::soap_dup(soap*) returns deep copy of ns2__updateMessageFromClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateMessageFromClient::soap_del() deep deletes ns2__updateMessageFromClient data members, use only after ns2__updateMessageFromClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateMessageFromClient::soap_type() returns SOAP_TYPE_ns2__updateMessageFromClient or derived type identifier
class ns2__updateMessageFromClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":message.
    ns2__message*                        arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateMessageFromClientResponse is a complexType.
///
/// @note class ns2__updateMessageFromClientResponse operations:
/// - ns2__updateMessageFromClientResponse* soap_new_ns2__updateMessageFromClientResponse(soap*) allocate and default initialize
/// - ns2__updateMessageFromClientResponse* soap_new_ns2__updateMessageFromClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__updateMessageFromClientResponse* soap_new_req_ns2__updateMessageFromClientResponse(soap*, ...) allocate, set required members
/// - ns2__updateMessageFromClientResponse* soap_new_set_ns2__updateMessageFromClientResponse(soap*, ...) allocate, set all public members
/// - ns2__updateMessageFromClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateMessageFromClientResponse(soap*, ns2__updateMessageFromClientResponse*) deserialize from a stream
/// - int soap_write_ns2__updateMessageFromClientResponse(soap*, ns2__updateMessageFromClientResponse*) serialize to a stream
/// - ns2__updateMessageFromClientResponse* ns2__updateMessageFromClientResponse::soap_dup(soap*) returns deep copy of ns2__updateMessageFromClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateMessageFromClientResponse::soap_del() deep deletes ns2__updateMessageFromClientResponse data members, use only after ns2__updateMessageFromClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateMessageFromClientResponse::soap_type() returns SOAP_TYPE_ns2__updateMessageFromClientResponse or derived type identifier
class ns2__updateMessageFromClientResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getUnreadMessageFromClient is a complexType.
///
/// @note class ns2__getUnreadMessageFromClient operations:
/// - ns2__getUnreadMessageFromClient* soap_new_ns2__getUnreadMessageFromClient(soap*) allocate and default initialize
/// - ns2__getUnreadMessageFromClient* soap_new_ns2__getUnreadMessageFromClient(soap*, int num) allocate and default initialize an array
/// - ns2__getUnreadMessageFromClient* soap_new_req_ns2__getUnreadMessageFromClient(soap*, ...) allocate, set required members
/// - ns2__getUnreadMessageFromClient* soap_new_set_ns2__getUnreadMessageFromClient(soap*, ...) allocate, set all public members
/// - ns2__getUnreadMessageFromClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getUnreadMessageFromClient(soap*, ns2__getUnreadMessageFromClient*) deserialize from a stream
/// - int soap_write_ns2__getUnreadMessageFromClient(soap*, ns2__getUnreadMessageFromClient*) serialize to a stream
/// - ns2__getUnreadMessageFromClient* ns2__getUnreadMessageFromClient::soap_dup(soap*) returns deep copy of ns2__getUnreadMessageFromClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getUnreadMessageFromClient::soap_del() deep deletes ns2__getUnreadMessageFromClient data members, use only after ns2__getUnreadMessageFromClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getUnreadMessageFromClient::soap_type() returns SOAP_TYPE_ns2__getUnreadMessageFromClient or derived type identifier
class ns2__getUnreadMessageFromClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":shop.
    ns2__shop*                           arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getUnreadMessageFromClientResponse is a complexType.
///
/// @note class ns2__getUnreadMessageFromClientResponse operations:
/// - ns2__getUnreadMessageFromClientResponse* soap_new_ns2__getUnreadMessageFromClientResponse(soap*) allocate and default initialize
/// - ns2__getUnreadMessageFromClientResponse* soap_new_ns2__getUnreadMessageFromClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getUnreadMessageFromClientResponse* soap_new_req_ns2__getUnreadMessageFromClientResponse(soap*, ...) allocate, set required members
/// - ns2__getUnreadMessageFromClientResponse* soap_new_set_ns2__getUnreadMessageFromClientResponse(soap*, ...) allocate, set all public members
/// - ns2__getUnreadMessageFromClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getUnreadMessageFromClientResponse(soap*, ns2__getUnreadMessageFromClientResponse*) deserialize from a stream
/// - int soap_write_ns2__getUnreadMessageFromClientResponse(soap*, ns2__getUnreadMessageFromClientResponse*) serialize to a stream
/// - ns2__getUnreadMessageFromClientResponse* ns2__getUnreadMessageFromClientResponse::soap_dup(soap*) returns deep copy of ns2__getUnreadMessageFromClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getUnreadMessageFromClientResponse::soap_del() deep deletes ns2__getUnreadMessageFromClientResponse data members, use only after ns2__getUnreadMessageFromClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getUnreadMessageFromClientResponse::soap_type() returns SOAP_TYPE_ns2__getUnreadMessageFromClientResponse or derived type identifier
class ns2__getUnreadMessageFromClientResponse
{ public:
/// Vector of ns2__message* of length 0..unbounded.
    std::vector<ns2__message*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateProductByInfo is a complexType.
///
/// @note class ns2__updateProductByInfo operations:
/// - ns2__updateProductByInfo* soap_new_ns2__updateProductByInfo(soap*) allocate and default initialize
/// - ns2__updateProductByInfo* soap_new_ns2__updateProductByInfo(soap*, int num) allocate and default initialize an array
/// - ns2__updateProductByInfo* soap_new_req_ns2__updateProductByInfo(soap*, ...) allocate, set required members
/// - ns2__updateProductByInfo* soap_new_set_ns2__updateProductByInfo(soap*, ...) allocate, set all public members
/// - ns2__updateProductByInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateProductByInfo(soap*, ns2__updateProductByInfo*) deserialize from a stream
/// - int soap_write_ns2__updateProductByInfo(soap*, ns2__updateProductByInfo*) serialize to a stream
/// - ns2__updateProductByInfo* ns2__updateProductByInfo::soap_dup(soap*) returns deep copy of ns2__updateProductByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateProductByInfo::soap_del() deep deletes ns2__updateProductByInfo data members, use only after ns2__updateProductByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateProductByInfo::soap_type() returns SOAP_TYPE_ns2__updateProductByInfo or derived type identifier
class ns2__updateProductByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    ns2__product*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateProductByInfoResponse is a complexType.
///
/// @note class ns2__updateProductByInfoResponse operations:
/// - ns2__updateProductByInfoResponse* soap_new_ns2__updateProductByInfoResponse(soap*) allocate and default initialize
/// - ns2__updateProductByInfoResponse* soap_new_ns2__updateProductByInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns2__updateProductByInfoResponse* soap_new_req_ns2__updateProductByInfoResponse(soap*, ...) allocate, set required members
/// - ns2__updateProductByInfoResponse* soap_new_set_ns2__updateProductByInfoResponse(soap*, ...) allocate, set all public members
/// - ns2__updateProductByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateProductByInfoResponse(soap*, ns2__updateProductByInfoResponse*) deserialize from a stream
/// - int soap_write_ns2__updateProductByInfoResponse(soap*, ns2__updateProductByInfoResponse*) serialize to a stream
/// - ns2__updateProductByInfoResponse* ns2__updateProductByInfoResponse::soap_dup(soap*) returns deep copy of ns2__updateProductByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateProductByInfoResponse::soap_del() deep deletes ns2__updateProductByInfoResponse data members, use only after ns2__updateProductByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateProductByInfoResponse::soap_type() returns SOAP_TYPE_ns2__updateProductByInfoResponse or derived type identifier
class ns2__updateProductByInfoResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getMessageFromClient is a complexType.
///
/// @note class ns2__getMessageFromClient operations:
/// - ns2__getMessageFromClient* soap_new_ns2__getMessageFromClient(soap*) allocate and default initialize
/// - ns2__getMessageFromClient* soap_new_ns2__getMessageFromClient(soap*, int num) allocate and default initialize an array
/// - ns2__getMessageFromClient* soap_new_req_ns2__getMessageFromClient(soap*, ...) allocate, set required members
/// - ns2__getMessageFromClient* soap_new_set_ns2__getMessageFromClient(soap*, ...) allocate, set all public members
/// - ns2__getMessageFromClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getMessageFromClient(soap*, ns2__getMessageFromClient*) deserialize from a stream
/// - int soap_write_ns2__getMessageFromClient(soap*, ns2__getMessageFromClient*) serialize to a stream
/// - ns2__getMessageFromClient* ns2__getMessageFromClient::soap_dup(soap*) returns deep copy of ns2__getMessageFromClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getMessageFromClient::soap_del() deep deletes ns2__getMessageFromClient data members, use only after ns2__getMessageFromClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getMessageFromClient::soap_type() returns SOAP_TYPE_ns2__getMessageFromClient or derived type identifier
class ns2__getMessageFromClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":shop.
    ns2__shop*                           arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getMessageFromClientResponse is a complexType.
///
/// @note class ns2__getMessageFromClientResponse operations:
/// - ns2__getMessageFromClientResponse* soap_new_ns2__getMessageFromClientResponse(soap*) allocate and default initialize
/// - ns2__getMessageFromClientResponse* soap_new_ns2__getMessageFromClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getMessageFromClientResponse* soap_new_req_ns2__getMessageFromClientResponse(soap*, ...) allocate, set required members
/// - ns2__getMessageFromClientResponse* soap_new_set_ns2__getMessageFromClientResponse(soap*, ...) allocate, set all public members
/// - ns2__getMessageFromClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getMessageFromClientResponse(soap*, ns2__getMessageFromClientResponse*) deserialize from a stream
/// - int soap_write_ns2__getMessageFromClientResponse(soap*, ns2__getMessageFromClientResponse*) serialize to a stream
/// - ns2__getMessageFromClientResponse* ns2__getMessageFromClientResponse::soap_dup(soap*) returns deep copy of ns2__getMessageFromClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getMessageFromClientResponse::soap_del() deep deletes ns2__getMessageFromClientResponse data members, use only after ns2__getMessageFromClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getMessageFromClientResponse::soap_type() returns SOAP_TYPE_ns2__getMessageFromClientResponse or derived type identifier
class ns2__getMessageFromClientResponse
{ public:
/// Vector of ns2__message* of length 0..unbounded.
    std::vector<ns2__message*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addOrder is a complexType.
///
/// @note class ns2__addOrder operations:
/// - ns2__addOrder* soap_new_ns2__addOrder(soap*) allocate and default initialize
/// - ns2__addOrder* soap_new_ns2__addOrder(soap*, int num) allocate and default initialize an array
/// - ns2__addOrder* soap_new_req_ns2__addOrder(soap*, ...) allocate, set required members
/// - ns2__addOrder* soap_new_set_ns2__addOrder(soap*, ...) allocate, set all public members
/// - ns2__addOrder::soap_default(soap*) default initialize members
/// - int soap_read_ns2__addOrder(soap*, ns2__addOrder*) deserialize from a stream
/// - int soap_write_ns2__addOrder(soap*, ns2__addOrder*) serialize to a stream
/// - ns2__addOrder* ns2__addOrder::soap_dup(soap*) returns deep copy of ns2__addOrder, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__addOrder::soap_del() deep deletes ns2__addOrder data members, use only after ns2__addOrder::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__addOrder::soap_type() returns SOAP_TYPE_ns2__addOrder or derived type identifier
class ns2__addOrder
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addOrderResponse is a complexType.
///
/// @note class ns2__addOrderResponse operations:
/// - ns2__addOrderResponse* soap_new_ns2__addOrderResponse(soap*) allocate and default initialize
/// - ns2__addOrderResponse* soap_new_ns2__addOrderResponse(soap*, int num) allocate and default initialize an array
/// - ns2__addOrderResponse* soap_new_req_ns2__addOrderResponse(soap*, ...) allocate, set required members
/// - ns2__addOrderResponse* soap_new_set_ns2__addOrderResponse(soap*, ...) allocate, set all public members
/// - ns2__addOrderResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__addOrderResponse(soap*, ns2__addOrderResponse*) deserialize from a stream
/// - int soap_write_ns2__addOrderResponse(soap*, ns2__addOrderResponse*) serialize to a stream
/// - ns2__addOrderResponse* ns2__addOrderResponse::soap_dup(soap*) returns deep copy of ns2__addOrderResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__addOrderResponse::soap_del() deep deletes ns2__addOrderResponse data members, use only after ns2__addOrderResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__addOrderResponse::soap_type() returns SOAP_TYPE_ns2__addOrderResponse or derived type identifier
class ns2__addOrderResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteShopByNameAndPwd is a complexType.
///
/// @note class ns2__deleteShopByNameAndPwd operations:
/// - ns2__deleteShopByNameAndPwd* soap_new_ns2__deleteShopByNameAndPwd(soap*) allocate and default initialize
/// - ns2__deleteShopByNameAndPwd* soap_new_ns2__deleteShopByNameAndPwd(soap*, int num) allocate and default initialize an array
/// - ns2__deleteShopByNameAndPwd* soap_new_req_ns2__deleteShopByNameAndPwd(soap*, ...) allocate, set required members
/// - ns2__deleteShopByNameAndPwd* soap_new_set_ns2__deleteShopByNameAndPwd(soap*, ...) allocate, set all public members
/// - ns2__deleteShopByNameAndPwd::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteShopByNameAndPwd(soap*, ns2__deleteShopByNameAndPwd*) deserialize from a stream
/// - int soap_write_ns2__deleteShopByNameAndPwd(soap*, ns2__deleteShopByNameAndPwd*) serialize to a stream
/// - ns2__deleteShopByNameAndPwd* ns2__deleteShopByNameAndPwd::soap_dup(soap*) returns deep copy of ns2__deleteShopByNameAndPwd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteShopByNameAndPwd::soap_del() deep deletes ns2__deleteShopByNameAndPwd data members, use only after ns2__deleteShopByNameAndPwd::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteShopByNameAndPwd::soap_type() returns SOAP_TYPE_ns2__deleteShopByNameAndPwd or derived type identifier
class ns2__deleteShopByNameAndPwd
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteShopByNameAndPwdResponse is a complexType.
///
/// @note class ns2__deleteShopByNameAndPwdResponse operations:
/// - ns2__deleteShopByNameAndPwdResponse* soap_new_ns2__deleteShopByNameAndPwdResponse(soap*) allocate and default initialize
/// - ns2__deleteShopByNameAndPwdResponse* soap_new_ns2__deleteShopByNameAndPwdResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteShopByNameAndPwdResponse* soap_new_req_ns2__deleteShopByNameAndPwdResponse(soap*, ...) allocate, set required members
/// - ns2__deleteShopByNameAndPwdResponse* soap_new_set_ns2__deleteShopByNameAndPwdResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteShopByNameAndPwdResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteShopByNameAndPwdResponse(soap*, ns2__deleteShopByNameAndPwdResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteShopByNameAndPwdResponse(soap*, ns2__deleteShopByNameAndPwdResponse*) serialize to a stream
/// - ns2__deleteShopByNameAndPwdResponse* ns2__deleteShopByNameAndPwdResponse::soap_dup(soap*) returns deep copy of ns2__deleteShopByNameAndPwdResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteShopByNameAndPwdResponse::soap_del() deep deletes ns2__deleteShopByNameAndPwdResponse data members, use only after ns2__deleteShopByNameAndPwdResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteShopByNameAndPwdResponse::soap_type() returns SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse or derived type identifier
class ns2__deleteShopByNameAndPwdResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductList is a complexType.
///
/// @note class ns2__getProductList operations:
/// - ns2__getProductList* soap_new_ns2__getProductList(soap*) allocate and default initialize
/// - ns2__getProductList* soap_new_ns2__getProductList(soap*, int num) allocate and default initialize an array
/// - ns2__getProductList* soap_new_req_ns2__getProductList(soap*, ...) allocate, set required members
/// - ns2__getProductList* soap_new_set_ns2__getProductList(soap*, ...) allocate, set all public members
/// - ns2__getProductList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductList(soap*, ns2__getProductList*) deserialize from a stream
/// - int soap_write_ns2__getProductList(soap*, ns2__getProductList*) serialize to a stream
/// - ns2__getProductList* ns2__getProductList::soap_dup(soap*) returns deep copy of ns2__getProductList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductList::soap_del() deep deletes ns2__getProductList data members, use only after ns2__getProductList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductList::soap_type() returns SOAP_TYPE_ns2__getProductList or derived type identifier
class ns2__getProductList
{ public:
/// Element "arg0" of type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Element "arg1" of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductListResponse is a complexType.
///
/// @note class ns2__getProductListResponse operations:
/// - ns2__getProductListResponse* soap_new_ns2__getProductListResponse(soap*) allocate and default initialize
/// - ns2__getProductListResponse* soap_new_ns2__getProductListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getProductListResponse* soap_new_req_ns2__getProductListResponse(soap*, ...) allocate, set required members
/// - ns2__getProductListResponse* soap_new_set_ns2__getProductListResponse(soap*, ...) allocate, set all public members
/// - ns2__getProductListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductListResponse(soap*, ns2__getProductListResponse*) deserialize from a stream
/// - int soap_write_ns2__getProductListResponse(soap*, ns2__getProductListResponse*) serialize to a stream
/// - ns2__getProductListResponse* ns2__getProductListResponse::soap_dup(soap*) returns deep copy of ns2__getProductListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductListResponse::soap_del() deep deletes ns2__getProductListResponse data members, use only after ns2__getProductListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductListResponse::soap_type() returns SOAP_TYPE_ns2__getProductListResponse or derived type identifier
class ns2__getProductListResponse
{ public:
/// Vector of ns2__product* of length 0..unbounded.
    std::vector<ns2__product*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListHistory is a complexType.
///
/// @note class ns2__getOrderListHistory operations:
/// - ns2__getOrderListHistory* soap_new_ns2__getOrderListHistory(soap*) allocate and default initialize
/// - ns2__getOrderListHistory* soap_new_ns2__getOrderListHistory(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderListHistory* soap_new_req_ns2__getOrderListHistory(soap*, ...) allocate, set required members
/// - ns2__getOrderListHistory* soap_new_set_ns2__getOrderListHistory(soap*, ...) allocate, set all public members
/// - ns2__getOrderListHistory::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderListHistory(soap*, ns2__getOrderListHistory*) deserialize from a stream
/// - int soap_write_ns2__getOrderListHistory(soap*, ns2__getOrderListHistory*) serialize to a stream
/// - ns2__getOrderListHistory* ns2__getOrderListHistory::soap_dup(soap*) returns deep copy of ns2__getOrderListHistory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderListHistory::soap_del() deep deletes ns2__getOrderListHistory data members, use only after ns2__getOrderListHistory::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderListHistory::soap_type() returns SOAP_TYPE_ns2__getOrderListHistory or derived type identifier
class ns2__getOrderListHistory
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListHistoryResponse is a complexType.
///
/// @note class ns2__getOrderListHistoryResponse operations:
/// - ns2__getOrderListHistoryResponse* soap_new_ns2__getOrderListHistoryResponse(soap*) allocate and default initialize
/// - ns2__getOrderListHistoryResponse* soap_new_ns2__getOrderListHistoryResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderListHistoryResponse* soap_new_req_ns2__getOrderListHistoryResponse(soap*, ...) allocate, set required members
/// - ns2__getOrderListHistoryResponse* soap_new_set_ns2__getOrderListHistoryResponse(soap*, ...) allocate, set all public members
/// - ns2__getOrderListHistoryResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderListHistoryResponse(soap*, ns2__getOrderListHistoryResponse*) deserialize from a stream
/// - int soap_write_ns2__getOrderListHistoryResponse(soap*, ns2__getOrderListHistoryResponse*) serialize to a stream
/// - ns2__getOrderListHistoryResponse* ns2__getOrderListHistoryResponse::soap_dup(soap*) returns deep copy of ns2__getOrderListHistoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderListHistoryResponse::soap_del() deep deletes ns2__getOrderListHistoryResponse data members, use only after ns2__getOrderListHistoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderListHistoryResponse::soap_type() returns SOAP_TYPE_ns2__getOrderListHistoryResponse or derived type identifier
class ns2__getOrderListHistoryResponse
{ public:
/// Vector of ns2__order* of length 0..unbounded.
    std::vector<ns2__order*            > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getReadMessageFromClient is a complexType.
///
/// @note class ns2__getReadMessageFromClient operations:
/// - ns2__getReadMessageFromClient* soap_new_ns2__getReadMessageFromClient(soap*) allocate and default initialize
/// - ns2__getReadMessageFromClient* soap_new_ns2__getReadMessageFromClient(soap*, int num) allocate and default initialize an array
/// - ns2__getReadMessageFromClient* soap_new_req_ns2__getReadMessageFromClient(soap*, ...) allocate, set required members
/// - ns2__getReadMessageFromClient* soap_new_set_ns2__getReadMessageFromClient(soap*, ...) allocate, set all public members
/// - ns2__getReadMessageFromClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getReadMessageFromClient(soap*, ns2__getReadMessageFromClient*) deserialize from a stream
/// - int soap_write_ns2__getReadMessageFromClient(soap*, ns2__getReadMessageFromClient*) serialize to a stream
/// - ns2__getReadMessageFromClient* ns2__getReadMessageFromClient::soap_dup(soap*) returns deep copy of ns2__getReadMessageFromClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getReadMessageFromClient::soap_del() deep deletes ns2__getReadMessageFromClient data members, use only after ns2__getReadMessageFromClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getReadMessageFromClient::soap_type() returns SOAP_TYPE_ns2__getReadMessageFromClient or derived type identifier
class ns2__getReadMessageFromClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":shop.
    ns2__shop*                           arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getReadMessageFromClientResponse is a complexType.
///
/// @note class ns2__getReadMessageFromClientResponse operations:
/// - ns2__getReadMessageFromClientResponse* soap_new_ns2__getReadMessageFromClientResponse(soap*) allocate and default initialize
/// - ns2__getReadMessageFromClientResponse* soap_new_ns2__getReadMessageFromClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getReadMessageFromClientResponse* soap_new_req_ns2__getReadMessageFromClientResponse(soap*, ...) allocate, set required members
/// - ns2__getReadMessageFromClientResponse* soap_new_set_ns2__getReadMessageFromClientResponse(soap*, ...) allocate, set all public members
/// - ns2__getReadMessageFromClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getReadMessageFromClientResponse(soap*, ns2__getReadMessageFromClientResponse*) deserialize from a stream
/// - int soap_write_ns2__getReadMessageFromClientResponse(soap*, ns2__getReadMessageFromClientResponse*) serialize to a stream
/// - ns2__getReadMessageFromClientResponse* ns2__getReadMessageFromClientResponse::soap_dup(soap*) returns deep copy of ns2__getReadMessageFromClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getReadMessageFromClientResponse::soap_del() deep deletes ns2__getReadMessageFromClientResponse data members, use only after ns2__getReadMessageFromClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getReadMessageFromClientResponse::soap_type() returns SOAP_TYPE_ns2__getReadMessageFromClientResponse or derived type identifier
class ns2__getReadMessageFromClientResponse
{ public:
/// Vector of ns2__message* of length 0..unbounded.
    std::vector<ns2__message*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateHistory is a complexType.
///
/// @note class ns2__updateHistory operations:
/// - ns2__updateHistory* soap_new_ns2__updateHistory(soap*) allocate and default initialize
/// - ns2__updateHistory* soap_new_ns2__updateHistory(soap*, int num) allocate and default initialize an array
/// - ns2__updateHistory* soap_new_req_ns2__updateHistory(soap*, ...) allocate, set required members
/// - ns2__updateHistory* soap_new_set_ns2__updateHistory(soap*, ...) allocate, set all public members
/// - ns2__updateHistory::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateHistory(soap*, ns2__updateHistory*) deserialize from a stream
/// - int soap_write_ns2__updateHistory(soap*, ns2__updateHistory*) serialize to a stream
/// - ns2__updateHistory* ns2__updateHistory::soap_dup(soap*) returns deep copy of ns2__updateHistory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateHistory::soap_del() deep deletes ns2__updateHistory data members, use only after ns2__updateHistory::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateHistory::soap_type() returns SOAP_TYPE_ns2__updateHistory or derived type identifier
class ns2__updateHistory
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateHistoryResponse is a complexType.
///
/// @note class ns2__updateHistoryResponse operations:
/// - ns2__updateHistoryResponse* soap_new_ns2__updateHistoryResponse(soap*) allocate and default initialize
/// - ns2__updateHistoryResponse* soap_new_ns2__updateHistoryResponse(soap*, int num) allocate and default initialize an array
/// - ns2__updateHistoryResponse* soap_new_req_ns2__updateHistoryResponse(soap*, ...) allocate, set required members
/// - ns2__updateHistoryResponse* soap_new_set_ns2__updateHistoryResponse(soap*, ...) allocate, set all public members
/// - ns2__updateHistoryResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__updateHistoryResponse(soap*, ns2__updateHistoryResponse*) deserialize from a stream
/// - int soap_write_ns2__updateHistoryResponse(soap*, ns2__updateHistoryResponse*) serialize to a stream
/// - ns2__updateHistoryResponse* ns2__updateHistoryResponse::soap_dup(soap*) returns deep copy of ns2__updateHistoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__updateHistoryResponse::soap_del() deep deletes ns2__updateHistoryResponse data members, use only after ns2__updateHistoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__updateHistoryResponse::soap_type() returns SOAP_TYPE_ns2__updateHistoryResponse or derived type identifier
class ns2__updateHistoryResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertMessage is a complexType.
///
/// @note class ns2__InsertMessage operations:
/// - ns2__InsertMessage* soap_new_ns2__InsertMessage(soap*) allocate and default initialize
/// - ns2__InsertMessage* soap_new_ns2__InsertMessage(soap*, int num) allocate and default initialize an array
/// - ns2__InsertMessage* soap_new_req_ns2__InsertMessage(soap*, ...) allocate, set required members
/// - ns2__InsertMessage* soap_new_set_ns2__InsertMessage(soap*, ...) allocate, set all public members
/// - ns2__InsertMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InsertMessage(soap*, ns2__InsertMessage*) deserialize from a stream
/// - int soap_write_ns2__InsertMessage(soap*, ns2__InsertMessage*) serialize to a stream
/// - ns2__InsertMessage* ns2__InsertMessage::soap_dup(soap*) returns deep copy of ns2__InsertMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InsertMessage::soap_del() deep deletes ns2__InsertMessage data members, use only after ns2__InsertMessage::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__InsertMessage::soap_type() returns SOAP_TYPE_ns2__InsertMessage or derived type identifier
class ns2__InsertMessage
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":message.
    ns2__message*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertMessageResponse is a complexType.
///
/// @note class ns2__InsertMessageResponse operations:
/// - ns2__InsertMessageResponse* soap_new_ns2__InsertMessageResponse(soap*) allocate and default initialize
/// - ns2__InsertMessageResponse* soap_new_ns2__InsertMessageResponse(soap*, int num) allocate and default initialize an array
/// - ns2__InsertMessageResponse* soap_new_req_ns2__InsertMessageResponse(soap*, ...) allocate, set required members
/// - ns2__InsertMessageResponse* soap_new_set_ns2__InsertMessageResponse(soap*, ...) allocate, set all public members
/// - ns2__InsertMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InsertMessageResponse(soap*, ns2__InsertMessageResponse*) deserialize from a stream
/// - int soap_write_ns2__InsertMessageResponse(soap*, ns2__InsertMessageResponse*) serialize to a stream
/// - ns2__InsertMessageResponse* ns2__InsertMessageResponse::soap_dup(soap*) returns deep copy of ns2__InsertMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InsertMessageResponse::soap_del() deep deletes ns2__InsertMessageResponse data members, use only after ns2__InsertMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__InsertMessageResponse::soap_type() returns SOAP_TYPE_ns2__InsertMessageResponse or derived type identifier
class ns2__InsertMessageResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getShopLikeList is a complexType.
///
/// @note class ns2__getShopLikeList operations:
/// - ns2__getShopLikeList* soap_new_ns2__getShopLikeList(soap*) allocate and default initialize
/// - ns2__getShopLikeList* soap_new_ns2__getShopLikeList(soap*, int num) allocate and default initialize an array
/// - ns2__getShopLikeList* soap_new_req_ns2__getShopLikeList(soap*, ...) allocate, set required members
/// - ns2__getShopLikeList* soap_new_set_ns2__getShopLikeList(soap*, ...) allocate, set all public members
/// - ns2__getShopLikeList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getShopLikeList(soap*, ns2__getShopLikeList*) deserialize from a stream
/// - int soap_write_ns2__getShopLikeList(soap*, ns2__getShopLikeList*) serialize to a stream
/// - ns2__getShopLikeList* ns2__getShopLikeList::soap_dup(soap*) returns deep copy of ns2__getShopLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getShopLikeList::soap_del() deep deletes ns2__getShopLikeList data members, use only after ns2__getShopLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getShopLikeList::soap_type() returns SOAP_TYPE_ns2__getShopLikeList or derived type identifier
class ns2__getShopLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getShopLikeListResponse is a complexType.
///
/// @note class ns2__getShopLikeListResponse operations:
/// - ns2__getShopLikeListResponse* soap_new_ns2__getShopLikeListResponse(soap*) allocate and default initialize
/// - ns2__getShopLikeListResponse* soap_new_ns2__getShopLikeListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getShopLikeListResponse* soap_new_req_ns2__getShopLikeListResponse(soap*, ...) allocate, set required members
/// - ns2__getShopLikeListResponse* soap_new_set_ns2__getShopLikeListResponse(soap*, ...) allocate, set all public members
/// - ns2__getShopLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getShopLikeListResponse(soap*, ns2__getShopLikeListResponse*) deserialize from a stream
/// - int soap_write_ns2__getShopLikeListResponse(soap*, ns2__getShopLikeListResponse*) serialize to a stream
/// - ns2__getShopLikeListResponse* ns2__getShopLikeListResponse::soap_dup(soap*) returns deep copy of ns2__getShopLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getShopLikeListResponse::soap_del() deep deletes ns2__getShopLikeListResponse data members, use only after ns2__getShopLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getShopLikeListResponse::soap_type() returns SOAP_TYPE_ns2__getShopLikeListResponse or derived type identifier
class ns2__getShopLikeListResponse
{ public:
/// Vector of ns2__shop* of length 0..unbounded.
    std::vector<ns2__shop*             > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getMessageFromShop is a complexType.
///
/// @note class ns2__getMessageFromShop operations:
/// - ns2__getMessageFromShop* soap_new_ns2__getMessageFromShop(soap*) allocate and default initialize
/// - ns2__getMessageFromShop* soap_new_ns2__getMessageFromShop(soap*, int num) allocate and default initialize an array
/// - ns2__getMessageFromShop* soap_new_req_ns2__getMessageFromShop(soap*, ...) allocate, set required members
/// - ns2__getMessageFromShop* soap_new_set_ns2__getMessageFromShop(soap*, ...) allocate, set all public members
/// - ns2__getMessageFromShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getMessageFromShop(soap*, ns2__getMessageFromShop*) deserialize from a stream
/// - int soap_write_ns2__getMessageFromShop(soap*, ns2__getMessageFromShop*) serialize to a stream
/// - ns2__getMessageFromShop* ns2__getMessageFromShop::soap_dup(soap*) returns deep copy of ns2__getMessageFromShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getMessageFromShop::soap_del() deep deletes ns2__getMessageFromShop data members, use only after ns2__getMessageFromShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getMessageFromShop::soap_type() returns SOAP_TYPE_ns2__getMessageFromShop or derived type identifier
class ns2__getMessageFromShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    ns2__client*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getMessageFromShopResponse is a complexType.
///
/// @note class ns2__getMessageFromShopResponse operations:
/// - ns2__getMessageFromShopResponse* soap_new_ns2__getMessageFromShopResponse(soap*) allocate and default initialize
/// - ns2__getMessageFromShopResponse* soap_new_ns2__getMessageFromShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getMessageFromShopResponse* soap_new_req_ns2__getMessageFromShopResponse(soap*, ...) allocate, set required members
/// - ns2__getMessageFromShopResponse* soap_new_set_ns2__getMessageFromShopResponse(soap*, ...) allocate, set all public members
/// - ns2__getMessageFromShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getMessageFromShopResponse(soap*, ns2__getMessageFromShopResponse*) deserialize from a stream
/// - int soap_write_ns2__getMessageFromShopResponse(soap*, ns2__getMessageFromShopResponse*) serialize to a stream
/// - ns2__getMessageFromShopResponse* ns2__getMessageFromShopResponse::soap_dup(soap*) returns deep copy of ns2__getMessageFromShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getMessageFromShopResponse::soap_del() deep deletes ns2__getMessageFromShopResponse data members, use only after ns2__getMessageFromShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getMessageFromShopResponse::soap_type() returns SOAP_TYPE_ns2__getMessageFromShopResponse or derived type identifier
class ns2__getMessageFromShopResponse
{ public:
/// Vector of ns2__message* of length 0..unbounded.
    std::vector<ns2__message*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteMessageFromShop is a complexType.
///
/// @note class ns2__deleteMessageFromShop operations:
/// - ns2__deleteMessageFromShop* soap_new_ns2__deleteMessageFromShop(soap*) allocate and default initialize
/// - ns2__deleteMessageFromShop* soap_new_ns2__deleteMessageFromShop(soap*, int num) allocate and default initialize an array
/// - ns2__deleteMessageFromShop* soap_new_req_ns2__deleteMessageFromShop(soap*, ...) allocate, set required members
/// - ns2__deleteMessageFromShop* soap_new_set_ns2__deleteMessageFromShop(soap*, ...) allocate, set all public members
/// - ns2__deleteMessageFromShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteMessageFromShop(soap*, ns2__deleteMessageFromShop*) deserialize from a stream
/// - int soap_write_ns2__deleteMessageFromShop(soap*, ns2__deleteMessageFromShop*) serialize to a stream
/// - ns2__deleteMessageFromShop* ns2__deleteMessageFromShop::soap_dup(soap*) returns deep copy of ns2__deleteMessageFromShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteMessageFromShop::soap_del() deep deletes ns2__deleteMessageFromShop data members, use only after ns2__deleteMessageFromShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteMessageFromShop::soap_type() returns SOAP_TYPE_ns2__deleteMessageFromShop or derived type identifier
class ns2__deleteMessageFromShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":message.
    ns2__message*                        arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteMessageFromShopResponse is a complexType.
///
/// @note class ns2__deleteMessageFromShopResponse operations:
/// - ns2__deleteMessageFromShopResponse* soap_new_ns2__deleteMessageFromShopResponse(soap*) allocate and default initialize
/// - ns2__deleteMessageFromShopResponse* soap_new_ns2__deleteMessageFromShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteMessageFromShopResponse* soap_new_req_ns2__deleteMessageFromShopResponse(soap*, ...) allocate, set required members
/// - ns2__deleteMessageFromShopResponse* soap_new_set_ns2__deleteMessageFromShopResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteMessageFromShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteMessageFromShopResponse(soap*, ns2__deleteMessageFromShopResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteMessageFromShopResponse(soap*, ns2__deleteMessageFromShopResponse*) serialize to a stream
/// - ns2__deleteMessageFromShopResponse* ns2__deleteMessageFromShopResponse::soap_dup(soap*) returns deep copy of ns2__deleteMessageFromShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteMessageFromShopResponse::soap_del() deep deletes ns2__deleteMessageFromShopResponse data members, use only after ns2__deleteMessageFromShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteMessageFromShopResponse::soap_type() returns SOAP_TYPE_ns2__deleteMessageFromShopResponse or derived type identifier
class ns2__deleteMessageFromShopResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderLikeList is a complexType.
///
/// @note class ns2__getOrderLikeList operations:
/// - ns2__getOrderLikeList* soap_new_ns2__getOrderLikeList(soap*) allocate and default initialize
/// - ns2__getOrderLikeList* soap_new_ns2__getOrderLikeList(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderLikeList* soap_new_req_ns2__getOrderLikeList(soap*, ...) allocate, set required members
/// - ns2__getOrderLikeList* soap_new_set_ns2__getOrderLikeList(soap*, ...) allocate, set all public members
/// - ns2__getOrderLikeList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderLikeList(soap*, ns2__getOrderLikeList*) deserialize from a stream
/// - int soap_write_ns2__getOrderLikeList(soap*, ns2__getOrderLikeList*) serialize to a stream
/// - ns2__getOrderLikeList* ns2__getOrderLikeList::soap_dup(soap*) returns deep copy of ns2__getOrderLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderLikeList::soap_del() deep deletes ns2__getOrderLikeList data members, use only after ns2__getOrderLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderLikeList::soap_type() returns SOAP_TYPE_ns2__getOrderLikeList or derived type identifier
class ns2__getOrderLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderLikeListResponse is a complexType.
///
/// @note class ns2__getOrderLikeListResponse operations:
/// - ns2__getOrderLikeListResponse* soap_new_ns2__getOrderLikeListResponse(soap*) allocate and default initialize
/// - ns2__getOrderLikeListResponse* soap_new_ns2__getOrderLikeListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderLikeListResponse* soap_new_req_ns2__getOrderLikeListResponse(soap*, ...) allocate, set required members
/// - ns2__getOrderLikeListResponse* soap_new_set_ns2__getOrderLikeListResponse(soap*, ...) allocate, set all public members
/// - ns2__getOrderLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderLikeListResponse(soap*, ns2__getOrderLikeListResponse*) deserialize from a stream
/// - int soap_write_ns2__getOrderLikeListResponse(soap*, ns2__getOrderLikeListResponse*) serialize to a stream
/// - ns2__getOrderLikeListResponse* ns2__getOrderLikeListResponse::soap_dup(soap*) returns deep copy of ns2__getOrderLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderLikeListResponse::soap_del() deep deletes ns2__getOrderLikeListResponse data members, use only after ns2__getOrderLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderLikeListResponse::soap_type() returns SOAP_TYPE_ns2__getOrderLikeListResponse or derived type identifier
class ns2__getOrderLikeListResponse
{ public:
/// Vector of ns2__order* of length 0..unbounded.
    std::vector<ns2__order*            > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getUnreadMessageFromShop is a complexType.
///
/// @note class ns2__getUnreadMessageFromShop operations:
/// - ns2__getUnreadMessageFromShop* soap_new_ns2__getUnreadMessageFromShop(soap*) allocate and default initialize
/// - ns2__getUnreadMessageFromShop* soap_new_ns2__getUnreadMessageFromShop(soap*, int num) allocate and default initialize an array
/// - ns2__getUnreadMessageFromShop* soap_new_req_ns2__getUnreadMessageFromShop(soap*, ...) allocate, set required members
/// - ns2__getUnreadMessageFromShop* soap_new_set_ns2__getUnreadMessageFromShop(soap*, ...) allocate, set all public members
/// - ns2__getUnreadMessageFromShop::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getUnreadMessageFromShop(soap*, ns2__getUnreadMessageFromShop*) deserialize from a stream
/// - int soap_write_ns2__getUnreadMessageFromShop(soap*, ns2__getUnreadMessageFromShop*) serialize to a stream
/// - ns2__getUnreadMessageFromShop* ns2__getUnreadMessageFromShop::soap_dup(soap*) returns deep copy of ns2__getUnreadMessageFromShop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getUnreadMessageFromShop::soap_del() deep deletes ns2__getUnreadMessageFromShop data members, use only after ns2__getUnreadMessageFromShop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getUnreadMessageFromShop::soap_type() returns SOAP_TYPE_ns2__getUnreadMessageFromShop or derived type identifier
class ns2__getUnreadMessageFromShop
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    ns2__client*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getUnreadMessageFromShopResponse is a complexType.
///
/// @note class ns2__getUnreadMessageFromShopResponse operations:
/// - ns2__getUnreadMessageFromShopResponse* soap_new_ns2__getUnreadMessageFromShopResponse(soap*) allocate and default initialize
/// - ns2__getUnreadMessageFromShopResponse* soap_new_ns2__getUnreadMessageFromShopResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getUnreadMessageFromShopResponse* soap_new_req_ns2__getUnreadMessageFromShopResponse(soap*, ...) allocate, set required members
/// - ns2__getUnreadMessageFromShopResponse* soap_new_set_ns2__getUnreadMessageFromShopResponse(soap*, ...) allocate, set all public members
/// - ns2__getUnreadMessageFromShopResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getUnreadMessageFromShopResponse(soap*, ns2__getUnreadMessageFromShopResponse*) deserialize from a stream
/// - int soap_write_ns2__getUnreadMessageFromShopResponse(soap*, ns2__getUnreadMessageFromShopResponse*) serialize to a stream
/// - ns2__getUnreadMessageFromShopResponse* ns2__getUnreadMessageFromShopResponse::soap_dup(soap*) returns deep copy of ns2__getUnreadMessageFromShopResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getUnreadMessageFromShopResponse::soap_del() deep deletes ns2__getUnreadMessageFromShopResponse data members, use only after ns2__getUnreadMessageFromShopResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getUnreadMessageFromShopResponse::soap_type() returns SOAP_TYPE_ns2__getUnreadMessageFromShopResponse or derived type identifier
class ns2__getUnreadMessageFromShopResponse
{ public:
/// Vector of ns2__message* of length 0..unbounded.
    std::vector<ns2__message*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientLikeList is a complexType.
///
/// @note class ns2__getClientLikeList operations:
/// - ns2__getClientLikeList* soap_new_ns2__getClientLikeList(soap*) allocate and default initialize
/// - ns2__getClientLikeList* soap_new_ns2__getClientLikeList(soap*, int num) allocate and default initialize an array
/// - ns2__getClientLikeList* soap_new_req_ns2__getClientLikeList(soap*, ...) allocate, set required members
/// - ns2__getClientLikeList* soap_new_set_ns2__getClientLikeList(soap*, ...) allocate, set all public members
/// - ns2__getClientLikeList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getClientLikeList(soap*, ns2__getClientLikeList*) deserialize from a stream
/// - int soap_write_ns2__getClientLikeList(soap*, ns2__getClientLikeList*) serialize to a stream
/// - ns2__getClientLikeList* ns2__getClientLikeList::soap_dup(soap*) returns deep copy of ns2__getClientLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getClientLikeList::soap_del() deep deletes ns2__getClientLikeList data members, use only after ns2__getClientLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getClientLikeList::soap_type() returns SOAP_TYPE_ns2__getClientLikeList or derived type identifier
class ns2__getClientLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientLikeListResponse is a complexType.
///
/// @note class ns2__getClientLikeListResponse operations:
/// - ns2__getClientLikeListResponse* soap_new_ns2__getClientLikeListResponse(soap*) allocate and default initialize
/// - ns2__getClientLikeListResponse* soap_new_ns2__getClientLikeListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getClientLikeListResponse* soap_new_req_ns2__getClientLikeListResponse(soap*, ...) allocate, set required members
/// - ns2__getClientLikeListResponse* soap_new_set_ns2__getClientLikeListResponse(soap*, ...) allocate, set all public members
/// - ns2__getClientLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getClientLikeListResponse(soap*, ns2__getClientLikeListResponse*) deserialize from a stream
/// - int soap_write_ns2__getClientLikeListResponse(soap*, ns2__getClientLikeListResponse*) serialize to a stream
/// - ns2__getClientLikeListResponse* ns2__getClientLikeListResponse::soap_dup(soap*) returns deep copy of ns2__getClientLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getClientLikeListResponse::soap_del() deep deletes ns2__getClientLikeListResponse data members, use only after ns2__getClientLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getClientLikeListResponse::soap_type() returns SOAP_TYPE_ns2__getClientLikeListResponse or derived type identifier
class ns2__getClientLikeListResponse
{ public:
/// Vector of ns2__client* of length 0..unbounded.
    std::vector<ns2__client*           > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getShopList is a complexType.
///
/// @note class ns2__getShopList operations:
/// - ns2__getShopList* soap_new_ns2__getShopList(soap*) allocate and default initialize
/// - ns2__getShopList* soap_new_ns2__getShopList(soap*, int num) allocate and default initialize an array
/// - ns2__getShopList* soap_new_req_ns2__getShopList(soap*, ...) allocate, set required members
/// - ns2__getShopList* soap_new_set_ns2__getShopList(soap*, ...) allocate, set all public members
/// - ns2__getShopList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getShopList(soap*, ns2__getShopList*) deserialize from a stream
/// - int soap_write_ns2__getShopList(soap*, ns2__getShopList*) serialize to a stream
/// - ns2__getShopList* ns2__getShopList::soap_dup(soap*) returns deep copy of ns2__getShopList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getShopList::soap_del() deep deletes ns2__getShopList data members, use only after ns2__getShopList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getShopList::soap_type() returns SOAP_TYPE_ns2__getShopList or derived type identifier
class ns2__getShopList
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getShopListResponse is a complexType.
///
/// @note class ns2__getShopListResponse operations:
/// - ns2__getShopListResponse* soap_new_ns2__getShopListResponse(soap*) allocate and default initialize
/// - ns2__getShopListResponse* soap_new_ns2__getShopListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getShopListResponse* soap_new_req_ns2__getShopListResponse(soap*, ...) allocate, set required members
/// - ns2__getShopListResponse* soap_new_set_ns2__getShopListResponse(soap*, ...) allocate, set all public members
/// - ns2__getShopListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getShopListResponse(soap*, ns2__getShopListResponse*) deserialize from a stream
/// - int soap_write_ns2__getShopListResponse(soap*, ns2__getShopListResponse*) serialize to a stream
/// - ns2__getShopListResponse* ns2__getShopListResponse::soap_dup(soap*) returns deep copy of ns2__getShopListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getShopListResponse::soap_del() deep deletes ns2__getShopListResponse data members, use only after ns2__getShopListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getShopListResponse::soap_type() returns SOAP_TYPE_ns2__getShopListResponse or derived type identifier
class ns2__getShopListResponse
{ public:
/// Vector of ns2__shop* of length 0..unbounded.
    std::vector<ns2__shop*             > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListByInfo is a complexType.
///
/// @note class ns2__getOrderListByInfo operations:
/// - ns2__getOrderListByInfo* soap_new_ns2__getOrderListByInfo(soap*) allocate and default initialize
/// - ns2__getOrderListByInfo* soap_new_ns2__getOrderListByInfo(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderListByInfo* soap_new_req_ns2__getOrderListByInfo(soap*, ...) allocate, set required members
/// - ns2__getOrderListByInfo* soap_new_set_ns2__getOrderListByInfo(soap*, ...) allocate, set all public members
/// - ns2__getOrderListByInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderListByInfo(soap*, ns2__getOrderListByInfo*) deserialize from a stream
/// - int soap_write_ns2__getOrderListByInfo(soap*, ns2__getOrderListByInfo*) serialize to a stream
/// - ns2__getOrderListByInfo* ns2__getOrderListByInfo::soap_dup(soap*) returns deep copy of ns2__getOrderListByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderListByInfo::soap_del() deep deletes ns2__getOrderListByInfo data members, use only after ns2__getOrderListByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderListByInfo::soap_type() returns SOAP_TYPE_ns2__getOrderListByInfo or derived type identifier
class ns2__getOrderListByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListByInfoResponse is a complexType.
///
/// @note class ns2__getOrderListByInfoResponse operations:
/// - ns2__getOrderListByInfoResponse* soap_new_ns2__getOrderListByInfoResponse(soap*) allocate and default initialize
/// - ns2__getOrderListByInfoResponse* soap_new_ns2__getOrderListByInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getOrderListByInfoResponse* soap_new_req_ns2__getOrderListByInfoResponse(soap*, ...) allocate, set required members
/// - ns2__getOrderListByInfoResponse* soap_new_set_ns2__getOrderListByInfoResponse(soap*, ...) allocate, set all public members
/// - ns2__getOrderListByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getOrderListByInfoResponse(soap*, ns2__getOrderListByInfoResponse*) deserialize from a stream
/// - int soap_write_ns2__getOrderListByInfoResponse(soap*, ns2__getOrderListByInfoResponse*) serialize to a stream
/// - ns2__getOrderListByInfoResponse* ns2__getOrderListByInfoResponse::soap_dup(soap*) returns deep copy of ns2__getOrderListByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getOrderListByInfoResponse::soap_del() deep deletes ns2__getOrderListByInfoResponse data members, use only after ns2__getOrderListByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getOrderListByInfoResponse::soap_type() returns SOAP_TYPE_ns2__getOrderListByInfoResponse or derived type identifier
class ns2__getOrderListByInfoResponse
{ public:
/// Vector of ns2__order* of length 0..unbounded.
    std::vector<ns2__order*            > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProductType is a complexType.
///
/// @note class ns2__addProductType operations:
/// - ns2__addProductType* soap_new_ns2__addProductType(soap*) allocate and default initialize
/// - ns2__addProductType* soap_new_ns2__addProductType(soap*, int num) allocate and default initialize an array
/// - ns2__addProductType* soap_new_req_ns2__addProductType(soap*, ...) allocate, set required members
/// - ns2__addProductType* soap_new_set_ns2__addProductType(soap*, ...) allocate, set all public members
/// - ns2__addProductType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__addProductType(soap*, ns2__addProductType*) deserialize from a stream
/// - int soap_write_ns2__addProductType(soap*, ns2__addProductType*) serialize to a stream
/// - ns2__addProductType* ns2__addProductType::soap_dup(soap*) returns deep copy of ns2__addProductType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__addProductType::soap_del() deep deletes ns2__addProductType data members, use only after ns2__addProductType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__addProductType::soap_type() returns SOAP_TYPE_ns2__addProductType or derived type identifier
class ns2__addProductType
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":productType.
    ns2__productType*                    arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProductTypeResponse is a complexType.
///
/// @note class ns2__addProductTypeResponse operations:
/// - ns2__addProductTypeResponse* soap_new_ns2__addProductTypeResponse(soap*) allocate and default initialize
/// - ns2__addProductTypeResponse* soap_new_ns2__addProductTypeResponse(soap*, int num) allocate and default initialize an array
/// - ns2__addProductTypeResponse* soap_new_req_ns2__addProductTypeResponse(soap*, ...) allocate, set required members
/// - ns2__addProductTypeResponse* soap_new_set_ns2__addProductTypeResponse(soap*, ...) allocate, set all public members
/// - ns2__addProductTypeResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__addProductTypeResponse(soap*, ns2__addProductTypeResponse*) deserialize from a stream
/// - int soap_write_ns2__addProductTypeResponse(soap*, ns2__addProductTypeResponse*) serialize to a stream
/// - ns2__addProductTypeResponse* ns2__addProductTypeResponse::soap_dup(soap*) returns deep copy of ns2__addProductTypeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__addProductTypeResponse::soap_del() deep deletes ns2__addProductTypeResponse data members, use only after ns2__addProductTypeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__addProductTypeResponse::soap_type() returns SOAP_TYPE_ns2__addProductTypeResponse or derived type identifier
class ns2__addProductTypeResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteMessageFromClient is a complexType.
///
/// @note class ns2__deleteMessageFromClient operations:
/// - ns2__deleteMessageFromClient* soap_new_ns2__deleteMessageFromClient(soap*) allocate and default initialize
/// - ns2__deleteMessageFromClient* soap_new_ns2__deleteMessageFromClient(soap*, int num) allocate and default initialize an array
/// - ns2__deleteMessageFromClient* soap_new_req_ns2__deleteMessageFromClient(soap*, ...) allocate, set required members
/// - ns2__deleteMessageFromClient* soap_new_set_ns2__deleteMessageFromClient(soap*, ...) allocate, set all public members
/// - ns2__deleteMessageFromClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteMessageFromClient(soap*, ns2__deleteMessageFromClient*) deserialize from a stream
/// - int soap_write_ns2__deleteMessageFromClient(soap*, ns2__deleteMessageFromClient*) serialize to a stream
/// - ns2__deleteMessageFromClient* ns2__deleteMessageFromClient::soap_dup(soap*) returns deep copy of ns2__deleteMessageFromClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteMessageFromClient::soap_del() deep deletes ns2__deleteMessageFromClient data members, use only after ns2__deleteMessageFromClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteMessageFromClient::soap_type() returns SOAP_TYPE_ns2__deleteMessageFromClient or derived type identifier
class ns2__deleteMessageFromClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":message.
    ns2__message*                        arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteMessageFromClientResponse is a complexType.
///
/// @note class ns2__deleteMessageFromClientResponse operations:
/// - ns2__deleteMessageFromClientResponse* soap_new_ns2__deleteMessageFromClientResponse(soap*) allocate and default initialize
/// - ns2__deleteMessageFromClientResponse* soap_new_ns2__deleteMessageFromClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteMessageFromClientResponse* soap_new_req_ns2__deleteMessageFromClientResponse(soap*, ...) allocate, set required members
/// - ns2__deleteMessageFromClientResponse* soap_new_set_ns2__deleteMessageFromClientResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteMessageFromClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteMessageFromClientResponse(soap*, ns2__deleteMessageFromClientResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteMessageFromClientResponse(soap*, ns2__deleteMessageFromClientResponse*) serialize to a stream
/// - ns2__deleteMessageFromClientResponse* ns2__deleteMessageFromClientResponse::soap_dup(soap*) returns deep copy of ns2__deleteMessageFromClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteMessageFromClientResponse::soap_del() deep deletes ns2__deleteMessageFromClientResponse data members, use only after ns2__deleteMessageFromClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteMessageFromClientResponse::soap_type() returns SOAP_TYPE_ns2__deleteMessageFromClientResponse or derived type identifier
class ns2__deleteMessageFromClientResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductLikeList is a complexType.
///
/// @note class ns2__getProductLikeList operations:
/// - ns2__getProductLikeList* soap_new_ns2__getProductLikeList(soap*) allocate and default initialize
/// - ns2__getProductLikeList* soap_new_ns2__getProductLikeList(soap*, int num) allocate and default initialize an array
/// - ns2__getProductLikeList* soap_new_req_ns2__getProductLikeList(soap*, ...) allocate, set required members
/// - ns2__getProductLikeList* soap_new_set_ns2__getProductLikeList(soap*, ...) allocate, set all public members
/// - ns2__getProductLikeList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductLikeList(soap*, ns2__getProductLikeList*) deserialize from a stream
/// - int soap_write_ns2__getProductLikeList(soap*, ns2__getProductLikeList*) serialize to a stream
/// - ns2__getProductLikeList* ns2__getProductLikeList::soap_dup(soap*) returns deep copy of ns2__getProductLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductLikeList::soap_del() deep deletes ns2__getProductLikeList data members, use only after ns2__getProductLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductLikeList::soap_type() returns SOAP_TYPE_ns2__getProductLikeList or derived type identifier
class ns2__getProductLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type "http://dao.linexus.com/":product.
    ns2__product*                        arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductLikeListResponse is a complexType.
///
/// @note class ns2__getProductLikeListResponse operations:
/// - ns2__getProductLikeListResponse* soap_new_ns2__getProductLikeListResponse(soap*) allocate and default initialize
/// - ns2__getProductLikeListResponse* soap_new_ns2__getProductLikeListResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getProductLikeListResponse* soap_new_req_ns2__getProductLikeListResponse(soap*, ...) allocate, set required members
/// - ns2__getProductLikeListResponse* soap_new_set_ns2__getProductLikeListResponse(soap*, ...) allocate, set all public members
/// - ns2__getProductLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getProductLikeListResponse(soap*, ns2__getProductLikeListResponse*) deserialize from a stream
/// - int soap_write_ns2__getProductLikeListResponse(soap*, ns2__getProductLikeListResponse*) serialize to a stream
/// - ns2__getProductLikeListResponse* ns2__getProductLikeListResponse::soap_dup(soap*) returns deep copy of ns2__getProductLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getProductLikeListResponse::soap_del() deep deletes ns2__getProductLikeListResponse data members, use only after ns2__getProductLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getProductLikeListResponse::soap_type() returns SOAP_TYPE_ns2__getProductLikeListResponse or derived type identifier
class ns2__getProductLikeListResponse
{ public:
/// Vector of ns2__product* of length 0..unbounded.
    std::vector<ns2__product*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientByNameAndPwd is a complexType.
///
/// @note class ns2__getClientByNameAndPwd operations:
/// - ns2__getClientByNameAndPwd* soap_new_ns2__getClientByNameAndPwd(soap*) allocate and default initialize
/// - ns2__getClientByNameAndPwd* soap_new_ns2__getClientByNameAndPwd(soap*, int num) allocate and default initialize an array
/// - ns2__getClientByNameAndPwd* soap_new_req_ns2__getClientByNameAndPwd(soap*, ...) allocate, set required members
/// - ns2__getClientByNameAndPwd* soap_new_set_ns2__getClientByNameAndPwd(soap*, ...) allocate, set all public members
/// - ns2__getClientByNameAndPwd::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getClientByNameAndPwd(soap*, ns2__getClientByNameAndPwd*) deserialize from a stream
/// - int soap_write_ns2__getClientByNameAndPwd(soap*, ns2__getClientByNameAndPwd*) serialize to a stream
/// - ns2__getClientByNameAndPwd* ns2__getClientByNameAndPwd::soap_dup(soap*) returns deep copy of ns2__getClientByNameAndPwd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getClientByNameAndPwd::soap_del() deep deletes ns2__getClientByNameAndPwd data members, use only after ns2__getClientByNameAndPwd::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getClientByNameAndPwd::soap_type() returns SOAP_TYPE_ns2__getClientByNameAndPwd or derived type identifier
class ns2__getClientByNameAndPwd
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientByNameAndPwdResponse is a complexType.
///
/// @note class ns2__getClientByNameAndPwdResponse operations:
/// - ns2__getClientByNameAndPwdResponse* soap_new_ns2__getClientByNameAndPwdResponse(soap*) allocate and default initialize
/// - ns2__getClientByNameAndPwdResponse* soap_new_ns2__getClientByNameAndPwdResponse(soap*, int num) allocate and default initialize an array
/// - ns2__getClientByNameAndPwdResponse* soap_new_req_ns2__getClientByNameAndPwdResponse(soap*, ...) allocate, set required members
/// - ns2__getClientByNameAndPwdResponse* soap_new_set_ns2__getClientByNameAndPwdResponse(soap*, ...) allocate, set all public members
/// - ns2__getClientByNameAndPwdResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__getClientByNameAndPwdResponse(soap*, ns2__getClientByNameAndPwdResponse*) deserialize from a stream
/// - int soap_write_ns2__getClientByNameAndPwdResponse(soap*, ns2__getClientByNameAndPwdResponse*) serialize to a stream
/// - ns2__getClientByNameAndPwdResponse* ns2__getClientByNameAndPwdResponse::soap_dup(soap*) returns deep copy of ns2__getClientByNameAndPwdResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__getClientByNameAndPwdResponse::soap_del() deep deletes ns2__getClientByNameAndPwdResponse data members, use only after ns2__getClientByNameAndPwdResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__getClientByNameAndPwdResponse::soap_type() returns SOAP_TYPE_ns2__getClientByNameAndPwdResponse or derived type identifier
class ns2__getClientByNameAndPwdResponse
{ public:
/// Element "return" of type "http://dao.linexus.com/":client.
    ns2__client*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteShoppingCart is a complexType.
///
/// @note class ns2__deleteShoppingCart operations:
/// - ns2__deleteShoppingCart* soap_new_ns2__deleteShoppingCart(soap*) allocate and default initialize
/// - ns2__deleteShoppingCart* soap_new_ns2__deleteShoppingCart(soap*, int num) allocate and default initialize an array
/// - ns2__deleteShoppingCart* soap_new_req_ns2__deleteShoppingCart(soap*, ...) allocate, set required members
/// - ns2__deleteShoppingCart* soap_new_set_ns2__deleteShoppingCart(soap*, ...) allocate, set all public members
/// - ns2__deleteShoppingCart::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteShoppingCart(soap*, ns2__deleteShoppingCart*) deserialize from a stream
/// - int soap_write_ns2__deleteShoppingCart(soap*, ns2__deleteShoppingCart*) serialize to a stream
/// - ns2__deleteShoppingCart* ns2__deleteShoppingCart::soap_dup(soap*) returns deep copy of ns2__deleteShoppingCart, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteShoppingCart::soap_del() deep deletes ns2__deleteShoppingCart data members, use only after ns2__deleteShoppingCart::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteShoppingCart::soap_type() returns SOAP_TYPE_ns2__deleteShoppingCart or derived type identifier
class ns2__deleteShoppingCart
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    ns2__order*                          arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteShoppingCartResponse is a complexType.
///
/// @note class ns2__deleteShoppingCartResponse operations:
/// - ns2__deleteShoppingCartResponse* soap_new_ns2__deleteShoppingCartResponse(soap*) allocate and default initialize
/// - ns2__deleteShoppingCartResponse* soap_new_ns2__deleteShoppingCartResponse(soap*, int num) allocate and default initialize an array
/// - ns2__deleteShoppingCartResponse* soap_new_req_ns2__deleteShoppingCartResponse(soap*, ...) allocate, set required members
/// - ns2__deleteShoppingCartResponse* soap_new_set_ns2__deleteShoppingCartResponse(soap*, ...) allocate, set all public members
/// - ns2__deleteShoppingCartResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__deleteShoppingCartResponse(soap*, ns2__deleteShoppingCartResponse*) deserialize from a stream
/// - int soap_write_ns2__deleteShoppingCartResponse(soap*, ns2__deleteShoppingCartResponse*) serialize to a stream
/// - ns2__deleteShoppingCartResponse* ns2__deleteShoppingCartResponse::soap_dup(soap*) returns deep copy of ns2__deleteShoppingCartResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__deleteShoppingCartResponse::soap_del() deep deletes ns2__deleteShoppingCartResponse data members, use only after ns2__deleteShoppingCartResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__deleteShoppingCartResponse::soap_type() returns SOAP_TYPE_ns2__deleteShoppingCartResponse or derived type identifier
class ns2__deleteShoppingCartResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertClient is a complexType.
///
/// @note class ns2__InsertClient operations:
/// - ns2__InsertClient* soap_new_ns2__InsertClient(soap*) allocate and default initialize
/// - ns2__InsertClient* soap_new_ns2__InsertClient(soap*, int num) allocate and default initialize an array
/// - ns2__InsertClient* soap_new_req_ns2__InsertClient(soap*, ...) allocate, set required members
/// - ns2__InsertClient* soap_new_set_ns2__InsertClient(soap*, ...) allocate, set all public members
/// - ns2__InsertClient::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InsertClient(soap*, ns2__InsertClient*) deserialize from a stream
/// - int soap_write_ns2__InsertClient(soap*, ns2__InsertClient*) serialize to a stream
/// - ns2__InsertClient* ns2__InsertClient::soap_dup(soap*) returns deep copy of ns2__InsertClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InsertClient::soap_del() deep deletes ns2__InsertClient data members, use only after ns2__InsertClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__InsertClient::soap_type() returns SOAP_TYPE_ns2__InsertClient or derived type identifier
class ns2__InsertClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    ns2__client*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertClientResponse is a complexType.
///
/// @note class ns2__InsertClientResponse operations:
/// - ns2__InsertClientResponse* soap_new_ns2__InsertClientResponse(soap*) allocate and default initialize
/// - ns2__InsertClientResponse* soap_new_ns2__InsertClientResponse(soap*, int num) allocate and default initialize an array
/// - ns2__InsertClientResponse* soap_new_req_ns2__InsertClientResponse(soap*, ...) allocate, set required members
/// - ns2__InsertClientResponse* soap_new_set_ns2__InsertClientResponse(soap*, ...) allocate, set all public members
/// - ns2__InsertClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InsertClientResponse(soap*, ns2__InsertClientResponse*) deserialize from a stream
/// - int soap_write_ns2__InsertClientResponse(soap*, ns2__InsertClientResponse*) serialize to a stream
/// - ns2__InsertClientResponse* ns2__InsertClientResponse::soap_dup(soap*) returns deep copy of ns2__InsertClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InsertClientResponse::soap_del() deep deletes ns2__InsertClientResponse data members, use only after ns2__InsertClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__InsertClientResponse::soap_type() returns SOAP_TYPE_ns2__InsertClientResponse or derived type identifier
class ns2__InsertClientResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://dao.linexus.com/":InsertClient of type "http://dao.linexus.com/":InsertClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":InsertClientResponse of type "http://dao.linexus.com/":InsertClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":InsertMessage of type "http://dao.linexus.com/":InsertMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":InsertMessageResponse of type "http://dao.linexus.com/":InsertMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":InsertShop of type "http://dao.linexus.com/":InsertShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":InsertShopResponse of type "http://dao.linexus.com/":InsertShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addOrder of type "http://dao.linexus.com/":addOrder.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addOrderResponse of type "http://dao.linexus.com/":addOrderResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProduct of type "http://dao.linexus.com/":addProduct.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProductResponse of type "http://dao.linexus.com/":addProductResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProductType of type "http://dao.linexus.com/":addProductType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProductTypeResponse of type "http://dao.linexus.com/":addProductTypeResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteClientByNameAndPwd of type "http://dao.linexus.com/":deleteClientByNameAndPwd.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteClientByNameAndPwdResponse of type "http://dao.linexus.com/":deleteClientByNameAndPwdResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteMessageFromClient of type "http://dao.linexus.com/":deleteMessageFromClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteMessageFromClientResponse of type "http://dao.linexus.com/":deleteMessageFromClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteMessageFromShop of type "http://dao.linexus.com/":deleteMessageFromShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteMessageFromShopResponse of type "http://dao.linexus.com/":deleteMessageFromShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductByInfo of type "http://dao.linexus.com/":deleteProductByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductByInfoResponse of type "http://dao.linexus.com/":deleteProductByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductTypeByName of type "http://dao.linexus.com/":deleteProductTypeByName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductTypeByNameResponse of type "http://dao.linexus.com/":deleteProductTypeByNameResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteShopByNameAndPwd of type "http://dao.linexus.com/":deleteShopByNameAndPwd.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteShopByNameAndPwdResponse of type "http://dao.linexus.com/":deleteShopByNameAndPwdResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteShoppingCart of type "http://dao.linexus.com/":deleteShoppingCart.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteShoppingCartResponse of type "http://dao.linexus.com/":deleteShoppingCartResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientByNameAndPwd of type "http://dao.linexus.com/":getClientByNameAndPwd.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientByNameAndPwdResponse of type "http://dao.linexus.com/":getClientByNameAndPwdResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientLikeList of type "http://dao.linexus.com/":getClientLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientLikeListResponse of type "http://dao.linexus.com/":getClientLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientList of type "http://dao.linexus.com/":getClientList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientListResponse of type "http://dao.linexus.com/":getClientListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getMessageFromClient of type "http://dao.linexus.com/":getMessageFromClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getMessageFromClientResponse of type "http://dao.linexus.com/":getMessageFromClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getMessageFromShop of type "http://dao.linexus.com/":getMessageFromShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getMessageFromShopResponse of type "http://dao.linexus.com/":getMessageFromShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderLikeList of type "http://dao.linexus.com/":getOrderLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderLikeListResponse of type "http://dao.linexus.com/":getOrderLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderList of type "http://dao.linexus.com/":getOrderList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListByInfo of type "http://dao.linexus.com/":getOrderListByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListByInfoResponse of type "http://dao.linexus.com/":getOrderListByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListHistory of type "http://dao.linexus.com/":getOrderListHistory.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListHistoryResponse of type "http://dao.linexus.com/":getOrderListHistoryResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListResponse of type "http://dao.linexus.com/":getOrderListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductLikeList of type "http://dao.linexus.com/":getProductLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductLikeListResponse of type "http://dao.linexus.com/":getProductLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductList of type "http://dao.linexus.com/":getProductList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductListByInfo of type "http://dao.linexus.com/":getProductListByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductListByInfoResponse of type "http://dao.linexus.com/":getProductListByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductListResponse of type "http://dao.linexus.com/":getProductListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductTypeByProName of type "http://dao.linexus.com/":getProductTypeByProName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductTypeByProNameResponse of type "http://dao.linexus.com/":getProductTypeByProNameResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getReadMessageFromClient of type "http://dao.linexus.com/":getReadMessageFromClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getReadMessageFromClientResponse of type "http://dao.linexus.com/":getReadMessageFromClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getReadMessageFromShop of type "http://dao.linexus.com/":getReadMessageFromShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getReadMessageFromShopResponse of type "http://dao.linexus.com/":getReadMessageFromShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getShopByNameAndPwd of type "http://dao.linexus.com/":getShopByNameAndPwd.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getShopByNameAndPwdResponse of type "http://dao.linexus.com/":getShopByNameAndPwdResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getShopLikeList of type "http://dao.linexus.com/":getShopLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getShopLikeListResponse of type "http://dao.linexus.com/":getShopLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getShopList of type "http://dao.linexus.com/":getShopList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getShopListResponse of type "http://dao.linexus.com/":getShopListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getUnreadMessageFromClient of type "http://dao.linexus.com/":getUnreadMessageFromClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getUnreadMessageFromClientResponse of type "http://dao.linexus.com/":getUnreadMessageFromClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getUnreadMessageFromShop of type "http://dao.linexus.com/":getUnreadMessageFromShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getUnreadMessageFromShopResponse of type "http://dao.linexus.com/":getUnreadMessageFromShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":purchaseProduct of type "http://dao.linexus.com/":purchaseProduct.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":purchaseProductResponse of type "http://dao.linexus.com/":purchaseProductResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":selectProductForUpdate of type "http://dao.linexus.com/":selectProductForUpdate.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":selectProductForUpdateResponse of type "http://dao.linexus.com/":selectProductForUpdateResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateClient of type "http://dao.linexus.com/":updateClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateClientResponse of type "http://dao.linexus.com/":updateClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateHistory of type "http://dao.linexus.com/":updateHistory.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateHistoryResponse of type "http://dao.linexus.com/":updateHistoryResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateMessageFromClient of type "http://dao.linexus.com/":updateMessageFromClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateMessageFromClientResponse of type "http://dao.linexus.com/":updateMessageFromClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateMessageFromShop of type "http://dao.linexus.com/":updateMessageFromShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateMessageFromShopResponse of type "http://dao.linexus.com/":updateMessageFromShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateProductByInfo of type "http://dao.linexus.com/":updateProductByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateProductByInfoResponse of type "http://dao.linexus.com/":updateProductByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateShop of type "http://dao.linexus.com/":updateShop.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateShopResponse of type "http://dao.linexus.com/":updateShopResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	WholeMapperSoapBinding 
//gsoap ns1  service type:	WholeMapper 
//gsoap ns1  service port:	http://localhost:8090/WholeMapper 
//gsoap ns1  service namespace:	http://service.linexus.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WholeMapper Definitions

@section WholeMapper_bindings Service Bindings

  - @ref WholeMapperSoapBinding

@section WholeMapper_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page WholeMapperSoapBinding Binding "WholeMapperSoapBinding"

@section WholeMapperSoapBinding_operations Operations of Binding "WholeMapperSoapBinding"

  - @ref __ns1__selectProductForUpdate

  - @ref __ns1__addProduct

  - @ref __ns1__deleteProductTypeByName

  - @ref __ns1__getOrderList

  - @ref __ns1__getShopByNameAndPwd

  - @ref __ns1__updateShop

  - @ref __ns1__getProductListByInfo

  - @ref __ns1__getReadMessageFromShop

  - @ref __ns1__updateClient

  - @ref __ns1__deleteProductByInfo

  - @ref __ns1__deleteClientByNameAndPwd

  - @ref __ns1__InsertShop

  - @ref __ns1__updateMessageFromShop

  - @ref __ns1__getProductTypeByProName

  - @ref __ns1__getClientList

  - @ref __ns1__purchaseProduct

  - @ref __ns1__updateMessageFromClient

  - @ref __ns1__getUnreadMessageFromClient

  - @ref __ns1__updateProductByInfo

  - @ref __ns1__getMessageFromClient

  - @ref __ns1__addOrder

  - @ref __ns1__deleteShopByNameAndPwd

  - @ref __ns1__getProductList

  - @ref __ns1__getOrderListHistory

  - @ref __ns1__getReadMessageFromClient

  - @ref __ns1__updateHistory

  - @ref __ns1__InsertMessage

  - @ref __ns1__getShopLikeList

  - @ref __ns1__getMessageFromShop

  - @ref __ns1__deleteMessageFromShop

  - @ref __ns1__getOrderLikeList

  - @ref __ns1__getUnreadMessageFromShop

  - @ref __ns1__getClientLikeList

  - @ref __ns1__getShopList

  - @ref __ns1__getOrderListByInfo

  - @ref __ns1__addProductType

  - @ref __ns1__deleteMessageFromClient

  - @ref __ns1__getProductLikeList

  - @ref __ns1__getClientByNameAndPwd

  - @ref __ns1__deleteShoppingCart

  - @ref __ns1__InsertClient

@section WholeMapperSoapBinding_ports Default endpoints of Binding "WholeMapperSoapBinding"

  - http://localhost:8090/WholeMapper

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WholeMapperSoapBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__selectProductForUpdate                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__selectProductForUpdate" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__selectProductForUpdate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__selectProductForUpdate*        ns2__selectProductForUpdate_,
    // output parameters:
    ns2__selectProductForUpdateResponse&ns2__selectProductForUpdateResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__selectProductForUpdate(
    struct soap *soap,
    // input parameters:
    ns2__selectProductForUpdate*        ns2__selectProductForUpdate_,
    // output parameters:
    ns2__selectProductForUpdateResponse&ns2__selectProductForUpdateResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	selectProductForUpdate SOAP
//gsoap ns1  service method-style:	selectProductForUpdate document
//gsoap ns1  service method-encoding:	selectProductForUpdate literal
//gsoap ns1  service method-action:	selectProductForUpdate ""
//gsoap ns1  service method-output-action:	selectProductForUpdate Response
int __ns1__selectProductForUpdate(
    ns2__selectProductForUpdate*        ns2__selectProductForUpdate_,	///< Input parameter
    ns2__selectProductForUpdateResponse&ns2__selectProductForUpdateResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addProduct                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__addProduct" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addProduct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__addProduct*                    ns2__addProduct_,
    // output parameters:
    ns2__addProductResponse            &ns2__addProductResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addProduct(
    struct soap *soap,
    // input parameters:
    ns2__addProduct*                    ns2__addProduct_,
    // output parameters:
    ns2__addProductResponse            &ns2__addProductResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addProduct SOAP
//gsoap ns1  service method-style:	addProduct document
//gsoap ns1  service method-encoding:	addProduct literal
//gsoap ns1  service method-action:	addProduct ""
//gsoap ns1  service method-output-action:	addProduct Response
int __ns1__addProduct(
    ns2__addProduct*                    ns2__addProduct_,	///< Input parameter
    ns2__addProductResponse            &ns2__addProductResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteProductTypeByName                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteProductTypeByName" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteProductTypeByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteProductTypeByName*       ns2__deleteProductTypeByName_,
    // output parameters:
    ns2__deleteProductTypeByNameResponse&ns2__deleteProductTypeByNameResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteProductTypeByName(
    struct soap *soap,
    // input parameters:
    ns2__deleteProductTypeByName*       ns2__deleteProductTypeByName_,
    // output parameters:
    ns2__deleteProductTypeByNameResponse&ns2__deleteProductTypeByNameResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteProductTypeByName SOAP
//gsoap ns1  service method-style:	deleteProductTypeByName document
//gsoap ns1  service method-encoding:	deleteProductTypeByName literal
//gsoap ns1  service method-action:	deleteProductTypeByName ""
//gsoap ns1  service method-output-action:	deleteProductTypeByName Response
int __ns1__deleteProductTypeByName(
    ns2__deleteProductTypeByName*       ns2__deleteProductTypeByName_,	///< Input parameter
    ns2__deleteProductTypeByNameResponse&ns2__deleteProductTypeByNameResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getOrderList                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getOrderList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getOrderList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getOrderList*                  ns2__getOrderList_,
    // output parameters:
    ns2__getOrderListResponse          &ns2__getOrderListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getOrderList(
    struct soap *soap,
    // input parameters:
    ns2__getOrderList*                  ns2__getOrderList_,
    // output parameters:
    ns2__getOrderListResponse          &ns2__getOrderListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getOrderList SOAP
//gsoap ns1  service method-style:	getOrderList document
//gsoap ns1  service method-encoding:	getOrderList literal
//gsoap ns1  service method-action:	getOrderList ""
//gsoap ns1  service method-output-action:	getOrderList Response
int __ns1__getOrderList(
    ns2__getOrderList*                  ns2__getOrderList_,	///< Input parameter
    ns2__getOrderListResponse          &ns2__getOrderListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getShopByNameAndPwd                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getShopByNameAndPwd" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getShopByNameAndPwd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getShopByNameAndPwd*           ns2__getShopByNameAndPwd_,
    // output parameters:
    ns2__getShopByNameAndPwdResponse   &ns2__getShopByNameAndPwdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getShopByNameAndPwd(
    struct soap *soap,
    // input parameters:
    ns2__getShopByNameAndPwd*           ns2__getShopByNameAndPwd_,
    // output parameters:
    ns2__getShopByNameAndPwdResponse   &ns2__getShopByNameAndPwdResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getShopByNameAndPwd SOAP
//gsoap ns1  service method-style:	getShopByNameAndPwd document
//gsoap ns1  service method-encoding:	getShopByNameAndPwd literal
//gsoap ns1  service method-action:	getShopByNameAndPwd ""
//gsoap ns1  service method-output-action:	getShopByNameAndPwd Response
int __ns1__getShopByNameAndPwd(
    ns2__getShopByNameAndPwd*           ns2__getShopByNameAndPwd_,	///< Input parameter
    ns2__getShopByNameAndPwdResponse   &ns2__getShopByNameAndPwdResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateShop                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__updateShop*                    ns2__updateShop_,
    // output parameters:
    ns2__updateShopResponse            &ns2__updateShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateShop(
    struct soap *soap,
    // input parameters:
    ns2__updateShop*                    ns2__updateShop_,
    // output parameters:
    ns2__updateShopResponse            &ns2__updateShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateShop SOAP
//gsoap ns1  service method-style:	updateShop document
//gsoap ns1  service method-encoding:	updateShop literal
//gsoap ns1  service method-action:	updateShop ""
//gsoap ns1  service method-output-action:	updateShop Response
int __ns1__updateShop(
    ns2__updateShop*                    ns2__updateShop_,	///< Input parameter
    ns2__updateShopResponse            &ns2__updateShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getProductListByInfo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getProductListByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getProductListByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getProductListByInfo*          ns2__getProductListByInfo_,
    // output parameters:
    ns2__getProductListByInfoResponse  &ns2__getProductListByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getProductListByInfo(
    struct soap *soap,
    // input parameters:
    ns2__getProductListByInfo*          ns2__getProductListByInfo_,
    // output parameters:
    ns2__getProductListByInfoResponse  &ns2__getProductListByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getProductListByInfo SOAP
//gsoap ns1  service method-style:	getProductListByInfo document
//gsoap ns1  service method-encoding:	getProductListByInfo literal
//gsoap ns1  service method-action:	getProductListByInfo ""
//gsoap ns1  service method-output-action:	getProductListByInfo Response
int __ns1__getProductListByInfo(
    ns2__getProductListByInfo*          ns2__getProductListByInfo_,	///< Input parameter
    ns2__getProductListByInfoResponse  &ns2__getProductListByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getReadMessageFromShop                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getReadMessageFromShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getReadMessageFromShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getReadMessageFromShop*        ns2__getReadMessageFromShop_,
    // output parameters:
    ns2__getReadMessageFromShopResponse&ns2__getReadMessageFromShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getReadMessageFromShop(
    struct soap *soap,
    // input parameters:
    ns2__getReadMessageFromShop*        ns2__getReadMessageFromShop_,
    // output parameters:
    ns2__getReadMessageFromShopResponse&ns2__getReadMessageFromShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getReadMessageFromShop SOAP
//gsoap ns1  service method-style:	getReadMessageFromShop document
//gsoap ns1  service method-encoding:	getReadMessageFromShop literal
//gsoap ns1  service method-action:	getReadMessageFromShop ""
//gsoap ns1  service method-output-action:	getReadMessageFromShop Response
int __ns1__getReadMessageFromShop(
    ns2__getReadMessageFromShop*        ns2__getReadMessageFromShop_,	///< Input parameter
    ns2__getReadMessageFromShopResponse&ns2__getReadMessageFromShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateClient                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__updateClient*                  ns2__updateClient_,
    // output parameters:
    ns2__updateClientResponse          &ns2__updateClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateClient(
    struct soap *soap,
    // input parameters:
    ns2__updateClient*                  ns2__updateClient_,
    // output parameters:
    ns2__updateClientResponse          &ns2__updateClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateClient SOAP
//gsoap ns1  service method-style:	updateClient document
//gsoap ns1  service method-encoding:	updateClient literal
//gsoap ns1  service method-action:	updateClient ""
//gsoap ns1  service method-output-action:	updateClient Response
int __ns1__updateClient(
    ns2__updateClient*                  ns2__updateClient_,	///< Input parameter
    ns2__updateClientResponse          &ns2__updateClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteProductByInfo                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteProductByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteProductByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteProductByInfo*           ns2__deleteProductByInfo_,
    // output parameters:
    ns2__deleteProductByInfoResponse   &ns2__deleteProductByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteProductByInfo(
    struct soap *soap,
    // input parameters:
    ns2__deleteProductByInfo*           ns2__deleteProductByInfo_,
    // output parameters:
    ns2__deleteProductByInfoResponse   &ns2__deleteProductByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteProductByInfo SOAP
//gsoap ns1  service method-style:	deleteProductByInfo document
//gsoap ns1  service method-encoding:	deleteProductByInfo literal
//gsoap ns1  service method-action:	deleteProductByInfo ""
//gsoap ns1  service method-output-action:	deleteProductByInfo Response
int __ns1__deleteProductByInfo(
    ns2__deleteProductByInfo*           ns2__deleteProductByInfo_,	///< Input parameter
    ns2__deleteProductByInfoResponse   &ns2__deleteProductByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteClientByNameAndPwd                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteClientByNameAndPwd" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteClientByNameAndPwd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteClientByNameAndPwd*      ns2__deleteClientByNameAndPwd_,
    // output parameters:
    ns2__deleteClientByNameAndPwdResponse&ns2__deleteClientByNameAndPwdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteClientByNameAndPwd(
    struct soap *soap,
    // input parameters:
    ns2__deleteClientByNameAndPwd*      ns2__deleteClientByNameAndPwd_,
    // output parameters:
    ns2__deleteClientByNameAndPwdResponse&ns2__deleteClientByNameAndPwdResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteClientByNameAndPwd SOAP
//gsoap ns1  service method-style:	deleteClientByNameAndPwd document
//gsoap ns1  service method-encoding:	deleteClientByNameAndPwd literal
//gsoap ns1  service method-action:	deleteClientByNameAndPwd ""
//gsoap ns1  service method-output-action:	deleteClientByNameAndPwd Response
int __ns1__deleteClientByNameAndPwd(
    ns2__deleteClientByNameAndPwd*      ns2__deleteClientByNameAndPwd_,	///< Input parameter
    ns2__deleteClientByNameAndPwdResponse&ns2__deleteClientByNameAndPwdResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InsertShop                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__InsertShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InsertShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__InsertShop*                    ns2__InsertShop_,
    // output parameters:
    ns2__InsertShopResponse            &ns2__InsertShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InsertShop(
    struct soap *soap,
    // input parameters:
    ns2__InsertShop*                    ns2__InsertShop_,
    // output parameters:
    ns2__InsertShopResponse            &ns2__InsertShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertShop SOAP
//gsoap ns1  service method-style:	InsertShop document
//gsoap ns1  service method-encoding:	InsertShop literal
//gsoap ns1  service method-action:	InsertShop ""
//gsoap ns1  service method-output-action:	InsertShop Response
int __ns1__InsertShop(
    ns2__InsertShop*                    ns2__InsertShop_,	///< Input parameter
    ns2__InsertShopResponse            &ns2__InsertShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateMessageFromShop                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateMessageFromShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateMessageFromShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__updateMessageFromShop*         ns2__updateMessageFromShop_,
    // output parameters:
    ns2__updateMessageFromShopResponse &ns2__updateMessageFromShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateMessageFromShop(
    struct soap *soap,
    // input parameters:
    ns2__updateMessageFromShop*         ns2__updateMessageFromShop_,
    // output parameters:
    ns2__updateMessageFromShopResponse &ns2__updateMessageFromShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateMessageFromShop SOAP
//gsoap ns1  service method-style:	updateMessageFromShop document
//gsoap ns1  service method-encoding:	updateMessageFromShop literal
//gsoap ns1  service method-action:	updateMessageFromShop ""
//gsoap ns1  service method-output-action:	updateMessageFromShop Response
int __ns1__updateMessageFromShop(
    ns2__updateMessageFromShop*         ns2__updateMessageFromShop_,	///< Input parameter
    ns2__updateMessageFromShopResponse &ns2__updateMessageFromShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getProductTypeByProName                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getProductTypeByProName" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getProductTypeByProName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getProductTypeByProName*       ns2__getProductTypeByProName_,
    // output parameters:
    ns2__getProductTypeByProNameResponse&ns2__getProductTypeByProNameResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getProductTypeByProName(
    struct soap *soap,
    // input parameters:
    ns2__getProductTypeByProName*       ns2__getProductTypeByProName_,
    // output parameters:
    ns2__getProductTypeByProNameResponse&ns2__getProductTypeByProNameResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getProductTypeByProName SOAP
//gsoap ns1  service method-style:	getProductTypeByProName document
//gsoap ns1  service method-encoding:	getProductTypeByProName literal
//gsoap ns1  service method-action:	getProductTypeByProName ""
//gsoap ns1  service method-output-action:	getProductTypeByProName Response
int __ns1__getProductTypeByProName(
    ns2__getProductTypeByProName*       ns2__getProductTypeByProName_,	///< Input parameter
    ns2__getProductTypeByProNameResponse&ns2__getProductTypeByProNameResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getClientList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getClientList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getClientList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getClientList*                 ns2__getClientList_,
    // output parameters:
    ns2__getClientListResponse         &ns2__getClientListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getClientList(
    struct soap *soap,
    // input parameters:
    ns2__getClientList*                 ns2__getClientList_,
    // output parameters:
    ns2__getClientListResponse         &ns2__getClientListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getClientList SOAP
//gsoap ns1  service method-style:	getClientList document
//gsoap ns1  service method-encoding:	getClientList literal
//gsoap ns1  service method-action:	getClientList ""
//gsoap ns1  service method-output-action:	getClientList Response
int __ns1__getClientList(
    ns2__getClientList*                 ns2__getClientList_,	///< Input parameter
    ns2__getClientListResponse         &ns2__getClientListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__purchaseProduct                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__purchaseProduct" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__purchaseProduct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__purchaseProduct*               ns2__purchaseProduct_,
    // output parameters:
    ns2__purchaseProductResponse       &ns2__purchaseProductResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__purchaseProduct(
    struct soap *soap,
    // input parameters:
    ns2__purchaseProduct*               ns2__purchaseProduct_,
    // output parameters:
    ns2__purchaseProductResponse       &ns2__purchaseProductResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	purchaseProduct SOAP
//gsoap ns1  service method-style:	purchaseProduct document
//gsoap ns1  service method-encoding:	purchaseProduct literal
//gsoap ns1  service method-action:	purchaseProduct ""
//gsoap ns1  service method-output-action:	purchaseProduct Response
int __ns1__purchaseProduct(
    ns2__purchaseProduct*               ns2__purchaseProduct_,	///< Input parameter
    ns2__purchaseProductResponse       &ns2__purchaseProductResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateMessageFromClient                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateMessageFromClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateMessageFromClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__updateMessageFromClient*       ns2__updateMessageFromClient_,
    // output parameters:
    ns2__updateMessageFromClientResponse&ns2__updateMessageFromClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateMessageFromClient(
    struct soap *soap,
    // input parameters:
    ns2__updateMessageFromClient*       ns2__updateMessageFromClient_,
    // output parameters:
    ns2__updateMessageFromClientResponse&ns2__updateMessageFromClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateMessageFromClient SOAP
//gsoap ns1  service method-style:	updateMessageFromClient document
//gsoap ns1  service method-encoding:	updateMessageFromClient literal
//gsoap ns1  service method-action:	updateMessageFromClient ""
//gsoap ns1  service method-output-action:	updateMessageFromClient Response
int __ns1__updateMessageFromClient(
    ns2__updateMessageFromClient*       ns2__updateMessageFromClient_,	///< Input parameter
    ns2__updateMessageFromClientResponse&ns2__updateMessageFromClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getUnreadMessageFromClient                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getUnreadMessageFromClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getUnreadMessageFromClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getUnreadMessageFromClient*    ns2__getUnreadMessageFromClient_,
    // output parameters:
    ns2__getUnreadMessageFromClientResponse&ns2__getUnreadMessageFromClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getUnreadMessageFromClient(
    struct soap *soap,
    // input parameters:
    ns2__getUnreadMessageFromClient*    ns2__getUnreadMessageFromClient_,
    // output parameters:
    ns2__getUnreadMessageFromClientResponse&ns2__getUnreadMessageFromClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUnreadMessageFromClient SOAP
//gsoap ns1  service method-style:	getUnreadMessageFromClient document
//gsoap ns1  service method-encoding:	getUnreadMessageFromClient literal
//gsoap ns1  service method-action:	getUnreadMessageFromClient ""
//gsoap ns1  service method-output-action:	getUnreadMessageFromClient Response
int __ns1__getUnreadMessageFromClient(
    ns2__getUnreadMessageFromClient*    ns2__getUnreadMessageFromClient_,	///< Input parameter
    ns2__getUnreadMessageFromClientResponse&ns2__getUnreadMessageFromClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateProductByInfo                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateProductByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateProductByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__updateProductByInfo*           ns2__updateProductByInfo_,
    // output parameters:
    ns2__updateProductByInfoResponse   &ns2__updateProductByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateProductByInfo(
    struct soap *soap,
    // input parameters:
    ns2__updateProductByInfo*           ns2__updateProductByInfo_,
    // output parameters:
    ns2__updateProductByInfoResponse   &ns2__updateProductByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateProductByInfo SOAP
//gsoap ns1  service method-style:	updateProductByInfo document
//gsoap ns1  service method-encoding:	updateProductByInfo literal
//gsoap ns1  service method-action:	updateProductByInfo ""
//gsoap ns1  service method-output-action:	updateProductByInfo Response
int __ns1__updateProductByInfo(
    ns2__updateProductByInfo*           ns2__updateProductByInfo_,	///< Input parameter
    ns2__updateProductByInfoResponse   &ns2__updateProductByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMessageFromClient                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getMessageFromClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMessageFromClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getMessageFromClient*          ns2__getMessageFromClient_,
    // output parameters:
    ns2__getMessageFromClientResponse  &ns2__getMessageFromClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMessageFromClient(
    struct soap *soap,
    // input parameters:
    ns2__getMessageFromClient*          ns2__getMessageFromClient_,
    // output parameters:
    ns2__getMessageFromClientResponse  &ns2__getMessageFromClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getMessageFromClient SOAP
//gsoap ns1  service method-style:	getMessageFromClient document
//gsoap ns1  service method-encoding:	getMessageFromClient literal
//gsoap ns1  service method-action:	getMessageFromClient ""
//gsoap ns1  service method-output-action:	getMessageFromClient Response
int __ns1__getMessageFromClient(
    ns2__getMessageFromClient*          ns2__getMessageFromClient_,	///< Input parameter
    ns2__getMessageFromClientResponse  &ns2__getMessageFromClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addOrder                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__addOrder" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addOrder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__addOrder*                      ns2__addOrder_,
    // output parameters:
    ns2__addOrderResponse              &ns2__addOrderResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addOrder(
    struct soap *soap,
    // input parameters:
    ns2__addOrder*                      ns2__addOrder_,
    // output parameters:
    ns2__addOrderResponse              &ns2__addOrderResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addOrder SOAP
//gsoap ns1  service method-style:	addOrder document
//gsoap ns1  service method-encoding:	addOrder literal
//gsoap ns1  service method-action:	addOrder ""
//gsoap ns1  service method-output-action:	addOrder Response
int __ns1__addOrder(
    ns2__addOrder*                      ns2__addOrder_,	///< Input parameter
    ns2__addOrderResponse              &ns2__addOrderResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteShopByNameAndPwd                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteShopByNameAndPwd" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteShopByNameAndPwd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteShopByNameAndPwd*        ns2__deleteShopByNameAndPwd_,
    // output parameters:
    ns2__deleteShopByNameAndPwdResponse&ns2__deleteShopByNameAndPwdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteShopByNameAndPwd(
    struct soap *soap,
    // input parameters:
    ns2__deleteShopByNameAndPwd*        ns2__deleteShopByNameAndPwd_,
    // output parameters:
    ns2__deleteShopByNameAndPwdResponse&ns2__deleteShopByNameAndPwdResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteShopByNameAndPwd SOAP
//gsoap ns1  service method-style:	deleteShopByNameAndPwd document
//gsoap ns1  service method-encoding:	deleteShopByNameAndPwd literal
//gsoap ns1  service method-action:	deleteShopByNameAndPwd ""
//gsoap ns1  service method-output-action:	deleteShopByNameAndPwd Response
int __ns1__deleteShopByNameAndPwd(
    ns2__deleteShopByNameAndPwd*        ns2__deleteShopByNameAndPwd_,	///< Input parameter
    ns2__deleteShopByNameAndPwdResponse&ns2__deleteShopByNameAndPwdResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getProductList                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getProductList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getProductList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getProductList*                ns2__getProductList_,
    // output parameters:
    ns2__getProductListResponse        &ns2__getProductListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getProductList(
    struct soap *soap,
    // input parameters:
    ns2__getProductList*                ns2__getProductList_,
    // output parameters:
    ns2__getProductListResponse        &ns2__getProductListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getProductList SOAP
//gsoap ns1  service method-style:	getProductList document
//gsoap ns1  service method-encoding:	getProductList literal
//gsoap ns1  service method-action:	getProductList ""
//gsoap ns1  service method-output-action:	getProductList Response
int __ns1__getProductList(
    ns2__getProductList*                ns2__getProductList_,	///< Input parameter
    ns2__getProductListResponse        &ns2__getProductListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getOrderListHistory                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getOrderListHistory" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getOrderListHistory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getOrderListHistory*           ns2__getOrderListHistory_,
    // output parameters:
    ns2__getOrderListHistoryResponse   &ns2__getOrderListHistoryResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getOrderListHistory(
    struct soap *soap,
    // input parameters:
    ns2__getOrderListHistory*           ns2__getOrderListHistory_,
    // output parameters:
    ns2__getOrderListHistoryResponse   &ns2__getOrderListHistoryResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getOrderListHistory SOAP
//gsoap ns1  service method-style:	getOrderListHistory document
//gsoap ns1  service method-encoding:	getOrderListHistory literal
//gsoap ns1  service method-action:	getOrderListHistory ""
//gsoap ns1  service method-output-action:	getOrderListHistory Response
int __ns1__getOrderListHistory(
    ns2__getOrderListHistory*           ns2__getOrderListHistory_,	///< Input parameter
    ns2__getOrderListHistoryResponse   &ns2__getOrderListHistoryResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getReadMessageFromClient                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getReadMessageFromClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getReadMessageFromClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getReadMessageFromClient*      ns2__getReadMessageFromClient_,
    // output parameters:
    ns2__getReadMessageFromClientResponse&ns2__getReadMessageFromClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getReadMessageFromClient(
    struct soap *soap,
    // input parameters:
    ns2__getReadMessageFromClient*      ns2__getReadMessageFromClient_,
    // output parameters:
    ns2__getReadMessageFromClientResponse&ns2__getReadMessageFromClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getReadMessageFromClient SOAP
//gsoap ns1  service method-style:	getReadMessageFromClient document
//gsoap ns1  service method-encoding:	getReadMessageFromClient literal
//gsoap ns1  service method-action:	getReadMessageFromClient ""
//gsoap ns1  service method-output-action:	getReadMessageFromClient Response
int __ns1__getReadMessageFromClient(
    ns2__getReadMessageFromClient*      ns2__getReadMessageFromClient_,	///< Input parameter
    ns2__getReadMessageFromClientResponse&ns2__getReadMessageFromClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateHistory                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__updateHistory" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateHistory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__updateHistory*                 ns2__updateHistory_,
    // output parameters:
    ns2__updateHistoryResponse         &ns2__updateHistoryResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateHistory(
    struct soap *soap,
    // input parameters:
    ns2__updateHistory*                 ns2__updateHistory_,
    // output parameters:
    ns2__updateHistoryResponse         &ns2__updateHistoryResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	updateHistory SOAP
//gsoap ns1  service method-style:	updateHistory document
//gsoap ns1  service method-encoding:	updateHistory literal
//gsoap ns1  service method-action:	updateHistory ""
//gsoap ns1  service method-output-action:	updateHistory Response
int __ns1__updateHistory(
    ns2__updateHistory*                 ns2__updateHistory_,	///< Input parameter
    ns2__updateHistoryResponse         &ns2__updateHistoryResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InsertMessage                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__InsertMessage" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InsertMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__InsertMessage*                 ns2__InsertMessage_,
    // output parameters:
    ns2__InsertMessageResponse         &ns2__InsertMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InsertMessage(
    struct soap *soap,
    // input parameters:
    ns2__InsertMessage*                 ns2__InsertMessage_,
    // output parameters:
    ns2__InsertMessageResponse         &ns2__InsertMessageResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertMessage SOAP
//gsoap ns1  service method-style:	InsertMessage document
//gsoap ns1  service method-encoding:	InsertMessage literal
//gsoap ns1  service method-action:	InsertMessage ""
//gsoap ns1  service method-output-action:	InsertMessage Response
int __ns1__InsertMessage(
    ns2__InsertMessage*                 ns2__InsertMessage_,	///< Input parameter
    ns2__InsertMessageResponse         &ns2__InsertMessageResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getShopLikeList                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getShopLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getShopLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getShopLikeList*               ns2__getShopLikeList_,
    // output parameters:
    ns2__getShopLikeListResponse       &ns2__getShopLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getShopLikeList(
    struct soap *soap,
    // input parameters:
    ns2__getShopLikeList*               ns2__getShopLikeList_,
    // output parameters:
    ns2__getShopLikeListResponse       &ns2__getShopLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getShopLikeList SOAP
//gsoap ns1  service method-style:	getShopLikeList document
//gsoap ns1  service method-encoding:	getShopLikeList literal
//gsoap ns1  service method-action:	getShopLikeList ""
//gsoap ns1  service method-output-action:	getShopLikeList Response
int __ns1__getShopLikeList(
    ns2__getShopLikeList*               ns2__getShopLikeList_,	///< Input parameter
    ns2__getShopLikeListResponse       &ns2__getShopLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMessageFromShop                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getMessageFromShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMessageFromShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getMessageFromShop*            ns2__getMessageFromShop_,
    // output parameters:
    ns2__getMessageFromShopResponse    &ns2__getMessageFromShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMessageFromShop(
    struct soap *soap,
    // input parameters:
    ns2__getMessageFromShop*            ns2__getMessageFromShop_,
    // output parameters:
    ns2__getMessageFromShopResponse    &ns2__getMessageFromShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getMessageFromShop SOAP
//gsoap ns1  service method-style:	getMessageFromShop document
//gsoap ns1  service method-encoding:	getMessageFromShop literal
//gsoap ns1  service method-action:	getMessageFromShop ""
//gsoap ns1  service method-output-action:	getMessageFromShop Response
int __ns1__getMessageFromShop(
    ns2__getMessageFromShop*            ns2__getMessageFromShop_,	///< Input parameter
    ns2__getMessageFromShopResponse    &ns2__getMessageFromShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteMessageFromShop                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteMessageFromShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteMessageFromShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteMessageFromShop*         ns2__deleteMessageFromShop_,
    // output parameters:
    ns2__deleteMessageFromShopResponse &ns2__deleteMessageFromShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteMessageFromShop(
    struct soap *soap,
    // input parameters:
    ns2__deleteMessageFromShop*         ns2__deleteMessageFromShop_,
    // output parameters:
    ns2__deleteMessageFromShopResponse &ns2__deleteMessageFromShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteMessageFromShop SOAP
//gsoap ns1  service method-style:	deleteMessageFromShop document
//gsoap ns1  service method-encoding:	deleteMessageFromShop literal
//gsoap ns1  service method-action:	deleteMessageFromShop ""
//gsoap ns1  service method-output-action:	deleteMessageFromShop Response
int __ns1__deleteMessageFromShop(
    ns2__deleteMessageFromShop*         ns2__deleteMessageFromShop_,	///< Input parameter
    ns2__deleteMessageFromShopResponse &ns2__deleteMessageFromShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getOrderLikeList                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getOrderLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getOrderLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getOrderLikeList*              ns2__getOrderLikeList_,
    // output parameters:
    ns2__getOrderLikeListResponse      &ns2__getOrderLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getOrderLikeList(
    struct soap *soap,
    // input parameters:
    ns2__getOrderLikeList*              ns2__getOrderLikeList_,
    // output parameters:
    ns2__getOrderLikeListResponse      &ns2__getOrderLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getOrderLikeList SOAP
//gsoap ns1  service method-style:	getOrderLikeList document
//gsoap ns1  service method-encoding:	getOrderLikeList literal
//gsoap ns1  service method-action:	getOrderLikeList ""
//gsoap ns1  service method-output-action:	getOrderLikeList Response
int __ns1__getOrderLikeList(
    ns2__getOrderLikeList*              ns2__getOrderLikeList_,	///< Input parameter
    ns2__getOrderLikeListResponse      &ns2__getOrderLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getUnreadMessageFromShop                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getUnreadMessageFromShop" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getUnreadMessageFromShop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getUnreadMessageFromShop*      ns2__getUnreadMessageFromShop_,
    // output parameters:
    ns2__getUnreadMessageFromShopResponse&ns2__getUnreadMessageFromShopResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getUnreadMessageFromShop(
    struct soap *soap,
    // input parameters:
    ns2__getUnreadMessageFromShop*      ns2__getUnreadMessageFromShop_,
    // output parameters:
    ns2__getUnreadMessageFromShopResponse&ns2__getUnreadMessageFromShopResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUnreadMessageFromShop SOAP
//gsoap ns1  service method-style:	getUnreadMessageFromShop document
//gsoap ns1  service method-encoding:	getUnreadMessageFromShop literal
//gsoap ns1  service method-action:	getUnreadMessageFromShop ""
//gsoap ns1  service method-output-action:	getUnreadMessageFromShop Response
int __ns1__getUnreadMessageFromShop(
    ns2__getUnreadMessageFromShop*      ns2__getUnreadMessageFromShop_,	///< Input parameter
    ns2__getUnreadMessageFromShopResponse&ns2__getUnreadMessageFromShopResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getClientLikeList                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getClientLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getClientLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getClientLikeList*             ns2__getClientLikeList_,
    // output parameters:
    ns2__getClientLikeListResponse     &ns2__getClientLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getClientLikeList(
    struct soap *soap,
    // input parameters:
    ns2__getClientLikeList*             ns2__getClientLikeList_,
    // output parameters:
    ns2__getClientLikeListResponse     &ns2__getClientLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getClientLikeList SOAP
//gsoap ns1  service method-style:	getClientLikeList document
//gsoap ns1  service method-encoding:	getClientLikeList literal
//gsoap ns1  service method-action:	getClientLikeList ""
//gsoap ns1  service method-output-action:	getClientLikeList Response
int __ns1__getClientLikeList(
    ns2__getClientLikeList*             ns2__getClientLikeList_,	///< Input parameter
    ns2__getClientLikeListResponse     &ns2__getClientLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getShopList                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getShopList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getShopList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getShopList*                   ns2__getShopList_,
    // output parameters:
    ns2__getShopListResponse           &ns2__getShopListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getShopList(
    struct soap *soap,
    // input parameters:
    ns2__getShopList*                   ns2__getShopList_,
    // output parameters:
    ns2__getShopListResponse           &ns2__getShopListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getShopList SOAP
//gsoap ns1  service method-style:	getShopList document
//gsoap ns1  service method-encoding:	getShopList literal
//gsoap ns1  service method-action:	getShopList ""
//gsoap ns1  service method-output-action:	getShopList Response
int __ns1__getShopList(
    ns2__getShopList*                   ns2__getShopList_,	///< Input parameter
    ns2__getShopListResponse           &ns2__getShopListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getOrderListByInfo                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getOrderListByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getOrderListByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getOrderListByInfo*            ns2__getOrderListByInfo_,
    // output parameters:
    ns2__getOrderListByInfoResponse    &ns2__getOrderListByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getOrderListByInfo(
    struct soap *soap,
    // input parameters:
    ns2__getOrderListByInfo*            ns2__getOrderListByInfo_,
    // output parameters:
    ns2__getOrderListByInfoResponse    &ns2__getOrderListByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getOrderListByInfo SOAP
//gsoap ns1  service method-style:	getOrderListByInfo document
//gsoap ns1  service method-encoding:	getOrderListByInfo literal
//gsoap ns1  service method-action:	getOrderListByInfo ""
//gsoap ns1  service method-output-action:	getOrderListByInfo Response
int __ns1__getOrderListByInfo(
    ns2__getOrderListByInfo*            ns2__getOrderListByInfo_,	///< Input parameter
    ns2__getOrderListByInfoResponse    &ns2__getOrderListByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addProductType                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__addProductType" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addProductType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__addProductType*                ns2__addProductType_,
    // output parameters:
    ns2__addProductTypeResponse        &ns2__addProductTypeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addProductType(
    struct soap *soap,
    // input parameters:
    ns2__addProductType*                ns2__addProductType_,
    // output parameters:
    ns2__addProductTypeResponse        &ns2__addProductTypeResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addProductType SOAP
//gsoap ns1  service method-style:	addProductType document
//gsoap ns1  service method-encoding:	addProductType literal
//gsoap ns1  service method-action:	addProductType ""
//gsoap ns1  service method-output-action:	addProductType Response
int __ns1__addProductType(
    ns2__addProductType*                ns2__addProductType_,	///< Input parameter
    ns2__addProductTypeResponse        &ns2__addProductTypeResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteMessageFromClient                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteMessageFromClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteMessageFromClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteMessageFromClient*       ns2__deleteMessageFromClient_,
    // output parameters:
    ns2__deleteMessageFromClientResponse&ns2__deleteMessageFromClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteMessageFromClient(
    struct soap *soap,
    // input parameters:
    ns2__deleteMessageFromClient*       ns2__deleteMessageFromClient_,
    // output parameters:
    ns2__deleteMessageFromClientResponse&ns2__deleteMessageFromClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteMessageFromClient SOAP
//gsoap ns1  service method-style:	deleteMessageFromClient document
//gsoap ns1  service method-encoding:	deleteMessageFromClient literal
//gsoap ns1  service method-action:	deleteMessageFromClient ""
//gsoap ns1  service method-output-action:	deleteMessageFromClient Response
int __ns1__deleteMessageFromClient(
    ns2__deleteMessageFromClient*       ns2__deleteMessageFromClient_,	///< Input parameter
    ns2__deleteMessageFromClientResponse&ns2__deleteMessageFromClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getProductLikeList                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getProductLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getProductLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getProductLikeList*            ns2__getProductLikeList_,
    // output parameters:
    ns2__getProductLikeListResponse    &ns2__getProductLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getProductLikeList(
    struct soap *soap,
    // input parameters:
    ns2__getProductLikeList*            ns2__getProductLikeList_,
    // output parameters:
    ns2__getProductLikeListResponse    &ns2__getProductLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getProductLikeList SOAP
//gsoap ns1  service method-style:	getProductLikeList document
//gsoap ns1  service method-encoding:	getProductLikeList literal
//gsoap ns1  service method-action:	getProductLikeList ""
//gsoap ns1  service method-output-action:	getProductLikeList Response
int __ns1__getProductLikeList(
    ns2__getProductLikeList*            ns2__getProductLikeList_,	///< Input parameter
    ns2__getProductLikeListResponse    &ns2__getProductLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getClientByNameAndPwd                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getClientByNameAndPwd" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getClientByNameAndPwd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__getClientByNameAndPwd*         ns2__getClientByNameAndPwd_,
    // output parameters:
    ns2__getClientByNameAndPwdResponse &ns2__getClientByNameAndPwdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getClientByNameAndPwd(
    struct soap *soap,
    // input parameters:
    ns2__getClientByNameAndPwd*         ns2__getClientByNameAndPwd_,
    // output parameters:
    ns2__getClientByNameAndPwdResponse &ns2__getClientByNameAndPwdResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getClientByNameAndPwd SOAP
//gsoap ns1  service method-style:	getClientByNameAndPwd document
//gsoap ns1  service method-encoding:	getClientByNameAndPwd literal
//gsoap ns1  service method-action:	getClientByNameAndPwd ""
//gsoap ns1  service method-output-action:	getClientByNameAndPwd Response
int __ns1__getClientByNameAndPwd(
    ns2__getClientByNameAndPwd*         ns2__getClientByNameAndPwd_,	///< Input parameter
    ns2__getClientByNameAndPwdResponse &ns2__getClientByNameAndPwdResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteShoppingCart                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deleteShoppingCart" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteShoppingCart(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__deleteShoppingCart*            ns2__deleteShoppingCart_,
    // output parameters:
    ns2__deleteShoppingCartResponse    &ns2__deleteShoppingCartResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteShoppingCart(
    struct soap *soap,
    // input parameters:
    ns2__deleteShoppingCart*            ns2__deleteShoppingCart_,
    // output parameters:
    ns2__deleteShoppingCartResponse    &ns2__deleteShoppingCartResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteShoppingCart SOAP
//gsoap ns1  service method-style:	deleteShoppingCart document
//gsoap ns1  service method-encoding:	deleteShoppingCart literal
//gsoap ns1  service method-action:	deleteShoppingCart ""
//gsoap ns1  service method-output-action:	deleteShoppingCart Response
int __ns1__deleteShoppingCart(
    ns2__deleteShoppingCart*            ns2__deleteShoppingCart_,	///< Input parameter
    ns2__deleteShoppingCartResponse    &ns2__deleteShoppingCartResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InsertClient                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__InsertClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InsertClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__InsertClient*                  ns2__InsertClient_,
    // output parameters:
    ns2__InsertClientResponse          &ns2__InsertClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InsertClient(
    struct soap *soap,
    // input parameters:
    ns2__InsertClient*                  ns2__InsertClient_,
    // output parameters:
    ns2__InsertClientResponse          &ns2__InsertClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertClient SOAP
//gsoap ns1  service method-style:	InsertClient document
//gsoap ns1  service method-encoding:	InsertClient literal
//gsoap ns1  service method-action:	InsertClient ""
//gsoap ns1  service method-output-action:	InsertClient Response
int __ns1__InsertClient(
    ns2__InsertClient*                  ns2__InsertClient_,	///< Input parameter
    ns2__InsertClientResponse          &ns2__InsertClientResponse_	///< Output parameter
);

/** @page WholeMapperSoapBinding Binding "WholeMapperSoapBinding"

@section WholeMapperSoapBinding_policy_enablers Policy Enablers of Binding "WholeMapperSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns2 Top-level root elements of schema "http://dao.linexus.com/"

  - <ns2:InsertClient> (use wsdl2h option -g to auto-generate type _ns2__InsertClient)

  - <ns2:InsertClientResponse> (use wsdl2h option -g to auto-generate type _ns2__InsertClientResponse)

  - <ns2:InsertMessage> (use wsdl2h option -g to auto-generate type _ns2__InsertMessage)

  - <ns2:InsertMessageResponse> (use wsdl2h option -g to auto-generate type _ns2__InsertMessageResponse)

  - <ns2:InsertShop> (use wsdl2h option -g to auto-generate type _ns2__InsertShop)

  - <ns2:InsertShopResponse> (use wsdl2h option -g to auto-generate type _ns2__InsertShopResponse)

  - <ns2:addOrder> (use wsdl2h option -g to auto-generate type _ns2__addOrder)

  - <ns2:addOrderResponse> (use wsdl2h option -g to auto-generate type _ns2__addOrderResponse)

  - <ns2:addProduct> (use wsdl2h option -g to auto-generate type _ns2__addProduct)

  - <ns2:addProductResponse> (use wsdl2h option -g to auto-generate type _ns2__addProductResponse)

  - <ns2:addProductType> (use wsdl2h option -g to auto-generate type _ns2__addProductType)

  - <ns2:addProductTypeResponse> (use wsdl2h option -g to auto-generate type _ns2__addProductTypeResponse)

  - <ns2:deleteClientByNameAndPwd> (use wsdl2h option -g to auto-generate type _ns2__deleteClientByNameAndPwd)

  - <ns2:deleteClientByNameAndPwdResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteClientByNameAndPwdResponse)

  - <ns2:deleteMessageFromClient> (use wsdl2h option -g to auto-generate type _ns2__deleteMessageFromClient)

  - <ns2:deleteMessageFromClientResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteMessageFromClientResponse)

  - <ns2:deleteMessageFromShop> (use wsdl2h option -g to auto-generate type _ns2__deleteMessageFromShop)

  - <ns2:deleteMessageFromShopResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteMessageFromShopResponse)

  - <ns2:deleteProductByInfo> (use wsdl2h option -g to auto-generate type _ns2__deleteProductByInfo)

  - <ns2:deleteProductByInfoResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteProductByInfoResponse)

  - <ns2:deleteProductTypeByName> (use wsdl2h option -g to auto-generate type _ns2__deleteProductTypeByName)

  - <ns2:deleteProductTypeByNameResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteProductTypeByNameResponse)

  - <ns2:deleteShopByNameAndPwd> (use wsdl2h option -g to auto-generate type _ns2__deleteShopByNameAndPwd)

  - <ns2:deleteShopByNameAndPwdResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteShopByNameAndPwdResponse)

  - <ns2:deleteShoppingCart> (use wsdl2h option -g to auto-generate type _ns2__deleteShoppingCart)

  - <ns2:deleteShoppingCartResponse> (use wsdl2h option -g to auto-generate type _ns2__deleteShoppingCartResponse)

  - <ns2:getClientByNameAndPwd> (use wsdl2h option -g to auto-generate type _ns2__getClientByNameAndPwd)

  - <ns2:getClientByNameAndPwdResponse> (use wsdl2h option -g to auto-generate type _ns2__getClientByNameAndPwdResponse)

  - <ns2:getClientLikeList> (use wsdl2h option -g to auto-generate type _ns2__getClientLikeList)

  - <ns2:getClientLikeListResponse> (use wsdl2h option -g to auto-generate type _ns2__getClientLikeListResponse)

  - <ns2:getClientList> (use wsdl2h option -g to auto-generate type _ns2__getClientList)

  - <ns2:getClientListResponse> (use wsdl2h option -g to auto-generate type _ns2__getClientListResponse)

  - <ns2:getMessageFromClient> (use wsdl2h option -g to auto-generate type _ns2__getMessageFromClient)

  - <ns2:getMessageFromClientResponse> (use wsdl2h option -g to auto-generate type _ns2__getMessageFromClientResponse)

  - <ns2:getMessageFromShop> (use wsdl2h option -g to auto-generate type _ns2__getMessageFromShop)

  - <ns2:getMessageFromShopResponse> (use wsdl2h option -g to auto-generate type _ns2__getMessageFromShopResponse)

  - <ns2:getOrderLikeList> (use wsdl2h option -g to auto-generate type _ns2__getOrderLikeList)

  - <ns2:getOrderLikeListResponse> (use wsdl2h option -g to auto-generate type _ns2__getOrderLikeListResponse)

  - <ns2:getOrderList> (use wsdl2h option -g to auto-generate type _ns2__getOrderList)

  - <ns2:getOrderListByInfo> (use wsdl2h option -g to auto-generate type _ns2__getOrderListByInfo)

  - <ns2:getOrderListByInfoResponse> (use wsdl2h option -g to auto-generate type _ns2__getOrderListByInfoResponse)

  - <ns2:getOrderListHistory> (use wsdl2h option -g to auto-generate type _ns2__getOrderListHistory)

  - <ns2:getOrderListHistoryResponse> (use wsdl2h option -g to auto-generate type _ns2__getOrderListHistoryResponse)

  - <ns2:getOrderListResponse> (use wsdl2h option -g to auto-generate type _ns2__getOrderListResponse)

  - <ns2:getProductLikeList> (use wsdl2h option -g to auto-generate type _ns2__getProductLikeList)

  - <ns2:getProductLikeListResponse> (use wsdl2h option -g to auto-generate type _ns2__getProductLikeListResponse)

  - <ns2:getProductList> (use wsdl2h option -g to auto-generate type _ns2__getProductList)

  - <ns2:getProductListByInfo> (use wsdl2h option -g to auto-generate type _ns2__getProductListByInfo)

  - <ns2:getProductListByInfoResponse> (use wsdl2h option -g to auto-generate type _ns2__getProductListByInfoResponse)

  - <ns2:getProductListResponse> (use wsdl2h option -g to auto-generate type _ns2__getProductListResponse)

  - <ns2:getProductTypeByProName> (use wsdl2h option -g to auto-generate type _ns2__getProductTypeByProName)

  - <ns2:getProductTypeByProNameResponse> (use wsdl2h option -g to auto-generate type _ns2__getProductTypeByProNameResponse)

  - <ns2:getReadMessageFromClient> (use wsdl2h option -g to auto-generate type _ns2__getReadMessageFromClient)

  - <ns2:getReadMessageFromClientResponse> (use wsdl2h option -g to auto-generate type _ns2__getReadMessageFromClientResponse)

  - <ns2:getReadMessageFromShop> (use wsdl2h option -g to auto-generate type _ns2__getReadMessageFromShop)

  - <ns2:getReadMessageFromShopResponse> (use wsdl2h option -g to auto-generate type _ns2__getReadMessageFromShopResponse)

  - <ns2:getShopByNameAndPwd> (use wsdl2h option -g to auto-generate type _ns2__getShopByNameAndPwd)

  - <ns2:getShopByNameAndPwdResponse> (use wsdl2h option -g to auto-generate type _ns2__getShopByNameAndPwdResponse)

  - <ns2:getShopLikeList> (use wsdl2h option -g to auto-generate type _ns2__getShopLikeList)

  - <ns2:getShopLikeListResponse> (use wsdl2h option -g to auto-generate type _ns2__getShopLikeListResponse)

  - <ns2:getShopList> (use wsdl2h option -g to auto-generate type _ns2__getShopList)

  - <ns2:getShopListResponse> (use wsdl2h option -g to auto-generate type _ns2__getShopListResponse)

  - <ns2:getUnreadMessageFromClient> (use wsdl2h option -g to auto-generate type _ns2__getUnreadMessageFromClient)

  - <ns2:getUnreadMessageFromClientResponse> (use wsdl2h option -g to auto-generate type _ns2__getUnreadMessageFromClientResponse)

  - <ns2:getUnreadMessageFromShop> (use wsdl2h option -g to auto-generate type _ns2__getUnreadMessageFromShop)

  - <ns2:getUnreadMessageFromShopResponse> (use wsdl2h option -g to auto-generate type _ns2__getUnreadMessageFromShopResponse)

  - <ns2:purchaseProduct> (use wsdl2h option -g to auto-generate type _ns2__purchaseProduct)

  - <ns2:purchaseProductResponse> (use wsdl2h option -g to auto-generate type _ns2__purchaseProductResponse)

  - <ns2:selectProductForUpdate> (use wsdl2h option -g to auto-generate type _ns2__selectProductForUpdate)

  - <ns2:selectProductForUpdateResponse> (use wsdl2h option -g to auto-generate type _ns2__selectProductForUpdateResponse)

  - <ns2:updateClient> (use wsdl2h option -g to auto-generate type _ns2__updateClient)

  - <ns2:updateClientResponse> (use wsdl2h option -g to auto-generate type _ns2__updateClientResponse)

  - <ns2:updateHistory> (use wsdl2h option -g to auto-generate type _ns2__updateHistory)

  - <ns2:updateHistoryResponse> (use wsdl2h option -g to auto-generate type _ns2__updateHistoryResponse)

  - <ns2:updateMessageFromClient> (use wsdl2h option -g to auto-generate type _ns2__updateMessageFromClient)

  - <ns2:updateMessageFromClientResponse> (use wsdl2h option -g to auto-generate type _ns2__updateMessageFromClientResponse)

  - <ns2:updateMessageFromShop> (use wsdl2h option -g to auto-generate type _ns2__updateMessageFromShop)

  - <ns2:updateMessageFromShopResponse> (use wsdl2h option -g to auto-generate type _ns2__updateMessageFromShopResponse)

  - <ns2:updateProductByInfo> (use wsdl2h option -g to auto-generate type _ns2__updateProductByInfo)

  - <ns2:updateProductByInfoResponse> (use wsdl2h option -g to auto-generate type _ns2__updateProductByInfoResponse)

  - <ns2:updateShop> (use wsdl2h option -g to auto-generate type _ns2__updateShop)

  - <ns2:updateShopResponse> (use wsdl2h option -g to auto-generate type _ns2__updateShopResponse)

*/

/* End of soap_head.h */
