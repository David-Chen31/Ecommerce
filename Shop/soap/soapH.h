/* soapH.h
   Generated by gSOAP 2.8.135 for soap_head.h

gSOAP XML Web services tools
Copyright (C) 2000,2024, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InsertClientResponse_DEFINED
#define SOAP_TYPE_ns2__InsertClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InsertClientResponse(struct soap*, const char*, int, const ns2__InsertClientResponse *, const char*);
SOAP_FMAC3 ns2__InsertClientResponse * SOAP_FMAC4 soap_in_ns2__InsertClientResponse(struct soap*, const char*, ns2__InsertClientResponse *, const char*);
SOAP_FMAC1 ns2__InsertClientResponse * SOAP_FMAC2 soap_instantiate_ns2__InsertClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InsertClientResponse * soap_new_ns2__InsertClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InsertClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__InsertClientResponse * soap_new_req_ns2__InsertClientResponse(
	struct soap *soap)
{
	ns2__InsertClientResponse *_p = ::soap_new_ns2__InsertClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InsertClientResponse * soap_new_set_ns2__InsertClientResponse(
	struct soap *soap)
{
	ns2__InsertClientResponse *_p = ::soap_new_ns2__InsertClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__InsertClientResponse(struct soap *soap, ns2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClientResponse", p->soap_type() == SOAP_TYPE_ns2__InsertClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InsertClientResponse(struct soap *soap, const char *URL, ns2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClientResponse", p->soap_type() == SOAP_TYPE_ns2__InsertClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InsertClientResponse(struct soap *soap, const char *URL, ns2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClientResponse", p->soap_type() == SOAP_TYPE_ns2__InsertClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InsertClientResponse(struct soap *soap, const char *URL, ns2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClientResponse", p->soap_type() == SOAP_TYPE_ns2__InsertClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InsertClientResponse * SOAP_FMAC4 soap_get_ns2__InsertClientResponse(struct soap*, ns2__InsertClientResponse *, const char*, const char*);

inline int soap_read_ns2__InsertClientResponse(struct soap *soap, ns2__InsertClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InsertClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InsertClientResponse(struct soap *soap, const char *URL, ns2__InsertClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InsertClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InsertClientResponse(struct soap *soap, ns2__InsertClientResponse *p)
{
	if (::soap_read_ns2__InsertClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InsertClient_DEFINED
#define SOAP_TYPE_ns2__InsertClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InsertClient(struct soap*, const char*, int, const ns2__InsertClient *, const char*);
SOAP_FMAC3 ns2__InsertClient * SOAP_FMAC4 soap_in_ns2__InsertClient(struct soap*, const char*, ns2__InsertClient *, const char*);
SOAP_FMAC1 ns2__InsertClient * SOAP_FMAC2 soap_instantiate_ns2__InsertClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InsertClient * soap_new_ns2__InsertClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InsertClient(soap, n, NULL, NULL, NULL);
}

inline ns2__InsertClient * soap_new_req_ns2__InsertClient(
	struct soap *soap)
{
	ns2__InsertClient *_p = ::soap_new_ns2__InsertClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InsertClient * soap_new_set_ns2__InsertClient(
	struct soap *soap,
	ns2__client *arg0)
{
	ns2__InsertClient *_p = ::soap_new_ns2__InsertClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__InsertClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__InsertClient(struct soap *soap, ns2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClient", p->soap_type() == SOAP_TYPE_ns2__InsertClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InsertClient(struct soap *soap, const char *URL, ns2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClient", p->soap_type() == SOAP_TYPE_ns2__InsertClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InsertClient(struct soap *soap, const char *URL, ns2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClient", p->soap_type() == SOAP_TYPE_ns2__InsertClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InsertClient(struct soap *soap, const char *URL, ns2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertClient", p->soap_type() == SOAP_TYPE_ns2__InsertClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InsertClient * SOAP_FMAC4 soap_get_ns2__InsertClient(struct soap*, ns2__InsertClient *, const char*, const char*);

inline int soap_read_ns2__InsertClient(struct soap *soap, ns2__InsertClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InsertClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InsertClient(struct soap *soap, const char *URL, ns2__InsertClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InsertClient(struct soap *soap, ns2__InsertClient *p)
{
	if (::soap_read_ns2__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteShoppingCartResponse_DEFINED
#define SOAP_TYPE_ns2__deleteShoppingCartResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteShoppingCartResponse(struct soap*, const char*, int, const ns2__deleteShoppingCartResponse *, const char*);
SOAP_FMAC3 ns2__deleteShoppingCartResponse * SOAP_FMAC4 soap_in_ns2__deleteShoppingCartResponse(struct soap*, const char*, ns2__deleteShoppingCartResponse *, const char*);
SOAP_FMAC1 ns2__deleteShoppingCartResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteShoppingCartResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteShoppingCartResponse * soap_new_ns2__deleteShoppingCartResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteShoppingCartResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteShoppingCartResponse * soap_new_req_ns2__deleteShoppingCartResponse(
	struct soap *soap)
{
	ns2__deleteShoppingCartResponse *_p = ::soap_new_ns2__deleteShoppingCartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteShoppingCartResponse * soap_new_set_ns2__deleteShoppingCartResponse(
	struct soap *soap)
{
	ns2__deleteShoppingCartResponse *_p = ::soap_new_ns2__deleteShoppingCartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteShoppingCartResponse(struct soap *soap, ns2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteShoppingCartResponse(struct soap *soap, const char *URL, ns2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteShoppingCartResponse(struct soap *soap, const char *URL, ns2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteShoppingCartResponse(struct soap *soap, const char *URL, ns2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteShoppingCartResponse * SOAP_FMAC4 soap_get_ns2__deleteShoppingCartResponse(struct soap*, ns2__deleteShoppingCartResponse *, const char*, const char*);

inline int soap_read_ns2__deleteShoppingCartResponse(struct soap *soap, ns2__deleteShoppingCartResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteShoppingCartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteShoppingCartResponse(struct soap *soap, const char *URL, ns2__deleteShoppingCartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteShoppingCartResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteShoppingCartResponse(struct soap *soap, ns2__deleteShoppingCartResponse *p)
{
	if (::soap_read_ns2__deleteShoppingCartResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteShoppingCart_DEFINED
#define SOAP_TYPE_ns2__deleteShoppingCart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteShoppingCart(struct soap*, const char*, int, const ns2__deleteShoppingCart *, const char*);
SOAP_FMAC3 ns2__deleteShoppingCart * SOAP_FMAC4 soap_in_ns2__deleteShoppingCart(struct soap*, const char*, ns2__deleteShoppingCart *, const char*);
SOAP_FMAC1 ns2__deleteShoppingCart * SOAP_FMAC2 soap_instantiate_ns2__deleteShoppingCart(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteShoppingCart * soap_new_ns2__deleteShoppingCart(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteShoppingCart(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteShoppingCart * soap_new_req_ns2__deleteShoppingCart(
	struct soap *soap)
{
	ns2__deleteShoppingCart *_p = ::soap_new_ns2__deleteShoppingCart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteShoppingCart * soap_new_set_ns2__deleteShoppingCart(
	struct soap *soap,
	ns2__order *arg0)
{
	ns2__deleteShoppingCart *_p = ::soap_new_ns2__deleteShoppingCart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteShoppingCart::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__deleteShoppingCart(struct soap *soap, ns2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteShoppingCart(struct soap *soap, const char *URL, ns2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteShoppingCart(struct soap *soap, const char *URL, ns2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteShoppingCart(struct soap *soap, const char *URL, ns2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_ns2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteShoppingCart * SOAP_FMAC4 soap_get_ns2__deleteShoppingCart(struct soap*, ns2__deleteShoppingCart *, const char*, const char*);

inline int soap_read_ns2__deleteShoppingCart(struct soap *soap, ns2__deleteShoppingCart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteShoppingCart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteShoppingCart(struct soap *soap, const char *URL, ns2__deleteShoppingCart *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteShoppingCart(struct soap *soap, ns2__deleteShoppingCart *p)
{
	if (::soap_read_ns2__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getClientByNameAndPwdResponse_DEFINED
#define SOAP_TYPE_ns2__getClientByNameAndPwdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClientByNameAndPwdResponse(struct soap*, const char*, int, const ns2__getClientByNameAndPwdResponse *, const char*);
SOAP_FMAC3 ns2__getClientByNameAndPwdResponse * SOAP_FMAC4 soap_in_ns2__getClientByNameAndPwdResponse(struct soap*, const char*, ns2__getClientByNameAndPwdResponse *, const char*);
SOAP_FMAC1 ns2__getClientByNameAndPwdResponse * SOAP_FMAC2 soap_instantiate_ns2__getClientByNameAndPwdResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getClientByNameAndPwdResponse * soap_new_ns2__getClientByNameAndPwdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getClientByNameAndPwdResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getClientByNameAndPwdResponse * soap_new_req_ns2__getClientByNameAndPwdResponse(
	struct soap *soap)
{
	ns2__getClientByNameAndPwdResponse *_p = ::soap_new_ns2__getClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getClientByNameAndPwdResponse * soap_new_set_ns2__getClientByNameAndPwdResponse(
	struct soap *soap,
	ns2__client *return_)
{
	ns2__getClientByNameAndPwdResponse *_p = ::soap_new_ns2__getClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getClientByNameAndPwdResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getClientByNameAndPwdResponse(struct soap *soap, ns2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getClientByNameAndPwdResponse * SOAP_FMAC4 soap_get_ns2__getClientByNameAndPwdResponse(struct soap*, ns2__getClientByNameAndPwdResponse *, const char*, const char*);

inline int soap_read_ns2__getClientByNameAndPwdResponse(struct soap *soap, ns2__getClientByNameAndPwdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getClientByNameAndPwdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getClientByNameAndPwdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getClientByNameAndPwdResponse(struct soap *soap, ns2__getClientByNameAndPwdResponse *p)
{
	if (::soap_read_ns2__getClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getClientByNameAndPwd_DEFINED
#define SOAP_TYPE_ns2__getClientByNameAndPwd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClientByNameAndPwd(struct soap*, const char*, int, const ns2__getClientByNameAndPwd *, const char*);
SOAP_FMAC3 ns2__getClientByNameAndPwd * SOAP_FMAC4 soap_in_ns2__getClientByNameAndPwd(struct soap*, const char*, ns2__getClientByNameAndPwd *, const char*);
SOAP_FMAC1 ns2__getClientByNameAndPwd * SOAP_FMAC2 soap_instantiate_ns2__getClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getClientByNameAndPwd * soap_new_ns2__getClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline ns2__getClientByNameAndPwd * soap_new_req_ns2__getClientByNameAndPwd(
	struct soap *soap)
{
	ns2__getClientByNameAndPwd *_p = ::soap_new_ns2__getClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getClientByNameAndPwd * soap_new_set_ns2__getClientByNameAndPwd(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	ns2__getClientByNameAndPwd *_p = ::soap_new_ns2__getClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getClientByNameAndPwd::arg0 = arg0;
		_p->ns2__getClientByNameAndPwd::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__getClientByNameAndPwd(struct soap *soap, ns2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getClientByNameAndPwd(struct soap *soap, const char *URL, ns2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getClientByNameAndPwd(struct soap *soap, const char *URL, ns2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getClientByNameAndPwd(struct soap *soap, const char *URL, ns2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getClientByNameAndPwd * SOAP_FMAC4 soap_get_ns2__getClientByNameAndPwd(struct soap*, ns2__getClientByNameAndPwd *, const char*, const char*);

inline int soap_read_ns2__getClientByNameAndPwd(struct soap *soap, ns2__getClientByNameAndPwd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getClientByNameAndPwd(struct soap *soap, const char *URL, ns2__getClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getClientByNameAndPwd(struct soap *soap, ns2__getClientByNameAndPwd *p)
{
	if (::soap_read_ns2__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductLikeListResponse_DEFINED
#define SOAP_TYPE_ns2__getProductLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductLikeListResponse(struct soap*, const char*, int, const ns2__getProductLikeListResponse *, const char*);
SOAP_FMAC3 ns2__getProductLikeListResponse * SOAP_FMAC4 soap_in_ns2__getProductLikeListResponse(struct soap*, const char*, ns2__getProductLikeListResponse *, const char*);
SOAP_FMAC1 ns2__getProductLikeListResponse * SOAP_FMAC2 soap_instantiate_ns2__getProductLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductLikeListResponse * soap_new_ns2__getProductLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductLikeListResponse * soap_new_req_ns2__getProductLikeListResponse(
	struct soap *soap)
{
	ns2__getProductLikeListResponse *_p = ::soap_new_ns2__getProductLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductLikeListResponse * soap_new_set_ns2__getProductLikeListResponse(
	struct soap *soap,
	const std::vector<ns2__product *> & return_)
{
	ns2__getProductLikeListResponse *_p = ::soap_new_ns2__getProductLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getProductLikeListResponse(struct soap *soap, ns2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductLikeListResponse(struct soap *soap, const char *URL, ns2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductLikeListResponse(struct soap *soap, const char *URL, ns2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductLikeListResponse(struct soap *soap, const char *URL, ns2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductLikeListResponse * SOAP_FMAC4 soap_get_ns2__getProductLikeListResponse(struct soap*, ns2__getProductLikeListResponse *, const char*, const char*);

inline int soap_read_ns2__getProductLikeListResponse(struct soap *soap, ns2__getProductLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductLikeListResponse(struct soap *soap, const char *URL, ns2__getProductLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductLikeListResponse(struct soap *soap, ns2__getProductLikeListResponse *p)
{
	if (::soap_read_ns2__getProductLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductLikeList_DEFINED
#define SOAP_TYPE_ns2__getProductLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductLikeList(struct soap*, const char*, int, const ns2__getProductLikeList *, const char*);
SOAP_FMAC3 ns2__getProductLikeList * SOAP_FMAC4 soap_in_ns2__getProductLikeList(struct soap*, const char*, ns2__getProductLikeList *, const char*);
SOAP_FMAC1 ns2__getProductLikeList * SOAP_FMAC2 soap_instantiate_ns2__getProductLikeList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductLikeList * soap_new_ns2__getProductLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductLikeList(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductLikeList * soap_new_req_ns2__getProductLikeList(
	struct soap *soap)
{
	ns2__getProductLikeList *_p = ::soap_new_ns2__getProductLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductLikeList * soap_new_set_ns2__getProductLikeList(
	struct soap *soap,
	std::string *arg0,
	ns2__product *arg1)
{
	ns2__getProductLikeList *_p = ::soap_new_ns2__getProductLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductLikeList::arg0 = arg0;
		_p->ns2__getProductLikeList::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__getProductLikeList(struct soap *soap, ns2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeList", p->soap_type() == SOAP_TYPE_ns2__getProductLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductLikeList(struct soap *soap, const char *URL, ns2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeList", p->soap_type() == SOAP_TYPE_ns2__getProductLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductLikeList(struct soap *soap, const char *URL, ns2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeList", p->soap_type() == SOAP_TYPE_ns2__getProductLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductLikeList(struct soap *soap, const char *URL, ns2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductLikeList", p->soap_type() == SOAP_TYPE_ns2__getProductLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductLikeList * SOAP_FMAC4 soap_get_ns2__getProductLikeList(struct soap*, ns2__getProductLikeList *, const char*, const char*);

inline int soap_read_ns2__getProductLikeList(struct soap *soap, ns2__getProductLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductLikeList(struct soap *soap, const char *URL, ns2__getProductLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductLikeList(struct soap *soap, ns2__getProductLikeList *p)
{
	if (::soap_read_ns2__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteMessageFromClientResponse_DEFINED
#define SOAP_TYPE_ns2__deleteMessageFromClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteMessageFromClientResponse(struct soap*, const char*, int, const ns2__deleteMessageFromClientResponse *, const char*);
SOAP_FMAC3 ns2__deleteMessageFromClientResponse * SOAP_FMAC4 soap_in_ns2__deleteMessageFromClientResponse(struct soap*, const char*, ns2__deleteMessageFromClientResponse *, const char*);
SOAP_FMAC1 ns2__deleteMessageFromClientResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteMessageFromClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteMessageFromClientResponse * soap_new_ns2__deleteMessageFromClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteMessageFromClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteMessageFromClientResponse * soap_new_req_ns2__deleteMessageFromClientResponse(
	struct soap *soap)
{
	ns2__deleteMessageFromClientResponse *_p = ::soap_new_ns2__deleteMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteMessageFromClientResponse * soap_new_set_ns2__deleteMessageFromClientResponse(
	struct soap *soap)
{
	ns2__deleteMessageFromClientResponse *_p = ::soap_new_ns2__deleteMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteMessageFromClientResponse(struct soap *soap, ns2__deleteMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteMessageFromClientResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteMessageFromClientResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteMessageFromClientResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteMessageFromClientResponse * SOAP_FMAC4 soap_get_ns2__deleteMessageFromClientResponse(struct soap*, ns2__deleteMessageFromClientResponse *, const char*, const char*);

inline int soap_read_ns2__deleteMessageFromClientResponse(struct soap *soap, ns2__deleteMessageFromClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteMessageFromClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteMessageFromClientResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteMessageFromClientResponse(struct soap *soap, ns2__deleteMessageFromClientResponse *p)
{
	if (::soap_read_ns2__deleteMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteMessageFromClient_DEFINED
#define SOAP_TYPE_ns2__deleteMessageFromClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteMessageFromClient(struct soap*, const char*, int, const ns2__deleteMessageFromClient *, const char*);
SOAP_FMAC3 ns2__deleteMessageFromClient * SOAP_FMAC4 soap_in_ns2__deleteMessageFromClient(struct soap*, const char*, ns2__deleteMessageFromClient *, const char*);
SOAP_FMAC1 ns2__deleteMessageFromClient * SOAP_FMAC2 soap_instantiate_ns2__deleteMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteMessageFromClient * soap_new_ns2__deleteMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteMessageFromClient * soap_new_req_ns2__deleteMessageFromClient(
	struct soap *soap,
	int arg1)
{
	ns2__deleteMessageFromClient *_p = ::soap_new_ns2__deleteMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteMessageFromClient::arg1 = arg1;
	}
	return _p;
}

inline ns2__deleteMessageFromClient * soap_new_set_ns2__deleteMessageFromClient(
	struct soap *soap,
	ns2__message *arg0,
	int arg1)
{
	ns2__deleteMessageFromClient *_p = ::soap_new_ns2__deleteMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteMessageFromClient::arg0 = arg0;
		_p->ns2__deleteMessageFromClient::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__deleteMessageFromClient(struct soap *soap, ns2__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteMessageFromClient(struct soap *soap, const char *URL, ns2__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteMessageFromClient(struct soap *soap, const char *URL, ns2__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteMessageFromClient(struct soap *soap, const char *URL, ns2__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteMessageFromClient * SOAP_FMAC4 soap_get_ns2__deleteMessageFromClient(struct soap*, ns2__deleteMessageFromClient *, const char*, const char*);

inline int soap_read_ns2__deleteMessageFromClient(struct soap *soap, ns2__deleteMessageFromClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteMessageFromClient(struct soap *soap, const char *URL, ns2__deleteMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteMessageFromClient(struct soap *soap, ns2__deleteMessageFromClient *p)
{
	if (::soap_read_ns2__deleteMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__addProductTypeResponse_DEFINED
#define SOAP_TYPE_ns2__addProductTypeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addProductTypeResponse(struct soap*, const char*, int, const ns2__addProductTypeResponse *, const char*);
SOAP_FMAC3 ns2__addProductTypeResponse * SOAP_FMAC4 soap_in_ns2__addProductTypeResponse(struct soap*, const char*, ns2__addProductTypeResponse *, const char*);
SOAP_FMAC1 ns2__addProductTypeResponse * SOAP_FMAC2 soap_instantiate_ns2__addProductTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__addProductTypeResponse * soap_new_ns2__addProductTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__addProductTypeResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__addProductTypeResponse * soap_new_req_ns2__addProductTypeResponse(
	struct soap *soap)
{
	ns2__addProductTypeResponse *_p = ::soap_new_ns2__addProductTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__addProductTypeResponse * soap_new_set_ns2__addProductTypeResponse(
	struct soap *soap)
{
	ns2__addProductTypeResponse *_p = ::soap_new_ns2__addProductTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__addProductTypeResponse(struct soap *soap, ns2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_ns2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__addProductTypeResponse(struct soap *soap, const char *URL, ns2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_ns2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__addProductTypeResponse(struct soap *soap, const char *URL, ns2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_ns2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__addProductTypeResponse(struct soap *soap, const char *URL, ns2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_ns2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__addProductTypeResponse * SOAP_FMAC4 soap_get_ns2__addProductTypeResponse(struct soap*, ns2__addProductTypeResponse *, const char*, const char*);

inline int soap_read_ns2__addProductTypeResponse(struct soap *soap, ns2__addProductTypeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__addProductTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__addProductTypeResponse(struct soap *soap, const char *URL, ns2__addProductTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__addProductTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__addProductTypeResponse(struct soap *soap, ns2__addProductTypeResponse *p)
{
	if (::soap_read_ns2__addProductTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__addProductType_DEFINED
#define SOAP_TYPE_ns2__addProductType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addProductType(struct soap*, const char*, int, const ns2__addProductType *, const char*);
SOAP_FMAC3 ns2__addProductType * SOAP_FMAC4 soap_in_ns2__addProductType(struct soap*, const char*, ns2__addProductType *, const char*);
SOAP_FMAC1 ns2__addProductType * SOAP_FMAC2 soap_instantiate_ns2__addProductType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__addProductType * soap_new_ns2__addProductType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__addProductType(soap, n, NULL, NULL, NULL);
}

inline ns2__addProductType * soap_new_req_ns2__addProductType(
	struct soap *soap)
{
	ns2__addProductType *_p = ::soap_new_ns2__addProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__addProductType * soap_new_set_ns2__addProductType(
	struct soap *soap,
	ns2__productType *arg0)
{
	ns2__addProductType *_p = ::soap_new_ns2__addProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__addProductType::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__addProductType(struct soap *soap, ns2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductType", p->soap_type() == SOAP_TYPE_ns2__addProductType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__addProductType(struct soap *soap, const char *URL, ns2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductType", p->soap_type() == SOAP_TYPE_ns2__addProductType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__addProductType(struct soap *soap, const char *URL, ns2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductType", p->soap_type() == SOAP_TYPE_ns2__addProductType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__addProductType(struct soap *soap, const char *URL, ns2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductType", p->soap_type() == SOAP_TYPE_ns2__addProductType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__addProductType * SOAP_FMAC4 soap_get_ns2__addProductType(struct soap*, ns2__addProductType *, const char*, const char*);

inline int soap_read_ns2__addProductType(struct soap *soap, ns2__addProductType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__addProductType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__addProductType(struct soap *soap, const char *URL, ns2__addProductType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__addProductType(struct soap *soap, ns2__addProductType *p)
{
	if (::soap_read_ns2__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderListByInfoResponse_DEFINED
#define SOAP_TYPE_ns2__getOrderListByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderListByInfoResponse(struct soap*, const char*, int, const ns2__getOrderListByInfoResponse *, const char*);
SOAP_FMAC3 ns2__getOrderListByInfoResponse * SOAP_FMAC4 soap_in_ns2__getOrderListByInfoResponse(struct soap*, const char*, ns2__getOrderListByInfoResponse *, const char*);
SOAP_FMAC1 ns2__getOrderListByInfoResponse * SOAP_FMAC2 soap_instantiate_ns2__getOrderListByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderListByInfoResponse * soap_new_ns2__getOrderListByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderListByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderListByInfoResponse * soap_new_req_ns2__getOrderListByInfoResponse(
	struct soap *soap)
{
	ns2__getOrderListByInfoResponse *_p = ::soap_new_ns2__getOrderListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderListByInfoResponse * soap_new_set_ns2__getOrderListByInfoResponse(
	struct soap *soap,
	const std::vector<ns2__order *> & return_)
{
	ns2__getOrderListByInfoResponse *_p = ::soap_new_ns2__getOrderListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderListByInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getOrderListByInfoResponse(struct soap *soap, ns2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderListByInfoResponse(struct soap *soap, const char *URL, ns2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderListByInfoResponse(struct soap *soap, const char *URL, ns2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderListByInfoResponse(struct soap *soap, const char *URL, ns2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderListByInfoResponse * SOAP_FMAC4 soap_get_ns2__getOrderListByInfoResponse(struct soap*, ns2__getOrderListByInfoResponse *, const char*, const char*);

inline int soap_read_ns2__getOrderListByInfoResponse(struct soap *soap, ns2__getOrderListByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderListByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderListByInfoResponse(struct soap *soap, const char *URL, ns2__getOrderListByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderListByInfoResponse(struct soap *soap, ns2__getOrderListByInfoResponse *p)
{
	if (::soap_read_ns2__getOrderListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderListByInfo_DEFINED
#define SOAP_TYPE_ns2__getOrderListByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderListByInfo(struct soap*, const char*, int, const ns2__getOrderListByInfo *, const char*);
SOAP_FMAC3 ns2__getOrderListByInfo * SOAP_FMAC4 soap_in_ns2__getOrderListByInfo(struct soap*, const char*, ns2__getOrderListByInfo *, const char*);
SOAP_FMAC1 ns2__getOrderListByInfo * SOAP_FMAC2 soap_instantiate_ns2__getOrderListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderListByInfo * soap_new_ns2__getOrderListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderListByInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderListByInfo * soap_new_req_ns2__getOrderListByInfo(
	struct soap *soap)
{
	ns2__getOrderListByInfo *_p = ::soap_new_ns2__getOrderListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderListByInfo * soap_new_set_ns2__getOrderListByInfo(
	struct soap *soap,
	ns2__order *arg0)
{
	ns2__getOrderListByInfo *_p = ::soap_new_ns2__getOrderListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderListByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getOrderListByInfo(struct soap *soap, ns2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderListByInfo(struct soap *soap, const char *URL, ns2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderListByInfo(struct soap *soap, const char *URL, ns2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderListByInfo(struct soap *soap, const char *URL, ns2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_ns2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderListByInfo * SOAP_FMAC4 soap_get_ns2__getOrderListByInfo(struct soap*, ns2__getOrderListByInfo *, const char*, const char*);

inline int soap_read_ns2__getOrderListByInfo(struct soap *soap, ns2__getOrderListByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderListByInfo(struct soap *soap, const char *URL, ns2__getOrderListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderListByInfo(struct soap *soap, ns2__getOrderListByInfo *p)
{
	if (::soap_read_ns2__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getShopListResponse_DEFINED
#define SOAP_TYPE_ns2__getShopListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getShopListResponse(struct soap*, const char*, int, const ns2__getShopListResponse *, const char*);
SOAP_FMAC3 ns2__getShopListResponse * SOAP_FMAC4 soap_in_ns2__getShopListResponse(struct soap*, const char*, ns2__getShopListResponse *, const char*);
SOAP_FMAC1 ns2__getShopListResponse * SOAP_FMAC2 soap_instantiate_ns2__getShopListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getShopListResponse * soap_new_ns2__getShopListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getShopListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getShopListResponse * soap_new_req_ns2__getShopListResponse(
	struct soap *soap)
{
	ns2__getShopListResponse *_p = ::soap_new_ns2__getShopListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getShopListResponse * soap_new_set_ns2__getShopListResponse(
	struct soap *soap,
	const std::vector<ns2__shop *> & return_)
{
	ns2__getShopListResponse *_p = ::soap_new_ns2__getShopListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getShopListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getShopListResponse(struct soap *soap, ns2__getShopListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getShopListResponse(struct soap *soap, const char *URL, ns2__getShopListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getShopListResponse(struct soap *soap, const char *URL, ns2__getShopListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getShopListResponse(struct soap *soap, const char *URL, ns2__getShopListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getShopListResponse * SOAP_FMAC4 soap_get_ns2__getShopListResponse(struct soap*, ns2__getShopListResponse *, const char*, const char*);

inline int soap_read_ns2__getShopListResponse(struct soap *soap, ns2__getShopListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getShopListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getShopListResponse(struct soap *soap, const char *URL, ns2__getShopListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getShopListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getShopListResponse(struct soap *soap, ns2__getShopListResponse *p)
{
	if (::soap_read_ns2__getShopListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getShopList_DEFINED
#define SOAP_TYPE_ns2__getShopList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getShopList(struct soap*, const char*, int, const ns2__getShopList *, const char*);
SOAP_FMAC3 ns2__getShopList * SOAP_FMAC4 soap_in_ns2__getShopList(struct soap*, const char*, ns2__getShopList *, const char*);
SOAP_FMAC1 ns2__getShopList * SOAP_FMAC2 soap_instantiate_ns2__getShopList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getShopList * soap_new_ns2__getShopList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getShopList(soap, n, NULL, NULL, NULL);
}

inline ns2__getShopList * soap_new_req_ns2__getShopList(
	struct soap *soap)
{
	ns2__getShopList *_p = ::soap_new_ns2__getShopList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getShopList * soap_new_set_ns2__getShopList(
	struct soap *soap)
{
	ns2__getShopList *_p = ::soap_new_ns2__getShopList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__getShopList(struct soap *soap, ns2__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopList", p->soap_type() == SOAP_TYPE_ns2__getShopList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getShopList(struct soap *soap, const char *URL, ns2__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopList", p->soap_type() == SOAP_TYPE_ns2__getShopList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getShopList(struct soap *soap, const char *URL, ns2__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopList", p->soap_type() == SOAP_TYPE_ns2__getShopList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getShopList(struct soap *soap, const char *URL, ns2__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopList", p->soap_type() == SOAP_TYPE_ns2__getShopList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getShopList * SOAP_FMAC4 soap_get_ns2__getShopList(struct soap*, ns2__getShopList *, const char*, const char*);

inline int soap_read_ns2__getShopList(struct soap *soap, ns2__getShopList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getShopList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getShopList(struct soap *soap, const char *URL, ns2__getShopList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getShopList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getShopList(struct soap *soap, ns2__getShopList *p)
{
	if (::soap_read_ns2__getShopList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getClientLikeListResponse_DEFINED
#define SOAP_TYPE_ns2__getClientLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClientLikeListResponse(struct soap*, const char*, int, const ns2__getClientLikeListResponse *, const char*);
SOAP_FMAC3 ns2__getClientLikeListResponse * SOAP_FMAC4 soap_in_ns2__getClientLikeListResponse(struct soap*, const char*, ns2__getClientLikeListResponse *, const char*);
SOAP_FMAC1 ns2__getClientLikeListResponse * SOAP_FMAC2 soap_instantiate_ns2__getClientLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getClientLikeListResponse * soap_new_ns2__getClientLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getClientLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getClientLikeListResponse * soap_new_req_ns2__getClientLikeListResponse(
	struct soap *soap)
{
	ns2__getClientLikeListResponse *_p = ::soap_new_ns2__getClientLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getClientLikeListResponse * soap_new_set_ns2__getClientLikeListResponse(
	struct soap *soap,
	const std::vector<ns2__client *> & return_)
{
	ns2__getClientLikeListResponse *_p = ::soap_new_ns2__getClientLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getClientLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getClientLikeListResponse(struct soap *soap, ns2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getClientLikeListResponse(struct soap *soap, const char *URL, ns2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getClientLikeListResponse(struct soap *soap, const char *URL, ns2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getClientLikeListResponse(struct soap *soap, const char *URL, ns2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getClientLikeListResponse * SOAP_FMAC4 soap_get_ns2__getClientLikeListResponse(struct soap*, ns2__getClientLikeListResponse *, const char*, const char*);

inline int soap_read_ns2__getClientLikeListResponse(struct soap *soap, ns2__getClientLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getClientLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getClientLikeListResponse(struct soap *soap, const char *URL, ns2__getClientLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getClientLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getClientLikeListResponse(struct soap *soap, ns2__getClientLikeListResponse *p)
{
	if (::soap_read_ns2__getClientLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getClientLikeList_DEFINED
#define SOAP_TYPE_ns2__getClientLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClientLikeList(struct soap*, const char*, int, const ns2__getClientLikeList *, const char*);
SOAP_FMAC3 ns2__getClientLikeList * SOAP_FMAC4 soap_in_ns2__getClientLikeList(struct soap*, const char*, ns2__getClientLikeList *, const char*);
SOAP_FMAC1 ns2__getClientLikeList * SOAP_FMAC2 soap_instantiate_ns2__getClientLikeList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getClientLikeList * soap_new_ns2__getClientLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getClientLikeList(soap, n, NULL, NULL, NULL);
}

inline ns2__getClientLikeList * soap_new_req_ns2__getClientLikeList(
	struct soap *soap)
{
	ns2__getClientLikeList *_p = ::soap_new_ns2__getClientLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getClientLikeList * soap_new_set_ns2__getClientLikeList(
	struct soap *soap,
	std::string *arg0)
{
	ns2__getClientLikeList *_p = ::soap_new_ns2__getClientLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getClientLikeList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getClientLikeList(struct soap *soap, ns2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeList", p->soap_type() == SOAP_TYPE_ns2__getClientLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getClientLikeList(struct soap *soap, const char *URL, ns2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeList", p->soap_type() == SOAP_TYPE_ns2__getClientLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getClientLikeList(struct soap *soap, const char *URL, ns2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeList", p->soap_type() == SOAP_TYPE_ns2__getClientLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getClientLikeList(struct soap *soap, const char *URL, ns2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientLikeList", p->soap_type() == SOAP_TYPE_ns2__getClientLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getClientLikeList * SOAP_FMAC4 soap_get_ns2__getClientLikeList(struct soap*, ns2__getClientLikeList *, const char*, const char*);

inline int soap_read_ns2__getClientLikeList(struct soap *soap, ns2__getClientLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getClientLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getClientLikeList(struct soap *soap, const char *URL, ns2__getClientLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getClientLikeList(struct soap *soap, ns2__getClientLikeList *p)
{
	if (::soap_read_ns2__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getUnreadMessageFromShopResponse_DEFINED
#define SOAP_TYPE_ns2__getUnreadMessageFromShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getUnreadMessageFromShopResponse(struct soap*, const char*, int, const ns2__getUnreadMessageFromShopResponse *, const char*);
SOAP_FMAC3 ns2__getUnreadMessageFromShopResponse * SOAP_FMAC4 soap_in_ns2__getUnreadMessageFromShopResponse(struct soap*, const char*, ns2__getUnreadMessageFromShopResponse *, const char*);
SOAP_FMAC1 ns2__getUnreadMessageFromShopResponse * SOAP_FMAC2 soap_instantiate_ns2__getUnreadMessageFromShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getUnreadMessageFromShopResponse * soap_new_ns2__getUnreadMessageFromShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getUnreadMessageFromShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getUnreadMessageFromShopResponse * soap_new_req_ns2__getUnreadMessageFromShopResponse(
	struct soap *soap)
{
	ns2__getUnreadMessageFromShopResponse *_p = ::soap_new_ns2__getUnreadMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getUnreadMessageFromShopResponse * soap_new_set_ns2__getUnreadMessageFromShopResponse(
	struct soap *soap,
	const std::vector<ns2__message *> & return_)
{
	ns2__getUnreadMessageFromShopResponse *_p = ::soap_new_ns2__getUnreadMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getUnreadMessageFromShopResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getUnreadMessageFromShopResponse(struct soap *soap, ns2__getUnreadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getUnreadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getUnreadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getUnreadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getUnreadMessageFromShopResponse * SOAP_FMAC4 soap_get_ns2__getUnreadMessageFromShopResponse(struct soap*, ns2__getUnreadMessageFromShopResponse *, const char*, const char*);

inline int soap_read_ns2__getUnreadMessageFromShopResponse(struct soap *soap, ns2__getUnreadMessageFromShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getUnreadMessageFromShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getUnreadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getUnreadMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getUnreadMessageFromShopResponse(struct soap *soap, ns2__getUnreadMessageFromShopResponse *p)
{
	if (::soap_read_ns2__getUnreadMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getUnreadMessageFromShop_DEFINED
#define SOAP_TYPE_ns2__getUnreadMessageFromShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getUnreadMessageFromShop(struct soap*, const char*, int, const ns2__getUnreadMessageFromShop *, const char*);
SOAP_FMAC3 ns2__getUnreadMessageFromShop * SOAP_FMAC4 soap_in_ns2__getUnreadMessageFromShop(struct soap*, const char*, ns2__getUnreadMessageFromShop *, const char*);
SOAP_FMAC1 ns2__getUnreadMessageFromShop * SOAP_FMAC2 soap_instantiate_ns2__getUnreadMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getUnreadMessageFromShop * soap_new_ns2__getUnreadMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getUnreadMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline ns2__getUnreadMessageFromShop * soap_new_req_ns2__getUnreadMessageFromShop(
	struct soap *soap)
{
	ns2__getUnreadMessageFromShop *_p = ::soap_new_ns2__getUnreadMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getUnreadMessageFromShop * soap_new_set_ns2__getUnreadMessageFromShop(
	struct soap *soap,
	ns2__client *arg0)
{
	ns2__getUnreadMessageFromShop *_p = ::soap_new_ns2__getUnreadMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getUnreadMessageFromShop::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getUnreadMessageFromShop(struct soap *soap, ns2__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getUnreadMessageFromShop(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getUnreadMessageFromShop(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getUnreadMessageFromShop(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getUnreadMessageFromShop * SOAP_FMAC4 soap_get_ns2__getUnreadMessageFromShop(struct soap*, ns2__getUnreadMessageFromShop *, const char*, const char*);

inline int soap_read_ns2__getUnreadMessageFromShop(struct soap *soap, ns2__getUnreadMessageFromShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getUnreadMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getUnreadMessageFromShop(struct soap *soap, const char *URL, ns2__getUnreadMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getUnreadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getUnreadMessageFromShop(struct soap *soap, ns2__getUnreadMessageFromShop *p)
{
	if (::soap_read_ns2__getUnreadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderLikeListResponse_DEFINED
#define SOAP_TYPE_ns2__getOrderLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderLikeListResponse(struct soap*, const char*, int, const ns2__getOrderLikeListResponse *, const char*);
SOAP_FMAC3 ns2__getOrderLikeListResponse * SOAP_FMAC4 soap_in_ns2__getOrderLikeListResponse(struct soap*, const char*, ns2__getOrderLikeListResponse *, const char*);
SOAP_FMAC1 ns2__getOrderLikeListResponse * SOAP_FMAC2 soap_instantiate_ns2__getOrderLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderLikeListResponse * soap_new_ns2__getOrderLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderLikeListResponse * soap_new_req_ns2__getOrderLikeListResponse(
	struct soap *soap)
{
	ns2__getOrderLikeListResponse *_p = ::soap_new_ns2__getOrderLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderLikeListResponse * soap_new_set_ns2__getOrderLikeListResponse(
	struct soap *soap,
	const std::vector<ns2__order *> & return_)
{
	ns2__getOrderLikeListResponse *_p = ::soap_new_ns2__getOrderLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getOrderLikeListResponse(struct soap *soap, ns2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderLikeListResponse(struct soap *soap, const char *URL, ns2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderLikeListResponse(struct soap *soap, const char *URL, ns2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderLikeListResponse(struct soap *soap, const char *URL, ns2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderLikeListResponse * SOAP_FMAC4 soap_get_ns2__getOrderLikeListResponse(struct soap*, ns2__getOrderLikeListResponse *, const char*, const char*);

inline int soap_read_ns2__getOrderLikeListResponse(struct soap *soap, ns2__getOrderLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderLikeListResponse(struct soap *soap, const char *URL, ns2__getOrderLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderLikeListResponse(struct soap *soap, ns2__getOrderLikeListResponse *p)
{
	if (::soap_read_ns2__getOrderLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderLikeList_DEFINED
#define SOAP_TYPE_ns2__getOrderLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderLikeList(struct soap*, const char*, int, const ns2__getOrderLikeList *, const char*);
SOAP_FMAC3 ns2__getOrderLikeList * SOAP_FMAC4 soap_in_ns2__getOrderLikeList(struct soap*, const char*, ns2__getOrderLikeList *, const char*);
SOAP_FMAC1 ns2__getOrderLikeList * SOAP_FMAC2 soap_instantiate_ns2__getOrderLikeList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderLikeList * soap_new_ns2__getOrderLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderLikeList(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderLikeList * soap_new_req_ns2__getOrderLikeList(
	struct soap *soap)
{
	ns2__getOrderLikeList *_p = ::soap_new_ns2__getOrderLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderLikeList * soap_new_set_ns2__getOrderLikeList(
	struct soap *soap,
	std::string *arg0,
	ns2__order *arg1)
{
	ns2__getOrderLikeList *_p = ::soap_new_ns2__getOrderLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderLikeList::arg0 = arg0;
		_p->ns2__getOrderLikeList::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__getOrderLikeList(struct soap *soap, ns2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeList", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderLikeList(struct soap *soap, const char *URL, ns2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeList", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderLikeList(struct soap *soap, const char *URL, ns2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeList", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderLikeList(struct soap *soap, const char *URL, ns2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderLikeList", p->soap_type() == SOAP_TYPE_ns2__getOrderLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderLikeList * SOAP_FMAC4 soap_get_ns2__getOrderLikeList(struct soap*, ns2__getOrderLikeList *, const char*, const char*);

inline int soap_read_ns2__getOrderLikeList(struct soap *soap, ns2__getOrderLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderLikeList(struct soap *soap, const char *URL, ns2__getOrderLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderLikeList(struct soap *soap, ns2__getOrderLikeList *p)
{
	if (::soap_read_ns2__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteMessageFromShopResponse_DEFINED
#define SOAP_TYPE_ns2__deleteMessageFromShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteMessageFromShopResponse(struct soap*, const char*, int, const ns2__deleteMessageFromShopResponse *, const char*);
SOAP_FMAC3 ns2__deleteMessageFromShopResponse * SOAP_FMAC4 soap_in_ns2__deleteMessageFromShopResponse(struct soap*, const char*, ns2__deleteMessageFromShopResponse *, const char*);
SOAP_FMAC1 ns2__deleteMessageFromShopResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteMessageFromShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteMessageFromShopResponse * soap_new_ns2__deleteMessageFromShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteMessageFromShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteMessageFromShopResponse * soap_new_req_ns2__deleteMessageFromShopResponse(
	struct soap *soap)
{
	ns2__deleteMessageFromShopResponse *_p = ::soap_new_ns2__deleteMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteMessageFromShopResponse * soap_new_set_ns2__deleteMessageFromShopResponse(
	struct soap *soap)
{
	ns2__deleteMessageFromShopResponse *_p = ::soap_new_ns2__deleteMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteMessageFromShopResponse(struct soap *soap, ns2__deleteMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteMessageFromShopResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteMessageFromShopResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteMessageFromShopResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteMessageFromShopResponse * SOAP_FMAC4 soap_get_ns2__deleteMessageFromShopResponse(struct soap*, ns2__deleteMessageFromShopResponse *, const char*, const char*);

inline int soap_read_ns2__deleteMessageFromShopResponse(struct soap *soap, ns2__deleteMessageFromShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteMessageFromShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteMessageFromShopResponse(struct soap *soap, const char *URL, ns2__deleteMessageFromShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteMessageFromShopResponse(struct soap *soap, ns2__deleteMessageFromShopResponse *p)
{
	if (::soap_read_ns2__deleteMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteMessageFromShop_DEFINED
#define SOAP_TYPE_ns2__deleteMessageFromShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteMessageFromShop(struct soap*, const char*, int, const ns2__deleteMessageFromShop *, const char*);
SOAP_FMAC3 ns2__deleteMessageFromShop * SOAP_FMAC4 soap_in_ns2__deleteMessageFromShop(struct soap*, const char*, ns2__deleteMessageFromShop *, const char*);
SOAP_FMAC1 ns2__deleteMessageFromShop * SOAP_FMAC2 soap_instantiate_ns2__deleteMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteMessageFromShop * soap_new_ns2__deleteMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteMessageFromShop * soap_new_req_ns2__deleteMessageFromShop(
	struct soap *soap,
	int arg1)
{
	ns2__deleteMessageFromShop *_p = ::soap_new_ns2__deleteMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteMessageFromShop::arg1 = arg1;
	}
	return _p;
}

inline ns2__deleteMessageFromShop * soap_new_set_ns2__deleteMessageFromShop(
	struct soap *soap,
	ns2__message *arg0,
	int arg1)
{
	ns2__deleteMessageFromShop *_p = ::soap_new_ns2__deleteMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteMessageFromShop::arg0 = arg0;
		_p->ns2__deleteMessageFromShop::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__deleteMessageFromShop(struct soap *soap, ns2__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteMessageFromShop(struct soap *soap, const char *URL, ns2__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteMessageFromShop(struct soap *soap, const char *URL, ns2__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteMessageFromShop(struct soap *soap, const char *URL, ns2__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__deleteMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteMessageFromShop * SOAP_FMAC4 soap_get_ns2__deleteMessageFromShop(struct soap*, ns2__deleteMessageFromShop *, const char*, const char*);

inline int soap_read_ns2__deleteMessageFromShop(struct soap *soap, ns2__deleteMessageFromShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteMessageFromShop(struct soap *soap, const char *URL, ns2__deleteMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteMessageFromShop(struct soap *soap, ns2__deleteMessageFromShop *p)
{
	if (::soap_read_ns2__deleteMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getMessageFromShopResponse_DEFINED
#define SOAP_TYPE_ns2__getMessageFromShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getMessageFromShopResponse(struct soap*, const char*, int, const ns2__getMessageFromShopResponse *, const char*);
SOAP_FMAC3 ns2__getMessageFromShopResponse * SOAP_FMAC4 soap_in_ns2__getMessageFromShopResponse(struct soap*, const char*, ns2__getMessageFromShopResponse *, const char*);
SOAP_FMAC1 ns2__getMessageFromShopResponse * SOAP_FMAC2 soap_instantiate_ns2__getMessageFromShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getMessageFromShopResponse * soap_new_ns2__getMessageFromShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getMessageFromShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getMessageFromShopResponse * soap_new_req_ns2__getMessageFromShopResponse(
	struct soap *soap)
{
	ns2__getMessageFromShopResponse *_p = ::soap_new_ns2__getMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getMessageFromShopResponse * soap_new_set_ns2__getMessageFromShopResponse(
	struct soap *soap,
	const std::vector<ns2__message *> & return_)
{
	ns2__getMessageFromShopResponse *_p = ::soap_new_ns2__getMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getMessageFromShopResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getMessageFromShopResponse(struct soap *soap, ns2__getMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getMessageFromShopResponse * SOAP_FMAC4 soap_get_ns2__getMessageFromShopResponse(struct soap*, ns2__getMessageFromShopResponse *, const char*, const char*);

inline int soap_read_ns2__getMessageFromShopResponse(struct soap *soap, ns2__getMessageFromShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getMessageFromShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getMessageFromShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getMessageFromShopResponse(struct soap *soap, ns2__getMessageFromShopResponse *p)
{
	if (::soap_read_ns2__getMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getMessageFromShop_DEFINED
#define SOAP_TYPE_ns2__getMessageFromShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getMessageFromShop(struct soap*, const char*, int, const ns2__getMessageFromShop *, const char*);
SOAP_FMAC3 ns2__getMessageFromShop * SOAP_FMAC4 soap_in_ns2__getMessageFromShop(struct soap*, const char*, ns2__getMessageFromShop *, const char*);
SOAP_FMAC1 ns2__getMessageFromShop * SOAP_FMAC2 soap_instantiate_ns2__getMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getMessageFromShop * soap_new_ns2__getMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline ns2__getMessageFromShop * soap_new_req_ns2__getMessageFromShop(
	struct soap *soap)
{
	ns2__getMessageFromShop *_p = ::soap_new_ns2__getMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getMessageFromShop * soap_new_set_ns2__getMessageFromShop(
	struct soap *soap,
	ns2__client *arg0)
{
	ns2__getMessageFromShop *_p = ::soap_new_ns2__getMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getMessageFromShop::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getMessageFromShop(struct soap *soap, ns2__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getMessageFromShop(struct soap *soap, const char *URL, ns2__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getMessageFromShop(struct soap *soap, const char *URL, ns2__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getMessageFromShop(struct soap *soap, const char *URL, ns2__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getMessageFromShop * SOAP_FMAC4 soap_get_ns2__getMessageFromShop(struct soap*, ns2__getMessageFromShop *, const char*, const char*);

inline int soap_read_ns2__getMessageFromShop(struct soap *soap, ns2__getMessageFromShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getMessageFromShop(struct soap *soap, const char *URL, ns2__getMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getMessageFromShop(struct soap *soap, ns2__getMessageFromShop *p)
{
	if (::soap_read_ns2__getMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getShopLikeListResponse_DEFINED
#define SOAP_TYPE_ns2__getShopLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getShopLikeListResponse(struct soap*, const char*, int, const ns2__getShopLikeListResponse *, const char*);
SOAP_FMAC3 ns2__getShopLikeListResponse * SOAP_FMAC4 soap_in_ns2__getShopLikeListResponse(struct soap*, const char*, ns2__getShopLikeListResponse *, const char*);
SOAP_FMAC1 ns2__getShopLikeListResponse * SOAP_FMAC2 soap_instantiate_ns2__getShopLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getShopLikeListResponse * soap_new_ns2__getShopLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getShopLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getShopLikeListResponse * soap_new_req_ns2__getShopLikeListResponse(
	struct soap *soap)
{
	ns2__getShopLikeListResponse *_p = ::soap_new_ns2__getShopLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getShopLikeListResponse * soap_new_set_ns2__getShopLikeListResponse(
	struct soap *soap,
	const std::vector<ns2__shop *> & return_)
{
	ns2__getShopLikeListResponse *_p = ::soap_new_ns2__getShopLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getShopLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getShopLikeListResponse(struct soap *soap, ns2__getShopLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getShopLikeListResponse(struct soap *soap, const char *URL, ns2__getShopLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getShopLikeListResponse(struct soap *soap, const char *URL, ns2__getShopLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getShopLikeListResponse(struct soap *soap, const char *URL, ns2__getShopLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeListResponse", p->soap_type() == SOAP_TYPE_ns2__getShopLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getShopLikeListResponse * SOAP_FMAC4 soap_get_ns2__getShopLikeListResponse(struct soap*, ns2__getShopLikeListResponse *, const char*, const char*);

inline int soap_read_ns2__getShopLikeListResponse(struct soap *soap, ns2__getShopLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getShopLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getShopLikeListResponse(struct soap *soap, const char *URL, ns2__getShopLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getShopLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getShopLikeListResponse(struct soap *soap, ns2__getShopLikeListResponse *p)
{
	if (::soap_read_ns2__getShopLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getShopLikeList_DEFINED
#define SOAP_TYPE_ns2__getShopLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getShopLikeList(struct soap*, const char*, int, const ns2__getShopLikeList *, const char*);
SOAP_FMAC3 ns2__getShopLikeList * SOAP_FMAC4 soap_in_ns2__getShopLikeList(struct soap*, const char*, ns2__getShopLikeList *, const char*);
SOAP_FMAC1 ns2__getShopLikeList * SOAP_FMAC2 soap_instantiate_ns2__getShopLikeList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getShopLikeList * soap_new_ns2__getShopLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getShopLikeList(soap, n, NULL, NULL, NULL);
}

inline ns2__getShopLikeList * soap_new_req_ns2__getShopLikeList(
	struct soap *soap)
{
	ns2__getShopLikeList *_p = ::soap_new_ns2__getShopLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getShopLikeList * soap_new_set_ns2__getShopLikeList(
	struct soap *soap,
	std::string *arg0)
{
	ns2__getShopLikeList *_p = ::soap_new_ns2__getShopLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getShopLikeList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getShopLikeList(struct soap *soap, ns2__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeList", p->soap_type() == SOAP_TYPE_ns2__getShopLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getShopLikeList(struct soap *soap, const char *URL, ns2__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeList", p->soap_type() == SOAP_TYPE_ns2__getShopLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getShopLikeList(struct soap *soap, const char *URL, ns2__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeList", p->soap_type() == SOAP_TYPE_ns2__getShopLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getShopLikeList(struct soap *soap, const char *URL, ns2__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopLikeList", p->soap_type() == SOAP_TYPE_ns2__getShopLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getShopLikeList * SOAP_FMAC4 soap_get_ns2__getShopLikeList(struct soap*, ns2__getShopLikeList *, const char*, const char*);

inline int soap_read_ns2__getShopLikeList(struct soap *soap, ns2__getShopLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getShopLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getShopLikeList(struct soap *soap, const char *URL, ns2__getShopLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getShopLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getShopLikeList(struct soap *soap, ns2__getShopLikeList *p)
{
	if (::soap_read_ns2__getShopLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InsertMessageResponse_DEFINED
#define SOAP_TYPE_ns2__InsertMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InsertMessageResponse(struct soap*, const char*, int, const ns2__InsertMessageResponse *, const char*);
SOAP_FMAC3 ns2__InsertMessageResponse * SOAP_FMAC4 soap_in_ns2__InsertMessageResponse(struct soap*, const char*, ns2__InsertMessageResponse *, const char*);
SOAP_FMAC1 ns2__InsertMessageResponse * SOAP_FMAC2 soap_instantiate_ns2__InsertMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InsertMessageResponse * soap_new_ns2__InsertMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InsertMessageResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__InsertMessageResponse * soap_new_req_ns2__InsertMessageResponse(
	struct soap *soap)
{
	ns2__InsertMessageResponse *_p = ::soap_new_ns2__InsertMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InsertMessageResponse * soap_new_set_ns2__InsertMessageResponse(
	struct soap *soap)
{
	ns2__InsertMessageResponse *_p = ::soap_new_ns2__InsertMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__InsertMessageResponse(struct soap *soap, ns2__InsertMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessageResponse", p->soap_type() == SOAP_TYPE_ns2__InsertMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InsertMessageResponse(struct soap *soap, const char *URL, ns2__InsertMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessageResponse", p->soap_type() == SOAP_TYPE_ns2__InsertMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InsertMessageResponse(struct soap *soap, const char *URL, ns2__InsertMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessageResponse", p->soap_type() == SOAP_TYPE_ns2__InsertMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InsertMessageResponse(struct soap *soap, const char *URL, ns2__InsertMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessageResponse", p->soap_type() == SOAP_TYPE_ns2__InsertMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InsertMessageResponse * SOAP_FMAC4 soap_get_ns2__InsertMessageResponse(struct soap*, ns2__InsertMessageResponse *, const char*, const char*);

inline int soap_read_ns2__InsertMessageResponse(struct soap *soap, ns2__InsertMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InsertMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InsertMessageResponse(struct soap *soap, const char *URL, ns2__InsertMessageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InsertMessageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InsertMessageResponse(struct soap *soap, ns2__InsertMessageResponse *p)
{
	if (::soap_read_ns2__InsertMessageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InsertMessage_DEFINED
#define SOAP_TYPE_ns2__InsertMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InsertMessage(struct soap*, const char*, int, const ns2__InsertMessage *, const char*);
SOAP_FMAC3 ns2__InsertMessage * SOAP_FMAC4 soap_in_ns2__InsertMessage(struct soap*, const char*, ns2__InsertMessage *, const char*);
SOAP_FMAC1 ns2__InsertMessage * SOAP_FMAC2 soap_instantiate_ns2__InsertMessage(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InsertMessage * soap_new_ns2__InsertMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InsertMessage(soap, n, NULL, NULL, NULL);
}

inline ns2__InsertMessage * soap_new_req_ns2__InsertMessage(
	struct soap *soap)
{
	ns2__InsertMessage *_p = ::soap_new_ns2__InsertMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InsertMessage * soap_new_set_ns2__InsertMessage(
	struct soap *soap,
	ns2__message *arg0)
{
	ns2__InsertMessage *_p = ::soap_new_ns2__InsertMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__InsertMessage::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__InsertMessage(struct soap *soap, ns2__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessage", p->soap_type() == SOAP_TYPE_ns2__InsertMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InsertMessage(struct soap *soap, const char *URL, ns2__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessage", p->soap_type() == SOAP_TYPE_ns2__InsertMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InsertMessage(struct soap *soap, const char *URL, ns2__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessage", p->soap_type() == SOAP_TYPE_ns2__InsertMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InsertMessage(struct soap *soap, const char *URL, ns2__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertMessage", p->soap_type() == SOAP_TYPE_ns2__InsertMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InsertMessage * SOAP_FMAC4 soap_get_ns2__InsertMessage(struct soap*, ns2__InsertMessage *, const char*, const char*);

inline int soap_read_ns2__InsertMessage(struct soap *soap, ns2__InsertMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InsertMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InsertMessage(struct soap *soap, const char *URL, ns2__InsertMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InsertMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InsertMessage(struct soap *soap, ns2__InsertMessage *p)
{
	if (::soap_read_ns2__InsertMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateHistoryResponse_DEFINED
#define SOAP_TYPE_ns2__updateHistoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateHistoryResponse(struct soap*, const char*, int, const ns2__updateHistoryResponse *, const char*);
SOAP_FMAC3 ns2__updateHistoryResponse * SOAP_FMAC4 soap_in_ns2__updateHistoryResponse(struct soap*, const char*, ns2__updateHistoryResponse *, const char*);
SOAP_FMAC1 ns2__updateHistoryResponse * SOAP_FMAC2 soap_instantiate_ns2__updateHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateHistoryResponse * soap_new_ns2__updateHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__updateHistoryResponse * soap_new_req_ns2__updateHistoryResponse(
	struct soap *soap)
{
	ns2__updateHistoryResponse *_p = ::soap_new_ns2__updateHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateHistoryResponse * soap_new_set_ns2__updateHistoryResponse(
	struct soap *soap)
{
	ns2__updateHistoryResponse *_p = ::soap_new_ns2__updateHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__updateHistoryResponse(struct soap *soap, ns2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateHistoryResponse(struct soap *soap, const char *URL, ns2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateHistoryResponse(struct soap *soap, const char *URL, ns2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateHistoryResponse(struct soap *soap, const char *URL, ns2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateHistoryResponse * SOAP_FMAC4 soap_get_ns2__updateHistoryResponse(struct soap*, ns2__updateHistoryResponse *, const char*, const char*);

inline int soap_read_ns2__updateHistoryResponse(struct soap *soap, ns2__updateHistoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateHistoryResponse(struct soap *soap, const char *URL, ns2__updateHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateHistoryResponse(struct soap *soap, ns2__updateHistoryResponse *p)
{
	if (::soap_read_ns2__updateHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateHistory_DEFINED
#define SOAP_TYPE_ns2__updateHistory_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateHistory(struct soap*, const char*, int, const ns2__updateHistory *, const char*);
SOAP_FMAC3 ns2__updateHistory * SOAP_FMAC4 soap_in_ns2__updateHistory(struct soap*, const char*, ns2__updateHistory *, const char*);
SOAP_FMAC1 ns2__updateHistory * SOAP_FMAC2 soap_instantiate_ns2__updateHistory(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateHistory * soap_new_ns2__updateHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateHistory(soap, n, NULL, NULL, NULL);
}

inline ns2__updateHistory * soap_new_req_ns2__updateHistory(
	struct soap *soap)
{
	ns2__updateHistory *_p = ::soap_new_ns2__updateHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateHistory * soap_new_set_ns2__updateHistory(
	struct soap *soap,
	ns2__order *arg0)
{
	ns2__updateHistory *_p = ::soap_new_ns2__updateHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateHistory::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__updateHistory(struct soap *soap, ns2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistory", p->soap_type() == SOAP_TYPE_ns2__updateHistory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateHistory(struct soap *soap, const char *URL, ns2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistory", p->soap_type() == SOAP_TYPE_ns2__updateHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateHistory(struct soap *soap, const char *URL, ns2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistory", p->soap_type() == SOAP_TYPE_ns2__updateHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateHistory(struct soap *soap, const char *URL, ns2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateHistory", p->soap_type() == SOAP_TYPE_ns2__updateHistory ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateHistory * SOAP_FMAC4 soap_get_ns2__updateHistory(struct soap*, ns2__updateHistory *, const char*, const char*);

inline int soap_read_ns2__updateHistory(struct soap *soap, ns2__updateHistory *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateHistory(struct soap *soap, const char *URL, ns2__updateHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateHistory(struct soap *soap, ns2__updateHistory *p)
{
	if (::soap_read_ns2__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getReadMessageFromClientResponse_DEFINED
#define SOAP_TYPE_ns2__getReadMessageFromClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getReadMessageFromClientResponse(struct soap*, const char*, int, const ns2__getReadMessageFromClientResponse *, const char*);
SOAP_FMAC3 ns2__getReadMessageFromClientResponse * SOAP_FMAC4 soap_in_ns2__getReadMessageFromClientResponse(struct soap*, const char*, ns2__getReadMessageFromClientResponse *, const char*);
SOAP_FMAC1 ns2__getReadMessageFromClientResponse * SOAP_FMAC2 soap_instantiate_ns2__getReadMessageFromClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getReadMessageFromClientResponse * soap_new_ns2__getReadMessageFromClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getReadMessageFromClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getReadMessageFromClientResponse * soap_new_req_ns2__getReadMessageFromClientResponse(
	struct soap *soap)
{
	ns2__getReadMessageFromClientResponse *_p = ::soap_new_ns2__getReadMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getReadMessageFromClientResponse * soap_new_set_ns2__getReadMessageFromClientResponse(
	struct soap *soap,
	const std::vector<ns2__message *> & return_)
{
	ns2__getReadMessageFromClientResponse *_p = ::soap_new_ns2__getReadMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getReadMessageFromClientResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getReadMessageFromClientResponse(struct soap *soap, ns2__getReadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getReadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getReadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getReadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getReadMessageFromClientResponse * SOAP_FMAC4 soap_get_ns2__getReadMessageFromClientResponse(struct soap*, ns2__getReadMessageFromClientResponse *, const char*, const char*);

inline int soap_read_ns2__getReadMessageFromClientResponse(struct soap *soap, ns2__getReadMessageFromClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getReadMessageFromClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getReadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getReadMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getReadMessageFromClientResponse(struct soap *soap, ns2__getReadMessageFromClientResponse *p)
{
	if (::soap_read_ns2__getReadMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getReadMessageFromClient_DEFINED
#define SOAP_TYPE_ns2__getReadMessageFromClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getReadMessageFromClient(struct soap*, const char*, int, const ns2__getReadMessageFromClient *, const char*);
SOAP_FMAC3 ns2__getReadMessageFromClient * SOAP_FMAC4 soap_in_ns2__getReadMessageFromClient(struct soap*, const char*, ns2__getReadMessageFromClient *, const char*);
SOAP_FMAC1 ns2__getReadMessageFromClient * SOAP_FMAC2 soap_instantiate_ns2__getReadMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getReadMessageFromClient * soap_new_ns2__getReadMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getReadMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline ns2__getReadMessageFromClient * soap_new_req_ns2__getReadMessageFromClient(
	struct soap *soap)
{
	ns2__getReadMessageFromClient *_p = ::soap_new_ns2__getReadMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getReadMessageFromClient * soap_new_set_ns2__getReadMessageFromClient(
	struct soap *soap,
	ns2__shop *arg0)
{
	ns2__getReadMessageFromClient *_p = ::soap_new_ns2__getReadMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getReadMessageFromClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getReadMessageFromClient(struct soap *soap, ns2__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getReadMessageFromClient(struct soap *soap, const char *URL, ns2__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getReadMessageFromClient(struct soap *soap, const char *URL, ns2__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getReadMessageFromClient(struct soap *soap, const char *URL, ns2__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getReadMessageFromClient * SOAP_FMAC4 soap_get_ns2__getReadMessageFromClient(struct soap*, ns2__getReadMessageFromClient *, const char*, const char*);

inline int soap_read_ns2__getReadMessageFromClient(struct soap *soap, ns2__getReadMessageFromClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getReadMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getReadMessageFromClient(struct soap *soap, const char *URL, ns2__getReadMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getReadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getReadMessageFromClient(struct soap *soap, ns2__getReadMessageFromClient *p)
{
	if (::soap_read_ns2__getReadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderListHistoryResponse_DEFINED
#define SOAP_TYPE_ns2__getOrderListHistoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderListHistoryResponse(struct soap*, const char*, int, const ns2__getOrderListHistoryResponse *, const char*);
SOAP_FMAC3 ns2__getOrderListHistoryResponse * SOAP_FMAC4 soap_in_ns2__getOrderListHistoryResponse(struct soap*, const char*, ns2__getOrderListHistoryResponse *, const char*);
SOAP_FMAC1 ns2__getOrderListHistoryResponse * SOAP_FMAC2 soap_instantiate_ns2__getOrderListHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderListHistoryResponse * soap_new_ns2__getOrderListHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderListHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderListHistoryResponse * soap_new_req_ns2__getOrderListHistoryResponse(
	struct soap *soap)
{
	ns2__getOrderListHistoryResponse *_p = ::soap_new_ns2__getOrderListHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderListHistoryResponse * soap_new_set_ns2__getOrderListHistoryResponse(
	struct soap *soap,
	const std::vector<ns2__order *> & return_)
{
	ns2__getOrderListHistoryResponse *_p = ::soap_new_ns2__getOrderListHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderListHistoryResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getOrderListHistoryResponse(struct soap *soap, ns2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderListHistoryResponse(struct soap *soap, const char *URL, ns2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderListHistoryResponse(struct soap *soap, const char *URL, ns2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderListHistoryResponse(struct soap *soap, const char *URL, ns2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderListHistoryResponse * SOAP_FMAC4 soap_get_ns2__getOrderListHistoryResponse(struct soap*, ns2__getOrderListHistoryResponse *, const char*, const char*);

inline int soap_read_ns2__getOrderListHistoryResponse(struct soap *soap, ns2__getOrderListHistoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderListHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderListHistoryResponse(struct soap *soap, const char *URL, ns2__getOrderListHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderListHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderListHistoryResponse(struct soap *soap, ns2__getOrderListHistoryResponse *p)
{
	if (::soap_read_ns2__getOrderListHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderListHistory_DEFINED
#define SOAP_TYPE_ns2__getOrderListHistory_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderListHistory(struct soap*, const char*, int, const ns2__getOrderListHistory *, const char*);
SOAP_FMAC3 ns2__getOrderListHistory * SOAP_FMAC4 soap_in_ns2__getOrderListHistory(struct soap*, const char*, ns2__getOrderListHistory *, const char*);
SOAP_FMAC1 ns2__getOrderListHistory * SOAP_FMAC2 soap_instantiate_ns2__getOrderListHistory(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderListHistory * soap_new_ns2__getOrderListHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderListHistory(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderListHistory * soap_new_req_ns2__getOrderListHistory(
	struct soap *soap)
{
	ns2__getOrderListHistory *_p = ::soap_new_ns2__getOrderListHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderListHistory * soap_new_set_ns2__getOrderListHistory(
	struct soap *soap)
{
	ns2__getOrderListHistory *_p = ::soap_new_ns2__getOrderListHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__getOrderListHistory(struct soap *soap, ns2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistory", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderListHistory(struct soap *soap, const char *URL, ns2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistory", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderListHistory(struct soap *soap, const char *URL, ns2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistory", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderListHistory(struct soap *soap, const char *URL, ns2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListHistory", p->soap_type() == SOAP_TYPE_ns2__getOrderListHistory ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderListHistory * SOAP_FMAC4 soap_get_ns2__getOrderListHistory(struct soap*, ns2__getOrderListHistory *, const char*, const char*);

inline int soap_read_ns2__getOrderListHistory(struct soap *soap, ns2__getOrderListHistory *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderListHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderListHistory(struct soap *soap, const char *URL, ns2__getOrderListHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderListHistory(struct soap *soap, ns2__getOrderListHistory *p)
{
	if (::soap_read_ns2__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductListResponse_DEFINED
#define SOAP_TYPE_ns2__getProductListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductListResponse(struct soap*, const char*, int, const ns2__getProductListResponse *, const char*);
SOAP_FMAC3 ns2__getProductListResponse * SOAP_FMAC4 soap_in_ns2__getProductListResponse(struct soap*, const char*, ns2__getProductListResponse *, const char*);
SOAP_FMAC1 ns2__getProductListResponse * SOAP_FMAC2 soap_instantiate_ns2__getProductListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductListResponse * soap_new_ns2__getProductListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductListResponse * soap_new_req_ns2__getProductListResponse(
	struct soap *soap)
{
	ns2__getProductListResponse *_p = ::soap_new_ns2__getProductListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductListResponse * soap_new_set_ns2__getProductListResponse(
	struct soap *soap,
	const std::vector<ns2__product *> & return_)
{
	ns2__getProductListResponse *_p = ::soap_new_ns2__getProductListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getProductListResponse(struct soap *soap, ns2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductListResponse(struct soap *soap, const char *URL, ns2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductListResponse(struct soap *soap, const char *URL, ns2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductListResponse(struct soap *soap, const char *URL, ns2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductListResponse * SOAP_FMAC4 soap_get_ns2__getProductListResponse(struct soap*, ns2__getProductListResponse *, const char*, const char*);

inline int soap_read_ns2__getProductListResponse(struct soap *soap, ns2__getProductListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductListResponse(struct soap *soap, const char *URL, ns2__getProductListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductListResponse(struct soap *soap, ns2__getProductListResponse *p)
{
	if (::soap_read_ns2__getProductListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductList_DEFINED
#define SOAP_TYPE_ns2__getProductList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductList(struct soap*, const char*, int, const ns2__getProductList *, const char*);
SOAP_FMAC3 ns2__getProductList * SOAP_FMAC4 soap_in_ns2__getProductList(struct soap*, const char*, ns2__getProductList *, const char*);
SOAP_FMAC1 ns2__getProductList * SOAP_FMAC2 soap_instantiate_ns2__getProductList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductList * soap_new_ns2__getProductList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductList(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductList * soap_new_req_ns2__getProductList(
	struct soap *soap,
	int arg0,
	int arg1)
{
	ns2__getProductList *_p = ::soap_new_ns2__getProductList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductList::arg0 = arg0;
		_p->ns2__getProductList::arg1 = arg1;
	}
	return _p;
}

inline ns2__getProductList * soap_new_set_ns2__getProductList(
	struct soap *soap,
	int arg0,
	int arg1)
{
	ns2__getProductList *_p = ::soap_new_ns2__getProductList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductList::arg0 = arg0;
		_p->ns2__getProductList::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__getProductList(struct soap *soap, ns2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductList", p->soap_type() == SOAP_TYPE_ns2__getProductList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductList(struct soap *soap, const char *URL, ns2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductList", p->soap_type() == SOAP_TYPE_ns2__getProductList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductList(struct soap *soap, const char *URL, ns2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductList", p->soap_type() == SOAP_TYPE_ns2__getProductList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductList(struct soap *soap, const char *URL, ns2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductList", p->soap_type() == SOAP_TYPE_ns2__getProductList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductList * SOAP_FMAC4 soap_get_ns2__getProductList(struct soap*, ns2__getProductList *, const char*, const char*);

inline int soap_read_ns2__getProductList(struct soap *soap, ns2__getProductList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductList(struct soap *soap, const char *URL, ns2__getProductList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductList(struct soap *soap, ns2__getProductList *p)
{
	if (::soap_read_ns2__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse_DEFINED
#define SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteShopByNameAndPwdResponse(struct soap*, const char*, int, const ns2__deleteShopByNameAndPwdResponse *, const char*);
SOAP_FMAC3 ns2__deleteShopByNameAndPwdResponse * SOAP_FMAC4 soap_in_ns2__deleteShopByNameAndPwdResponse(struct soap*, const char*, ns2__deleteShopByNameAndPwdResponse *, const char*);
SOAP_FMAC1 ns2__deleteShopByNameAndPwdResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteShopByNameAndPwdResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteShopByNameAndPwdResponse * soap_new_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteShopByNameAndPwdResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteShopByNameAndPwdResponse * soap_new_req_ns2__deleteShopByNameAndPwdResponse(
	struct soap *soap)
{
	ns2__deleteShopByNameAndPwdResponse *_p = ::soap_new_ns2__deleteShopByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteShopByNameAndPwdResponse * soap_new_set_ns2__deleteShopByNameAndPwdResponse(
	struct soap *soap)
{
	ns2__deleteShopByNameAndPwdResponse *_p = ::soap_new_ns2__deleteShopByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, ns2__deleteShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteShopByNameAndPwdResponse * SOAP_FMAC4 soap_get_ns2__deleteShopByNameAndPwdResponse(struct soap*, ns2__deleteShopByNameAndPwdResponse *, const char*, const char*);

inline int soap_read_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, ns2__deleteShopByNameAndPwdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteShopByNameAndPwdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteShopByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteShopByNameAndPwdResponse(struct soap *soap, ns2__deleteShopByNameAndPwdResponse *p)
{
	if (::soap_read_ns2__deleteShopByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteShopByNameAndPwd_DEFINED
#define SOAP_TYPE_ns2__deleteShopByNameAndPwd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteShopByNameAndPwd(struct soap*, const char*, int, const ns2__deleteShopByNameAndPwd *, const char*);
SOAP_FMAC3 ns2__deleteShopByNameAndPwd * SOAP_FMAC4 soap_in_ns2__deleteShopByNameAndPwd(struct soap*, const char*, ns2__deleteShopByNameAndPwd *, const char*);
SOAP_FMAC1 ns2__deleteShopByNameAndPwd * SOAP_FMAC2 soap_instantiate_ns2__deleteShopByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteShopByNameAndPwd * soap_new_ns2__deleteShopByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteShopByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteShopByNameAndPwd * soap_new_req_ns2__deleteShopByNameAndPwd(
	struct soap *soap)
{
	ns2__deleteShopByNameAndPwd *_p = ::soap_new_ns2__deleteShopByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteShopByNameAndPwd * soap_new_set_ns2__deleteShopByNameAndPwd(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	ns2__deleteShopByNameAndPwd *_p = ::soap_new_ns2__deleteShopByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteShopByNameAndPwd::arg0 = arg0;
		_p->ns2__deleteShopByNameAndPwd::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__deleteShopByNameAndPwd(struct soap *soap, ns2__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteShopByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteShopByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteShopByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteShopByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteShopByNameAndPwd * SOAP_FMAC4 soap_get_ns2__deleteShopByNameAndPwd(struct soap*, ns2__deleteShopByNameAndPwd *, const char*, const char*);

inline int soap_read_ns2__deleteShopByNameAndPwd(struct soap *soap, ns2__deleteShopByNameAndPwd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteShopByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteShopByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteShopByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteShopByNameAndPwd(struct soap *soap, ns2__deleteShopByNameAndPwd *p)
{
	if (::soap_read_ns2__deleteShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__addOrderResponse_DEFINED
#define SOAP_TYPE_ns2__addOrderResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addOrderResponse(struct soap*, const char*, int, const ns2__addOrderResponse *, const char*);
SOAP_FMAC3 ns2__addOrderResponse * SOAP_FMAC4 soap_in_ns2__addOrderResponse(struct soap*, const char*, ns2__addOrderResponse *, const char*);
SOAP_FMAC1 ns2__addOrderResponse * SOAP_FMAC2 soap_instantiate_ns2__addOrderResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__addOrderResponse * soap_new_ns2__addOrderResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__addOrderResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__addOrderResponse * soap_new_req_ns2__addOrderResponse(
	struct soap *soap)
{
	ns2__addOrderResponse *_p = ::soap_new_ns2__addOrderResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__addOrderResponse * soap_new_set_ns2__addOrderResponse(
	struct soap *soap)
{
	ns2__addOrderResponse *_p = ::soap_new_ns2__addOrderResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__addOrderResponse(struct soap *soap, ns2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrderResponse", p->soap_type() == SOAP_TYPE_ns2__addOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__addOrderResponse(struct soap *soap, const char *URL, ns2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrderResponse", p->soap_type() == SOAP_TYPE_ns2__addOrderResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__addOrderResponse(struct soap *soap, const char *URL, ns2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrderResponse", p->soap_type() == SOAP_TYPE_ns2__addOrderResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__addOrderResponse(struct soap *soap, const char *URL, ns2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrderResponse", p->soap_type() == SOAP_TYPE_ns2__addOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__addOrderResponse * SOAP_FMAC4 soap_get_ns2__addOrderResponse(struct soap*, ns2__addOrderResponse *, const char*, const char*);

inline int soap_read_ns2__addOrderResponse(struct soap *soap, ns2__addOrderResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__addOrderResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__addOrderResponse(struct soap *soap, const char *URL, ns2__addOrderResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__addOrderResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__addOrderResponse(struct soap *soap, ns2__addOrderResponse *p)
{
	if (::soap_read_ns2__addOrderResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__addOrder_DEFINED
#define SOAP_TYPE_ns2__addOrder_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addOrder(struct soap*, const char*, int, const ns2__addOrder *, const char*);
SOAP_FMAC3 ns2__addOrder * SOAP_FMAC4 soap_in_ns2__addOrder(struct soap*, const char*, ns2__addOrder *, const char*);
SOAP_FMAC1 ns2__addOrder * SOAP_FMAC2 soap_instantiate_ns2__addOrder(struct soap*, int, const char*, const char*, size_t*);

inline ns2__addOrder * soap_new_ns2__addOrder(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__addOrder(soap, n, NULL, NULL, NULL);
}

inline ns2__addOrder * soap_new_req_ns2__addOrder(
	struct soap *soap)
{
	ns2__addOrder *_p = ::soap_new_ns2__addOrder(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__addOrder * soap_new_set_ns2__addOrder(
	struct soap *soap,
	ns2__order *arg0)
{
	ns2__addOrder *_p = ::soap_new_ns2__addOrder(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__addOrder::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__addOrder(struct soap *soap, ns2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrder", p->soap_type() == SOAP_TYPE_ns2__addOrder ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__addOrder(struct soap *soap, const char *URL, ns2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrder", p->soap_type() == SOAP_TYPE_ns2__addOrder ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__addOrder(struct soap *soap, const char *URL, ns2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrder", p->soap_type() == SOAP_TYPE_ns2__addOrder ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__addOrder(struct soap *soap, const char *URL, ns2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addOrder", p->soap_type() == SOAP_TYPE_ns2__addOrder ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__addOrder * SOAP_FMAC4 soap_get_ns2__addOrder(struct soap*, ns2__addOrder *, const char*, const char*);

inline int soap_read_ns2__addOrder(struct soap *soap, ns2__addOrder *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__addOrder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__addOrder(struct soap *soap, const char *URL, ns2__addOrder *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__addOrder(struct soap *soap, ns2__addOrder *p)
{
	if (::soap_read_ns2__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getMessageFromClientResponse_DEFINED
#define SOAP_TYPE_ns2__getMessageFromClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getMessageFromClientResponse(struct soap*, const char*, int, const ns2__getMessageFromClientResponse *, const char*);
SOAP_FMAC3 ns2__getMessageFromClientResponse * SOAP_FMAC4 soap_in_ns2__getMessageFromClientResponse(struct soap*, const char*, ns2__getMessageFromClientResponse *, const char*);
SOAP_FMAC1 ns2__getMessageFromClientResponse * SOAP_FMAC2 soap_instantiate_ns2__getMessageFromClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getMessageFromClientResponse * soap_new_ns2__getMessageFromClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getMessageFromClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getMessageFromClientResponse * soap_new_req_ns2__getMessageFromClientResponse(
	struct soap *soap)
{
	ns2__getMessageFromClientResponse *_p = ::soap_new_ns2__getMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getMessageFromClientResponse * soap_new_set_ns2__getMessageFromClientResponse(
	struct soap *soap,
	const std::vector<ns2__message *> & return_)
{
	ns2__getMessageFromClientResponse *_p = ::soap_new_ns2__getMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getMessageFromClientResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getMessageFromClientResponse(struct soap *soap, ns2__getMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getMessageFromClientResponse * SOAP_FMAC4 soap_get_ns2__getMessageFromClientResponse(struct soap*, ns2__getMessageFromClientResponse *, const char*, const char*);

inline int soap_read_ns2__getMessageFromClientResponse(struct soap *soap, ns2__getMessageFromClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getMessageFromClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getMessageFromClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getMessageFromClientResponse(struct soap *soap, ns2__getMessageFromClientResponse *p)
{
	if (::soap_read_ns2__getMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getMessageFromClient_DEFINED
#define SOAP_TYPE_ns2__getMessageFromClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getMessageFromClient(struct soap*, const char*, int, const ns2__getMessageFromClient *, const char*);
SOAP_FMAC3 ns2__getMessageFromClient * SOAP_FMAC4 soap_in_ns2__getMessageFromClient(struct soap*, const char*, ns2__getMessageFromClient *, const char*);
SOAP_FMAC1 ns2__getMessageFromClient * SOAP_FMAC2 soap_instantiate_ns2__getMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getMessageFromClient * soap_new_ns2__getMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline ns2__getMessageFromClient * soap_new_req_ns2__getMessageFromClient(
	struct soap *soap)
{
	ns2__getMessageFromClient *_p = ::soap_new_ns2__getMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getMessageFromClient * soap_new_set_ns2__getMessageFromClient(
	struct soap *soap,
	ns2__shop *arg0)
{
	ns2__getMessageFromClient *_p = ::soap_new_ns2__getMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getMessageFromClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getMessageFromClient(struct soap *soap, ns2__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getMessageFromClient(struct soap *soap, const char *URL, ns2__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getMessageFromClient(struct soap *soap, const char *URL, ns2__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getMessageFromClient(struct soap *soap, const char *URL, ns2__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getMessageFromClient * SOAP_FMAC4 soap_get_ns2__getMessageFromClient(struct soap*, ns2__getMessageFromClient *, const char*, const char*);

inline int soap_read_ns2__getMessageFromClient(struct soap *soap, ns2__getMessageFromClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getMessageFromClient(struct soap *soap, const char *URL, ns2__getMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getMessageFromClient(struct soap *soap, ns2__getMessageFromClient *p)
{
	if (::soap_read_ns2__getMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateProductByInfoResponse_DEFINED
#define SOAP_TYPE_ns2__updateProductByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateProductByInfoResponse(struct soap*, const char*, int, const ns2__updateProductByInfoResponse *, const char*);
SOAP_FMAC3 ns2__updateProductByInfoResponse * SOAP_FMAC4 soap_in_ns2__updateProductByInfoResponse(struct soap*, const char*, ns2__updateProductByInfoResponse *, const char*);
SOAP_FMAC1 ns2__updateProductByInfoResponse * SOAP_FMAC2 soap_instantiate_ns2__updateProductByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateProductByInfoResponse * soap_new_ns2__updateProductByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateProductByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__updateProductByInfoResponse * soap_new_req_ns2__updateProductByInfoResponse(
	struct soap *soap)
{
	ns2__updateProductByInfoResponse *_p = ::soap_new_ns2__updateProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateProductByInfoResponse * soap_new_set_ns2__updateProductByInfoResponse(
	struct soap *soap)
{
	ns2__updateProductByInfoResponse *_p = ::soap_new_ns2__updateProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__updateProductByInfoResponse(struct soap *soap, ns2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateProductByInfoResponse(struct soap *soap, const char *URL, ns2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateProductByInfoResponse(struct soap *soap, const char *URL, ns2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateProductByInfoResponse(struct soap *soap, const char *URL, ns2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateProductByInfoResponse * SOAP_FMAC4 soap_get_ns2__updateProductByInfoResponse(struct soap*, ns2__updateProductByInfoResponse *, const char*, const char*);

inline int soap_read_ns2__updateProductByInfoResponse(struct soap *soap, ns2__updateProductByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateProductByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateProductByInfoResponse(struct soap *soap, const char *URL, ns2__updateProductByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateProductByInfoResponse(struct soap *soap, ns2__updateProductByInfoResponse *p)
{
	if (::soap_read_ns2__updateProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateProductByInfo_DEFINED
#define SOAP_TYPE_ns2__updateProductByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateProductByInfo(struct soap*, const char*, int, const ns2__updateProductByInfo *, const char*);
SOAP_FMAC3 ns2__updateProductByInfo * SOAP_FMAC4 soap_in_ns2__updateProductByInfo(struct soap*, const char*, ns2__updateProductByInfo *, const char*);
SOAP_FMAC1 ns2__updateProductByInfo * SOAP_FMAC2 soap_instantiate_ns2__updateProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateProductByInfo * soap_new_ns2__updateProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateProductByInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__updateProductByInfo * soap_new_req_ns2__updateProductByInfo(
	struct soap *soap)
{
	ns2__updateProductByInfo *_p = ::soap_new_ns2__updateProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateProductByInfo * soap_new_set_ns2__updateProductByInfo(
	struct soap *soap,
	ns2__product *arg0)
{
	ns2__updateProductByInfo *_p = ::soap_new_ns2__updateProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateProductByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__updateProductByInfo(struct soap *soap, ns2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfo", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateProductByInfo(struct soap *soap, const char *URL, ns2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfo", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateProductByInfo(struct soap *soap, const char *URL, ns2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfo", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateProductByInfo(struct soap *soap, const char *URL, ns2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateProductByInfo", p->soap_type() == SOAP_TYPE_ns2__updateProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateProductByInfo * SOAP_FMAC4 soap_get_ns2__updateProductByInfo(struct soap*, ns2__updateProductByInfo *, const char*, const char*);

inline int soap_read_ns2__updateProductByInfo(struct soap *soap, ns2__updateProductByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateProductByInfo(struct soap *soap, const char *URL, ns2__updateProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateProductByInfo(struct soap *soap, ns2__updateProductByInfo *p)
{
	if (::soap_read_ns2__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getUnreadMessageFromClientResponse_DEFINED
#define SOAP_TYPE_ns2__getUnreadMessageFromClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getUnreadMessageFromClientResponse(struct soap*, const char*, int, const ns2__getUnreadMessageFromClientResponse *, const char*);
SOAP_FMAC3 ns2__getUnreadMessageFromClientResponse * SOAP_FMAC4 soap_in_ns2__getUnreadMessageFromClientResponse(struct soap*, const char*, ns2__getUnreadMessageFromClientResponse *, const char*);
SOAP_FMAC1 ns2__getUnreadMessageFromClientResponse * SOAP_FMAC2 soap_instantiate_ns2__getUnreadMessageFromClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getUnreadMessageFromClientResponse * soap_new_ns2__getUnreadMessageFromClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getUnreadMessageFromClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getUnreadMessageFromClientResponse * soap_new_req_ns2__getUnreadMessageFromClientResponse(
	struct soap *soap)
{
	ns2__getUnreadMessageFromClientResponse *_p = ::soap_new_ns2__getUnreadMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getUnreadMessageFromClientResponse * soap_new_set_ns2__getUnreadMessageFromClientResponse(
	struct soap *soap,
	const std::vector<ns2__message *> & return_)
{
	ns2__getUnreadMessageFromClientResponse *_p = ::soap_new_ns2__getUnreadMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getUnreadMessageFromClientResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getUnreadMessageFromClientResponse(struct soap *soap, ns2__getUnreadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getUnreadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getUnreadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getUnreadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getUnreadMessageFromClientResponse * SOAP_FMAC4 soap_get_ns2__getUnreadMessageFromClientResponse(struct soap*, ns2__getUnreadMessageFromClientResponse *, const char*, const char*);

inline int soap_read_ns2__getUnreadMessageFromClientResponse(struct soap *soap, ns2__getUnreadMessageFromClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getUnreadMessageFromClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getUnreadMessageFromClientResponse(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getUnreadMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getUnreadMessageFromClientResponse(struct soap *soap, ns2__getUnreadMessageFromClientResponse *p)
{
	if (::soap_read_ns2__getUnreadMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getUnreadMessageFromClient_DEFINED
#define SOAP_TYPE_ns2__getUnreadMessageFromClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getUnreadMessageFromClient(struct soap*, const char*, int, const ns2__getUnreadMessageFromClient *, const char*);
SOAP_FMAC3 ns2__getUnreadMessageFromClient * SOAP_FMAC4 soap_in_ns2__getUnreadMessageFromClient(struct soap*, const char*, ns2__getUnreadMessageFromClient *, const char*);
SOAP_FMAC1 ns2__getUnreadMessageFromClient * SOAP_FMAC2 soap_instantiate_ns2__getUnreadMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getUnreadMessageFromClient * soap_new_ns2__getUnreadMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getUnreadMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline ns2__getUnreadMessageFromClient * soap_new_req_ns2__getUnreadMessageFromClient(
	struct soap *soap)
{
	ns2__getUnreadMessageFromClient *_p = ::soap_new_ns2__getUnreadMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getUnreadMessageFromClient * soap_new_set_ns2__getUnreadMessageFromClient(
	struct soap *soap,
	ns2__shop *arg0)
{
	ns2__getUnreadMessageFromClient *_p = ::soap_new_ns2__getUnreadMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getUnreadMessageFromClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getUnreadMessageFromClient(struct soap *soap, ns2__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getUnreadMessageFromClient(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getUnreadMessageFromClient(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getUnreadMessageFromClient(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getUnreadMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__getUnreadMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getUnreadMessageFromClient * SOAP_FMAC4 soap_get_ns2__getUnreadMessageFromClient(struct soap*, ns2__getUnreadMessageFromClient *, const char*, const char*);

inline int soap_read_ns2__getUnreadMessageFromClient(struct soap *soap, ns2__getUnreadMessageFromClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getUnreadMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getUnreadMessageFromClient(struct soap *soap, const char *URL, ns2__getUnreadMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getUnreadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getUnreadMessageFromClient(struct soap *soap, ns2__getUnreadMessageFromClient *p)
{
	if (::soap_read_ns2__getUnreadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateMessageFromClientResponse_DEFINED
#define SOAP_TYPE_ns2__updateMessageFromClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateMessageFromClientResponse(struct soap*, const char*, int, const ns2__updateMessageFromClientResponse *, const char*);
SOAP_FMAC3 ns2__updateMessageFromClientResponse * SOAP_FMAC4 soap_in_ns2__updateMessageFromClientResponse(struct soap*, const char*, ns2__updateMessageFromClientResponse *, const char*);
SOAP_FMAC1 ns2__updateMessageFromClientResponse * SOAP_FMAC2 soap_instantiate_ns2__updateMessageFromClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateMessageFromClientResponse * soap_new_ns2__updateMessageFromClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateMessageFromClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__updateMessageFromClientResponse * soap_new_req_ns2__updateMessageFromClientResponse(
	struct soap *soap)
{
	ns2__updateMessageFromClientResponse *_p = ::soap_new_ns2__updateMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateMessageFromClientResponse * soap_new_set_ns2__updateMessageFromClientResponse(
	struct soap *soap)
{
	ns2__updateMessageFromClientResponse *_p = ::soap_new_ns2__updateMessageFromClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__updateMessageFromClientResponse(struct soap *soap, ns2__updateMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateMessageFromClientResponse(struct soap *soap, const char *URL, ns2__updateMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateMessageFromClientResponse(struct soap *soap, const char *URL, ns2__updateMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateMessageFromClientResponse(struct soap *soap, const char *URL, ns2__updateMessageFromClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateMessageFromClientResponse * SOAP_FMAC4 soap_get_ns2__updateMessageFromClientResponse(struct soap*, ns2__updateMessageFromClientResponse *, const char*, const char*);

inline int soap_read_ns2__updateMessageFromClientResponse(struct soap *soap, ns2__updateMessageFromClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateMessageFromClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateMessageFromClientResponse(struct soap *soap, const char *URL, ns2__updateMessageFromClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateMessageFromClientResponse(struct soap *soap, ns2__updateMessageFromClientResponse *p)
{
	if (::soap_read_ns2__updateMessageFromClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateMessageFromClient_DEFINED
#define SOAP_TYPE_ns2__updateMessageFromClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateMessageFromClient(struct soap*, const char*, int, const ns2__updateMessageFromClient *, const char*);
SOAP_FMAC3 ns2__updateMessageFromClient * SOAP_FMAC4 soap_in_ns2__updateMessageFromClient(struct soap*, const char*, ns2__updateMessageFromClient *, const char*);
SOAP_FMAC1 ns2__updateMessageFromClient * SOAP_FMAC2 soap_instantiate_ns2__updateMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateMessageFromClient * soap_new_ns2__updateMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline ns2__updateMessageFromClient * soap_new_req_ns2__updateMessageFromClient(
	struct soap *soap,
	int arg1)
{
	ns2__updateMessageFromClient *_p = ::soap_new_ns2__updateMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateMessageFromClient::arg1 = arg1;
	}
	return _p;
}

inline ns2__updateMessageFromClient * soap_new_set_ns2__updateMessageFromClient(
	struct soap *soap,
	ns2__message *arg0,
	int arg1)
{
	ns2__updateMessageFromClient *_p = ::soap_new_ns2__updateMessageFromClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateMessageFromClient::arg0 = arg0;
		_p->ns2__updateMessageFromClient::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__updateMessageFromClient(struct soap *soap, ns2__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateMessageFromClient(struct soap *soap, const char *URL, ns2__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateMessageFromClient(struct soap *soap, const char *URL, ns2__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateMessageFromClient(struct soap *soap, const char *URL, ns2__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromClient", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateMessageFromClient * SOAP_FMAC4 soap_get_ns2__updateMessageFromClient(struct soap*, ns2__updateMessageFromClient *, const char*, const char*);

inline int soap_read_ns2__updateMessageFromClient(struct soap *soap, ns2__updateMessageFromClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateMessageFromClient(struct soap *soap, const char *URL, ns2__updateMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateMessageFromClient(struct soap *soap, ns2__updateMessageFromClient *p)
{
	if (::soap_read_ns2__updateMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__purchaseProductResponse_DEFINED
#define SOAP_TYPE_ns2__purchaseProductResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__purchaseProductResponse(struct soap*, const char*, int, const ns2__purchaseProductResponse *, const char*);
SOAP_FMAC3 ns2__purchaseProductResponse * SOAP_FMAC4 soap_in_ns2__purchaseProductResponse(struct soap*, const char*, ns2__purchaseProductResponse *, const char*);
SOAP_FMAC1 ns2__purchaseProductResponse * SOAP_FMAC2 soap_instantiate_ns2__purchaseProductResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__purchaseProductResponse * soap_new_ns2__purchaseProductResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__purchaseProductResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__purchaseProductResponse * soap_new_req_ns2__purchaseProductResponse(
	struct soap *soap)
{
	ns2__purchaseProductResponse *_p = ::soap_new_ns2__purchaseProductResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__purchaseProductResponse * soap_new_set_ns2__purchaseProductResponse(
	struct soap *soap,
	std::string *return_)
{
	ns2__purchaseProductResponse *_p = ::soap_new_ns2__purchaseProductResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__purchaseProductResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__purchaseProductResponse(struct soap *soap, ns2__purchaseProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProductResponse", p->soap_type() == SOAP_TYPE_ns2__purchaseProductResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__purchaseProductResponse(struct soap *soap, const char *URL, ns2__purchaseProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProductResponse", p->soap_type() == SOAP_TYPE_ns2__purchaseProductResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__purchaseProductResponse(struct soap *soap, const char *URL, ns2__purchaseProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProductResponse", p->soap_type() == SOAP_TYPE_ns2__purchaseProductResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__purchaseProductResponse(struct soap *soap, const char *URL, ns2__purchaseProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProductResponse", p->soap_type() == SOAP_TYPE_ns2__purchaseProductResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__purchaseProductResponse * SOAP_FMAC4 soap_get_ns2__purchaseProductResponse(struct soap*, ns2__purchaseProductResponse *, const char*, const char*);

inline int soap_read_ns2__purchaseProductResponse(struct soap *soap, ns2__purchaseProductResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__purchaseProductResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__purchaseProductResponse(struct soap *soap, const char *URL, ns2__purchaseProductResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__purchaseProductResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__purchaseProductResponse(struct soap *soap, ns2__purchaseProductResponse *p)
{
	if (::soap_read_ns2__purchaseProductResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__purchaseProduct_DEFINED
#define SOAP_TYPE_ns2__purchaseProduct_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__purchaseProduct(struct soap*, const char*, int, const ns2__purchaseProduct *, const char*);
SOAP_FMAC3 ns2__purchaseProduct * SOAP_FMAC4 soap_in_ns2__purchaseProduct(struct soap*, const char*, ns2__purchaseProduct *, const char*);
SOAP_FMAC1 ns2__purchaseProduct * SOAP_FMAC2 soap_instantiate_ns2__purchaseProduct(struct soap*, int, const char*, const char*, size_t*);

inline ns2__purchaseProduct * soap_new_ns2__purchaseProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__purchaseProduct(soap, n, NULL, NULL, NULL);
}

inline ns2__purchaseProduct * soap_new_req_ns2__purchaseProduct(
	struct soap *soap)
{
	ns2__purchaseProduct *_p = ::soap_new_ns2__purchaseProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__purchaseProduct * soap_new_set_ns2__purchaseProduct(
	struct soap *soap,
	ns2__order *arg0)
{
	ns2__purchaseProduct *_p = ::soap_new_ns2__purchaseProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__purchaseProduct::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__purchaseProduct(struct soap *soap, ns2__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProduct", p->soap_type() == SOAP_TYPE_ns2__purchaseProduct ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__purchaseProduct(struct soap *soap, const char *URL, ns2__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProduct", p->soap_type() == SOAP_TYPE_ns2__purchaseProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__purchaseProduct(struct soap *soap, const char *URL, ns2__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProduct", p->soap_type() == SOAP_TYPE_ns2__purchaseProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__purchaseProduct(struct soap *soap, const char *URL, ns2__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:purchaseProduct", p->soap_type() == SOAP_TYPE_ns2__purchaseProduct ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__purchaseProduct * SOAP_FMAC4 soap_get_ns2__purchaseProduct(struct soap*, ns2__purchaseProduct *, const char*, const char*);

inline int soap_read_ns2__purchaseProduct(struct soap *soap, ns2__purchaseProduct *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__purchaseProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__purchaseProduct(struct soap *soap, const char *URL, ns2__purchaseProduct *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__purchaseProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__purchaseProduct(struct soap *soap, ns2__purchaseProduct *p)
{
	if (::soap_read_ns2__purchaseProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getClientListResponse_DEFINED
#define SOAP_TYPE_ns2__getClientListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClientListResponse(struct soap*, const char*, int, const ns2__getClientListResponse *, const char*);
SOAP_FMAC3 ns2__getClientListResponse * SOAP_FMAC4 soap_in_ns2__getClientListResponse(struct soap*, const char*, ns2__getClientListResponse *, const char*);
SOAP_FMAC1 ns2__getClientListResponse * SOAP_FMAC2 soap_instantiate_ns2__getClientListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getClientListResponse * soap_new_ns2__getClientListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getClientListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getClientListResponse * soap_new_req_ns2__getClientListResponse(
	struct soap *soap)
{
	ns2__getClientListResponse *_p = ::soap_new_ns2__getClientListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getClientListResponse * soap_new_set_ns2__getClientListResponse(
	struct soap *soap,
	const std::vector<ns2__client *> & return_)
{
	ns2__getClientListResponse *_p = ::soap_new_ns2__getClientListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getClientListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getClientListResponse(struct soap *soap, ns2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getClientListResponse(struct soap *soap, const char *URL, ns2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getClientListResponse(struct soap *soap, const char *URL, ns2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getClientListResponse(struct soap *soap, const char *URL, ns2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientListResponse", p->soap_type() == SOAP_TYPE_ns2__getClientListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getClientListResponse * SOAP_FMAC4 soap_get_ns2__getClientListResponse(struct soap*, ns2__getClientListResponse *, const char*, const char*);

inline int soap_read_ns2__getClientListResponse(struct soap *soap, ns2__getClientListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getClientListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getClientListResponse(struct soap *soap, const char *URL, ns2__getClientListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getClientListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getClientListResponse(struct soap *soap, ns2__getClientListResponse *p)
{
	if (::soap_read_ns2__getClientListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getClientList_DEFINED
#define SOAP_TYPE_ns2__getClientList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClientList(struct soap*, const char*, int, const ns2__getClientList *, const char*);
SOAP_FMAC3 ns2__getClientList * SOAP_FMAC4 soap_in_ns2__getClientList(struct soap*, const char*, ns2__getClientList *, const char*);
SOAP_FMAC1 ns2__getClientList * SOAP_FMAC2 soap_instantiate_ns2__getClientList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getClientList * soap_new_ns2__getClientList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getClientList(soap, n, NULL, NULL, NULL);
}

inline ns2__getClientList * soap_new_req_ns2__getClientList(
	struct soap *soap)
{
	ns2__getClientList *_p = ::soap_new_ns2__getClientList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getClientList * soap_new_set_ns2__getClientList(
	struct soap *soap)
{
	ns2__getClientList *_p = ::soap_new_ns2__getClientList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__getClientList(struct soap *soap, ns2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientList", p->soap_type() == SOAP_TYPE_ns2__getClientList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getClientList(struct soap *soap, const char *URL, ns2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientList", p->soap_type() == SOAP_TYPE_ns2__getClientList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getClientList(struct soap *soap, const char *URL, ns2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientList", p->soap_type() == SOAP_TYPE_ns2__getClientList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getClientList(struct soap *soap, const char *URL, ns2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getClientList", p->soap_type() == SOAP_TYPE_ns2__getClientList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getClientList * SOAP_FMAC4 soap_get_ns2__getClientList(struct soap*, ns2__getClientList *, const char*, const char*);

inline int soap_read_ns2__getClientList(struct soap *soap, ns2__getClientList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getClientList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getClientList(struct soap *soap, const char *URL, ns2__getClientList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getClientList(struct soap *soap, ns2__getClientList *p)
{
	if (::soap_read_ns2__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__productType_DEFINED
#define SOAP_TYPE_ns2__productType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__productType(struct soap*, const char*, int, const ns2__productType *, const char*);
SOAP_FMAC3 ns2__productType * SOAP_FMAC4 soap_in_ns2__productType(struct soap*, const char*, ns2__productType *, const char*);
SOAP_FMAC1 ns2__productType * SOAP_FMAC2 soap_instantiate_ns2__productType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__productType * soap_new_ns2__productType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__productType(soap, n, NULL, NULL, NULL);
}

inline ns2__productType * soap_new_req_ns2__productType(
	struct soap *soap,
	int typeId,
	int typeProductId)
{
	ns2__productType *_p = ::soap_new_ns2__productType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__productType::typeId = typeId;
		_p->ns2__productType::typeProductId = typeProductId;
	}
	return _p;
}

inline ns2__productType * soap_new_set_ns2__productType(
	struct soap *soap,
	int typeId,
	std::string *typeName,
	std::string *typeProduct,
	int typeProductId)
{
	ns2__productType *_p = ::soap_new_ns2__productType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__productType::typeId = typeId;
		_p->ns2__productType::typeName = typeName;
		_p->ns2__productType::typeProduct = typeProduct;
		_p->ns2__productType::typeProductId = typeProductId;
	}
	return _p;
}

inline int soap_write_ns2__productType(struct soap *soap, ns2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:productType", p->soap_type() == SOAP_TYPE_ns2__productType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__productType(struct soap *soap, const char *URL, ns2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:productType", p->soap_type() == SOAP_TYPE_ns2__productType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__productType(struct soap *soap, const char *URL, ns2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:productType", p->soap_type() == SOAP_TYPE_ns2__productType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__productType(struct soap *soap, const char *URL, ns2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:productType", p->soap_type() == SOAP_TYPE_ns2__productType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__productType * SOAP_FMAC4 soap_get_ns2__productType(struct soap*, ns2__productType *, const char*, const char*);

inline int soap_read_ns2__productType(struct soap *soap, ns2__productType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__productType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__productType(struct soap *soap, const char *URL, ns2__productType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__productType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__productType(struct soap *soap, ns2__productType *p)
{
	if (::soap_read_ns2__productType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductTypeByProNameResponse_DEFINED
#define SOAP_TYPE_ns2__getProductTypeByProNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductTypeByProNameResponse(struct soap*, const char*, int, const ns2__getProductTypeByProNameResponse *, const char*);
SOAP_FMAC3 ns2__getProductTypeByProNameResponse * SOAP_FMAC4 soap_in_ns2__getProductTypeByProNameResponse(struct soap*, const char*, ns2__getProductTypeByProNameResponse *, const char*);
SOAP_FMAC1 ns2__getProductTypeByProNameResponse * SOAP_FMAC2 soap_instantiate_ns2__getProductTypeByProNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductTypeByProNameResponse * soap_new_ns2__getProductTypeByProNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductTypeByProNameResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductTypeByProNameResponse * soap_new_req_ns2__getProductTypeByProNameResponse(
	struct soap *soap)
{
	ns2__getProductTypeByProNameResponse *_p = ::soap_new_ns2__getProductTypeByProNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductTypeByProNameResponse * soap_new_set_ns2__getProductTypeByProNameResponse(
	struct soap *soap,
	const std::vector<ns2__productType *> & return_)
{
	ns2__getProductTypeByProNameResponse *_p = ::soap_new_ns2__getProductTypeByProNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductTypeByProNameResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getProductTypeByProNameResponse(struct soap *soap, ns2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, ns2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, ns2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, ns2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductTypeByProNameResponse * SOAP_FMAC4 soap_get_ns2__getProductTypeByProNameResponse(struct soap*, ns2__getProductTypeByProNameResponse *, const char*, const char*);

inline int soap_read_ns2__getProductTypeByProNameResponse(struct soap *soap, ns2__getProductTypeByProNameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductTypeByProNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, ns2__getProductTypeByProNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductTypeByProNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductTypeByProNameResponse(struct soap *soap, ns2__getProductTypeByProNameResponse *p)
{
	if (::soap_read_ns2__getProductTypeByProNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductTypeByProName_DEFINED
#define SOAP_TYPE_ns2__getProductTypeByProName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductTypeByProName(struct soap*, const char*, int, const ns2__getProductTypeByProName *, const char*);
SOAP_FMAC3 ns2__getProductTypeByProName * SOAP_FMAC4 soap_in_ns2__getProductTypeByProName(struct soap*, const char*, ns2__getProductTypeByProName *, const char*);
SOAP_FMAC1 ns2__getProductTypeByProName * SOAP_FMAC2 soap_instantiate_ns2__getProductTypeByProName(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductTypeByProName * soap_new_ns2__getProductTypeByProName(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductTypeByProName(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductTypeByProName * soap_new_req_ns2__getProductTypeByProName(
	struct soap *soap)
{
	ns2__getProductTypeByProName *_p = ::soap_new_ns2__getProductTypeByProName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductTypeByProName * soap_new_set_ns2__getProductTypeByProName(
	struct soap *soap,
	std::string *arg0)
{
	ns2__getProductTypeByProName *_p = ::soap_new_ns2__getProductTypeByProName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductTypeByProName::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getProductTypeByProName(struct soap *soap, ns2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductTypeByProName(struct soap *soap, const char *URL, ns2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductTypeByProName(struct soap *soap, const char *URL, ns2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductTypeByProName(struct soap *soap, const char *URL, ns2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_ns2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductTypeByProName * SOAP_FMAC4 soap_get_ns2__getProductTypeByProName(struct soap*, ns2__getProductTypeByProName *, const char*, const char*);

inline int soap_read_ns2__getProductTypeByProName(struct soap *soap, ns2__getProductTypeByProName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductTypeByProName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductTypeByProName(struct soap *soap, const char *URL, ns2__getProductTypeByProName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductTypeByProName(struct soap *soap, ns2__getProductTypeByProName *p)
{
	if (::soap_read_ns2__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateMessageFromShopResponse_DEFINED
#define SOAP_TYPE_ns2__updateMessageFromShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateMessageFromShopResponse(struct soap*, const char*, int, const ns2__updateMessageFromShopResponse *, const char*);
SOAP_FMAC3 ns2__updateMessageFromShopResponse * SOAP_FMAC4 soap_in_ns2__updateMessageFromShopResponse(struct soap*, const char*, ns2__updateMessageFromShopResponse *, const char*);
SOAP_FMAC1 ns2__updateMessageFromShopResponse * SOAP_FMAC2 soap_instantiate_ns2__updateMessageFromShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateMessageFromShopResponse * soap_new_ns2__updateMessageFromShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateMessageFromShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__updateMessageFromShopResponse * soap_new_req_ns2__updateMessageFromShopResponse(
	struct soap *soap)
{
	ns2__updateMessageFromShopResponse *_p = ::soap_new_ns2__updateMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateMessageFromShopResponse * soap_new_set_ns2__updateMessageFromShopResponse(
	struct soap *soap)
{
	ns2__updateMessageFromShopResponse *_p = ::soap_new_ns2__updateMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__updateMessageFromShopResponse(struct soap *soap, ns2__updateMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateMessageFromShopResponse(struct soap *soap, const char *URL, ns2__updateMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateMessageFromShopResponse(struct soap *soap, const char *URL, ns2__updateMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateMessageFromShopResponse(struct soap *soap, const char *URL, ns2__updateMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateMessageFromShopResponse * SOAP_FMAC4 soap_get_ns2__updateMessageFromShopResponse(struct soap*, ns2__updateMessageFromShopResponse *, const char*, const char*);

inline int soap_read_ns2__updateMessageFromShopResponse(struct soap *soap, ns2__updateMessageFromShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateMessageFromShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateMessageFromShopResponse(struct soap *soap, const char *URL, ns2__updateMessageFromShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateMessageFromShopResponse(struct soap *soap, ns2__updateMessageFromShopResponse *p)
{
	if (::soap_read_ns2__updateMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateMessageFromShop_DEFINED
#define SOAP_TYPE_ns2__updateMessageFromShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateMessageFromShop(struct soap*, const char*, int, const ns2__updateMessageFromShop *, const char*);
SOAP_FMAC3 ns2__updateMessageFromShop * SOAP_FMAC4 soap_in_ns2__updateMessageFromShop(struct soap*, const char*, ns2__updateMessageFromShop *, const char*);
SOAP_FMAC1 ns2__updateMessageFromShop * SOAP_FMAC2 soap_instantiate_ns2__updateMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateMessageFromShop * soap_new_ns2__updateMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline ns2__updateMessageFromShop * soap_new_req_ns2__updateMessageFromShop(
	struct soap *soap,
	int arg1)
{
	ns2__updateMessageFromShop *_p = ::soap_new_ns2__updateMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateMessageFromShop::arg1 = arg1;
	}
	return _p;
}

inline ns2__updateMessageFromShop * soap_new_set_ns2__updateMessageFromShop(
	struct soap *soap,
	ns2__message *arg0,
	int arg1)
{
	ns2__updateMessageFromShop *_p = ::soap_new_ns2__updateMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateMessageFromShop::arg0 = arg0;
		_p->ns2__updateMessageFromShop::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__updateMessageFromShop(struct soap *soap, ns2__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateMessageFromShop(struct soap *soap, const char *URL, ns2__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateMessageFromShop(struct soap *soap, const char *URL, ns2__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateMessageFromShop(struct soap *soap, const char *URL, ns2__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__updateMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateMessageFromShop * SOAP_FMAC4 soap_get_ns2__updateMessageFromShop(struct soap*, ns2__updateMessageFromShop *, const char*, const char*);

inline int soap_read_ns2__updateMessageFromShop(struct soap *soap, ns2__updateMessageFromShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateMessageFromShop(struct soap *soap, const char *URL, ns2__updateMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateMessageFromShop(struct soap *soap, ns2__updateMessageFromShop *p)
{
	if (::soap_read_ns2__updateMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InsertShopResponse_DEFINED
#define SOAP_TYPE_ns2__InsertShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InsertShopResponse(struct soap*, const char*, int, const ns2__InsertShopResponse *, const char*);
SOAP_FMAC3 ns2__InsertShopResponse * SOAP_FMAC4 soap_in_ns2__InsertShopResponse(struct soap*, const char*, ns2__InsertShopResponse *, const char*);
SOAP_FMAC1 ns2__InsertShopResponse * SOAP_FMAC2 soap_instantiate_ns2__InsertShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InsertShopResponse * soap_new_ns2__InsertShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InsertShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__InsertShopResponse * soap_new_req_ns2__InsertShopResponse(
	struct soap *soap)
{
	ns2__InsertShopResponse *_p = ::soap_new_ns2__InsertShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InsertShopResponse * soap_new_set_ns2__InsertShopResponse(
	struct soap *soap)
{
	ns2__InsertShopResponse *_p = ::soap_new_ns2__InsertShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__InsertShopResponse(struct soap *soap, ns2__InsertShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShopResponse", p->soap_type() == SOAP_TYPE_ns2__InsertShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InsertShopResponse(struct soap *soap, const char *URL, ns2__InsertShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShopResponse", p->soap_type() == SOAP_TYPE_ns2__InsertShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InsertShopResponse(struct soap *soap, const char *URL, ns2__InsertShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShopResponse", p->soap_type() == SOAP_TYPE_ns2__InsertShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InsertShopResponse(struct soap *soap, const char *URL, ns2__InsertShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShopResponse", p->soap_type() == SOAP_TYPE_ns2__InsertShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InsertShopResponse * SOAP_FMAC4 soap_get_ns2__InsertShopResponse(struct soap*, ns2__InsertShopResponse *, const char*, const char*);

inline int soap_read_ns2__InsertShopResponse(struct soap *soap, ns2__InsertShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InsertShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InsertShopResponse(struct soap *soap, const char *URL, ns2__InsertShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InsertShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InsertShopResponse(struct soap *soap, ns2__InsertShopResponse *p)
{
	if (::soap_read_ns2__InsertShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__InsertShop_DEFINED
#define SOAP_TYPE_ns2__InsertShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__InsertShop(struct soap*, const char*, int, const ns2__InsertShop *, const char*);
SOAP_FMAC3 ns2__InsertShop * SOAP_FMAC4 soap_in_ns2__InsertShop(struct soap*, const char*, ns2__InsertShop *, const char*);
SOAP_FMAC1 ns2__InsertShop * SOAP_FMAC2 soap_instantiate_ns2__InsertShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__InsertShop * soap_new_ns2__InsertShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__InsertShop(soap, n, NULL, NULL, NULL);
}

inline ns2__InsertShop * soap_new_req_ns2__InsertShop(
	struct soap *soap)
{
	ns2__InsertShop *_p = ::soap_new_ns2__InsertShop(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__InsertShop * soap_new_set_ns2__InsertShop(
	struct soap *soap,
	ns2__shop *arg0)
{
	ns2__InsertShop *_p = ::soap_new_ns2__InsertShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__InsertShop::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__InsertShop(struct soap *soap, ns2__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShop", p->soap_type() == SOAP_TYPE_ns2__InsertShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__InsertShop(struct soap *soap, const char *URL, ns2__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShop", p->soap_type() == SOAP_TYPE_ns2__InsertShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__InsertShop(struct soap *soap, const char *URL, ns2__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShop", p->soap_type() == SOAP_TYPE_ns2__InsertShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__InsertShop(struct soap *soap, const char *URL, ns2__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:InsertShop", p->soap_type() == SOAP_TYPE_ns2__InsertShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__InsertShop * SOAP_FMAC4 soap_get_ns2__InsertShop(struct soap*, ns2__InsertShop *, const char*, const char*);

inline int soap_read_ns2__InsertShop(struct soap *soap, ns2__InsertShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__InsertShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__InsertShop(struct soap *soap, const char *URL, ns2__InsertShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__InsertShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__InsertShop(struct soap *soap, ns2__InsertShop *p)
{
	if (::soap_read_ns2__InsertShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse_DEFINED
#define SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteClientByNameAndPwdResponse(struct soap*, const char*, int, const ns2__deleteClientByNameAndPwdResponse *, const char*);
SOAP_FMAC3 ns2__deleteClientByNameAndPwdResponse * SOAP_FMAC4 soap_in_ns2__deleteClientByNameAndPwdResponse(struct soap*, const char*, ns2__deleteClientByNameAndPwdResponse *, const char*);
SOAP_FMAC1 ns2__deleteClientByNameAndPwdResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteClientByNameAndPwdResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteClientByNameAndPwdResponse * soap_new_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteClientByNameAndPwdResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteClientByNameAndPwdResponse * soap_new_req_ns2__deleteClientByNameAndPwdResponse(
	struct soap *soap)
{
	ns2__deleteClientByNameAndPwdResponse *_p = ::soap_new_ns2__deleteClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteClientByNameAndPwdResponse * soap_new_set_ns2__deleteClientByNameAndPwdResponse(
	struct soap *soap)
{
	ns2__deleteClientByNameAndPwdResponse *_p = ::soap_new_ns2__deleteClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, ns2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteClientByNameAndPwdResponse * SOAP_FMAC4 soap_get_ns2__deleteClientByNameAndPwdResponse(struct soap*, ns2__deleteClientByNameAndPwdResponse *, const char*, const char*);

inline int soap_read_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, ns2__deleteClientByNameAndPwdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteClientByNameAndPwdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteClientByNameAndPwdResponse(struct soap *soap, ns2__deleteClientByNameAndPwdResponse *p)
{
	if (::soap_read_ns2__deleteClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteClientByNameAndPwd_DEFINED
#define SOAP_TYPE_ns2__deleteClientByNameAndPwd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteClientByNameAndPwd(struct soap*, const char*, int, const ns2__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC3 ns2__deleteClientByNameAndPwd * SOAP_FMAC4 soap_in_ns2__deleteClientByNameAndPwd(struct soap*, const char*, ns2__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC1 ns2__deleteClientByNameAndPwd * SOAP_FMAC2 soap_instantiate_ns2__deleteClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteClientByNameAndPwd * soap_new_ns2__deleteClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteClientByNameAndPwd * soap_new_req_ns2__deleteClientByNameAndPwd(
	struct soap *soap)
{
	ns2__deleteClientByNameAndPwd *_p = ::soap_new_ns2__deleteClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteClientByNameAndPwd * soap_new_set_ns2__deleteClientByNameAndPwd(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	ns2__deleteClientByNameAndPwd *_p = ::soap_new_ns2__deleteClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteClientByNameAndPwd::arg0 = arg0;
		_p->ns2__deleteClientByNameAndPwd::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__deleteClientByNameAndPwd(struct soap *soap, ns2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteClientByNameAndPwd * SOAP_FMAC4 soap_get_ns2__deleteClientByNameAndPwd(struct soap*, ns2__deleteClientByNameAndPwd *, const char*, const char*);

inline int soap_read_ns2__deleteClientByNameAndPwd(struct soap *soap, ns2__deleteClientByNameAndPwd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, ns2__deleteClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteClientByNameAndPwd(struct soap *soap, ns2__deleteClientByNameAndPwd *p)
{
	if (::soap_read_ns2__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteProductByInfoResponse_DEFINED
#define SOAP_TYPE_ns2__deleteProductByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteProductByInfoResponse(struct soap*, const char*, int, const ns2__deleteProductByInfoResponse *, const char*);
SOAP_FMAC3 ns2__deleteProductByInfoResponse * SOAP_FMAC4 soap_in_ns2__deleteProductByInfoResponse(struct soap*, const char*, ns2__deleteProductByInfoResponse *, const char*);
SOAP_FMAC1 ns2__deleteProductByInfoResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteProductByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteProductByInfoResponse * soap_new_ns2__deleteProductByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteProductByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteProductByInfoResponse * soap_new_req_ns2__deleteProductByInfoResponse(
	struct soap *soap)
{
	ns2__deleteProductByInfoResponse *_p = ::soap_new_ns2__deleteProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteProductByInfoResponse * soap_new_set_ns2__deleteProductByInfoResponse(
	struct soap *soap)
{
	ns2__deleteProductByInfoResponse *_p = ::soap_new_ns2__deleteProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteProductByInfoResponse(struct soap *soap, ns2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteProductByInfoResponse(struct soap *soap, const char *URL, ns2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteProductByInfoResponse(struct soap *soap, const char *URL, ns2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteProductByInfoResponse(struct soap *soap, const char *URL, ns2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteProductByInfoResponse * SOAP_FMAC4 soap_get_ns2__deleteProductByInfoResponse(struct soap*, ns2__deleteProductByInfoResponse *, const char*, const char*);

inline int soap_read_ns2__deleteProductByInfoResponse(struct soap *soap, ns2__deleteProductByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteProductByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteProductByInfoResponse(struct soap *soap, const char *URL, ns2__deleteProductByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteProductByInfoResponse(struct soap *soap, ns2__deleteProductByInfoResponse *p)
{
	if (::soap_read_ns2__deleteProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteProductByInfo_DEFINED
#define SOAP_TYPE_ns2__deleteProductByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteProductByInfo(struct soap*, const char*, int, const ns2__deleteProductByInfo *, const char*);
SOAP_FMAC3 ns2__deleteProductByInfo * SOAP_FMAC4 soap_in_ns2__deleteProductByInfo(struct soap*, const char*, ns2__deleteProductByInfo *, const char*);
SOAP_FMAC1 ns2__deleteProductByInfo * SOAP_FMAC2 soap_instantiate_ns2__deleteProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteProductByInfo * soap_new_ns2__deleteProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteProductByInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteProductByInfo * soap_new_req_ns2__deleteProductByInfo(
	struct soap *soap)
{
	ns2__deleteProductByInfo *_p = ::soap_new_ns2__deleteProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteProductByInfo * soap_new_set_ns2__deleteProductByInfo(
	struct soap *soap,
	ns2__product *arg0)
{
	ns2__deleteProductByInfo *_p = ::soap_new_ns2__deleteProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteProductByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__deleteProductByInfo(struct soap *soap, ns2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteProductByInfo(struct soap *soap, const char *URL, ns2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteProductByInfo(struct soap *soap, const char *URL, ns2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteProductByInfo(struct soap *soap, const char *URL, ns2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_ns2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteProductByInfo * SOAP_FMAC4 soap_get_ns2__deleteProductByInfo(struct soap*, ns2__deleteProductByInfo *, const char*, const char*);

inline int soap_read_ns2__deleteProductByInfo(struct soap *soap, ns2__deleteProductByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteProductByInfo(struct soap *soap, const char *URL, ns2__deleteProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteProductByInfo(struct soap *soap, ns2__deleteProductByInfo *p)
{
	if (::soap_read_ns2__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateClientResponse_DEFINED
#define SOAP_TYPE_ns2__updateClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateClientResponse(struct soap*, const char*, int, const ns2__updateClientResponse *, const char*);
SOAP_FMAC3 ns2__updateClientResponse * SOAP_FMAC4 soap_in_ns2__updateClientResponse(struct soap*, const char*, ns2__updateClientResponse *, const char*);
SOAP_FMAC1 ns2__updateClientResponse * SOAP_FMAC2 soap_instantiate_ns2__updateClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateClientResponse * soap_new_ns2__updateClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateClientResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__updateClientResponse * soap_new_req_ns2__updateClientResponse(
	struct soap *soap)
{
	ns2__updateClientResponse *_p = ::soap_new_ns2__updateClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateClientResponse * soap_new_set_ns2__updateClientResponse(
	struct soap *soap)
{
	ns2__updateClientResponse *_p = ::soap_new_ns2__updateClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__updateClientResponse(struct soap *soap, ns2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateClientResponse(struct soap *soap, const char *URL, ns2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateClientResponse(struct soap *soap, const char *URL, ns2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateClientResponse(struct soap *soap, const char *URL, ns2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClientResponse", p->soap_type() == SOAP_TYPE_ns2__updateClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateClientResponse * SOAP_FMAC4 soap_get_ns2__updateClientResponse(struct soap*, ns2__updateClientResponse *, const char*, const char*);

inline int soap_read_ns2__updateClientResponse(struct soap *soap, ns2__updateClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateClientResponse(struct soap *soap, const char *URL, ns2__updateClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateClientResponse(struct soap *soap, ns2__updateClientResponse *p)
{
	if (::soap_read_ns2__updateClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateClient_DEFINED
#define SOAP_TYPE_ns2__updateClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateClient(struct soap*, const char*, int, const ns2__updateClient *, const char*);
SOAP_FMAC3 ns2__updateClient * SOAP_FMAC4 soap_in_ns2__updateClient(struct soap*, const char*, ns2__updateClient *, const char*);
SOAP_FMAC1 ns2__updateClient * SOAP_FMAC2 soap_instantiate_ns2__updateClient(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateClient * soap_new_ns2__updateClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateClient(soap, n, NULL, NULL, NULL);
}

inline ns2__updateClient * soap_new_req_ns2__updateClient(
	struct soap *soap)
{
	ns2__updateClient *_p = ::soap_new_ns2__updateClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateClient * soap_new_set_ns2__updateClient(
	struct soap *soap,
	ns2__client *arg0)
{
	ns2__updateClient *_p = ::soap_new_ns2__updateClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__updateClient(struct soap *soap, ns2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClient", p->soap_type() == SOAP_TYPE_ns2__updateClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateClient(struct soap *soap, const char *URL, ns2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClient", p->soap_type() == SOAP_TYPE_ns2__updateClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateClient(struct soap *soap, const char *URL, ns2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClient", p->soap_type() == SOAP_TYPE_ns2__updateClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateClient(struct soap *soap, const char *URL, ns2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateClient", p->soap_type() == SOAP_TYPE_ns2__updateClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateClient * SOAP_FMAC4 soap_get_ns2__updateClient(struct soap*, ns2__updateClient *, const char*, const char*);

inline int soap_read_ns2__updateClient(struct soap *soap, ns2__updateClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateClient(struct soap *soap, const char *URL, ns2__updateClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateClient(struct soap *soap, ns2__updateClient *p)
{
	if (::soap_read_ns2__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__message_DEFINED
#define SOAP_TYPE_ns2__message_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__message(struct soap*, const char*, int, const ns2__message *, const char*);
SOAP_FMAC3 ns2__message * SOAP_FMAC4 soap_in_ns2__message(struct soap*, const char*, ns2__message *, const char*);
SOAP_FMAC1 ns2__message * SOAP_FMAC2 soap_instantiate_ns2__message(struct soap*, int, const char*, const char*, size_t*);

inline ns2__message * soap_new_ns2__message(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__message(soap, n, NULL, NULL, NULL);
}

inline ns2__message * soap_new_req_ns2__message(
	struct soap *soap,
	int msgClientId,
	int msgFrom,
	int msgId,
	int msgShopId,
	int readStatus)
{
	ns2__message *_p = ::soap_new_ns2__message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__message::msgClientId = msgClientId;
		_p->ns2__message::msgFrom = msgFrom;
		_p->ns2__message::msgId = msgId;
		_p->ns2__message::msgShopId = msgShopId;
		_p->ns2__message::readStatus = readStatus;
	}
	return _p;
}

inline ns2__message * soap_new_set_ns2__message(
	struct soap *soap,
	int msgClientId,
	std::string *msgClientName,
	std::string *msgContent,
	int msgFrom,
	int msgId,
	int msgShopId,
	std::string *msgShopName,
	time_t *msgTime,
	int readStatus)
{
	ns2__message *_p = ::soap_new_ns2__message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__message::msgClientId = msgClientId;
		_p->ns2__message::msgClientName = msgClientName;
		_p->ns2__message::msgContent = msgContent;
		_p->ns2__message::msgFrom = msgFrom;
		_p->ns2__message::msgId = msgId;
		_p->ns2__message::msgShopId = msgShopId;
		_p->ns2__message::msgShopName = msgShopName;
		_p->ns2__message::msgTime = msgTime;
		_p->ns2__message::readStatus = readStatus;
	}
	return _p;
}

inline int soap_write_ns2__message(struct soap *soap, ns2__message const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:message", p->soap_type() == SOAP_TYPE_ns2__message ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__message(struct soap *soap, const char *URL, ns2__message const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:message", p->soap_type() == SOAP_TYPE_ns2__message ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__message(struct soap *soap, const char *URL, ns2__message const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:message", p->soap_type() == SOAP_TYPE_ns2__message ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__message(struct soap *soap, const char *URL, ns2__message const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:message", p->soap_type() == SOAP_TYPE_ns2__message ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__message * SOAP_FMAC4 soap_get_ns2__message(struct soap*, ns2__message *, const char*, const char*);

inline int soap_read_ns2__message(struct soap *soap, ns2__message *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__message(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__message(struct soap *soap, const char *URL, ns2__message *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__message(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__message(struct soap *soap, ns2__message *p)
{
	if (::soap_read_ns2__message(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getReadMessageFromShopResponse_DEFINED
#define SOAP_TYPE_ns2__getReadMessageFromShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getReadMessageFromShopResponse(struct soap*, const char*, int, const ns2__getReadMessageFromShopResponse *, const char*);
SOAP_FMAC3 ns2__getReadMessageFromShopResponse * SOAP_FMAC4 soap_in_ns2__getReadMessageFromShopResponse(struct soap*, const char*, ns2__getReadMessageFromShopResponse *, const char*);
SOAP_FMAC1 ns2__getReadMessageFromShopResponse * SOAP_FMAC2 soap_instantiate_ns2__getReadMessageFromShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getReadMessageFromShopResponse * soap_new_ns2__getReadMessageFromShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getReadMessageFromShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getReadMessageFromShopResponse * soap_new_req_ns2__getReadMessageFromShopResponse(
	struct soap *soap)
{
	ns2__getReadMessageFromShopResponse *_p = ::soap_new_ns2__getReadMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getReadMessageFromShopResponse * soap_new_set_ns2__getReadMessageFromShopResponse(
	struct soap *soap,
	const std::vector<ns2__message *> & return_)
{
	ns2__getReadMessageFromShopResponse *_p = ::soap_new_ns2__getReadMessageFromShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getReadMessageFromShopResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getReadMessageFromShopResponse(struct soap *soap, ns2__getReadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getReadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getReadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getReadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShopResponse", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getReadMessageFromShopResponse * SOAP_FMAC4 soap_get_ns2__getReadMessageFromShopResponse(struct soap*, ns2__getReadMessageFromShopResponse *, const char*, const char*);

inline int soap_read_ns2__getReadMessageFromShopResponse(struct soap *soap, ns2__getReadMessageFromShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getReadMessageFromShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getReadMessageFromShopResponse(struct soap *soap, const char *URL, ns2__getReadMessageFromShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getReadMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getReadMessageFromShopResponse(struct soap *soap, ns2__getReadMessageFromShopResponse *p)
{
	if (::soap_read_ns2__getReadMessageFromShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__client_DEFINED
#define SOAP_TYPE_ns2__client_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__client(struct soap*, const char*, int, const ns2__client *, const char*);
SOAP_FMAC3 ns2__client * SOAP_FMAC4 soap_in_ns2__client(struct soap*, const char*, ns2__client *, const char*);
SOAP_FMAC1 ns2__client * SOAP_FMAC2 soap_instantiate_ns2__client(struct soap*, int, const char*, const char*, size_t*);

inline ns2__client * soap_new_ns2__client(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__client(soap, n, NULL, NULL, NULL);
}

inline ns2__client * soap_new_req_ns2__client(
	struct soap *soap,
	int clientBought,
	int clientId)
{
	ns2__client *_p = ::soap_new_ns2__client(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__client::clientBought = clientBought;
		_p->ns2__client::clientId = clientId;
	}
	return _p;
}

inline ns2__client * soap_new_set_ns2__client(
	struct soap *soap,
	int clientBought,
	std::string *clientEmail,
	int clientId,
	std::string *clientImage,
	std::string *clientName,
	std::string *clientPhone,
	std::string *clientPwd,
	time_t *clientSignTime)
{
	ns2__client *_p = ::soap_new_ns2__client(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__client::clientBought = clientBought;
		_p->ns2__client::clientEmail = clientEmail;
		_p->ns2__client::clientId = clientId;
		_p->ns2__client::clientImage = clientImage;
		_p->ns2__client::clientName = clientName;
		_p->ns2__client::clientPhone = clientPhone;
		_p->ns2__client::clientPwd = clientPwd;
		_p->ns2__client::clientSignTime = clientSignTime;
	}
	return _p;
}

inline int soap_write_ns2__client(struct soap *soap, ns2__client const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:client", p->soap_type() == SOAP_TYPE_ns2__client ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__client(struct soap *soap, const char *URL, ns2__client const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:client", p->soap_type() == SOAP_TYPE_ns2__client ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__client(struct soap *soap, const char *URL, ns2__client const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:client", p->soap_type() == SOAP_TYPE_ns2__client ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__client(struct soap *soap, const char *URL, ns2__client const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:client", p->soap_type() == SOAP_TYPE_ns2__client ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__client * SOAP_FMAC4 soap_get_ns2__client(struct soap*, ns2__client *, const char*, const char*);

inline int soap_read_ns2__client(struct soap *soap, ns2__client *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__client(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__client(struct soap *soap, const char *URL, ns2__client *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__client(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__client(struct soap *soap, ns2__client *p)
{
	if (::soap_read_ns2__client(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getReadMessageFromShop_DEFINED
#define SOAP_TYPE_ns2__getReadMessageFromShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getReadMessageFromShop(struct soap*, const char*, int, const ns2__getReadMessageFromShop *, const char*);
SOAP_FMAC3 ns2__getReadMessageFromShop * SOAP_FMAC4 soap_in_ns2__getReadMessageFromShop(struct soap*, const char*, ns2__getReadMessageFromShop *, const char*);
SOAP_FMAC1 ns2__getReadMessageFromShop * SOAP_FMAC2 soap_instantiate_ns2__getReadMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getReadMessageFromShop * soap_new_ns2__getReadMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getReadMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline ns2__getReadMessageFromShop * soap_new_req_ns2__getReadMessageFromShop(
	struct soap *soap)
{
	ns2__getReadMessageFromShop *_p = ::soap_new_ns2__getReadMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getReadMessageFromShop * soap_new_set_ns2__getReadMessageFromShop(
	struct soap *soap,
	ns2__client *arg0)
{
	ns2__getReadMessageFromShop *_p = ::soap_new_ns2__getReadMessageFromShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getReadMessageFromShop::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getReadMessageFromShop(struct soap *soap, ns2__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getReadMessageFromShop(struct soap *soap, const char *URL, ns2__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getReadMessageFromShop(struct soap *soap, const char *URL, ns2__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getReadMessageFromShop(struct soap *soap, const char *URL, ns2__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getReadMessageFromShop", p->soap_type() == SOAP_TYPE_ns2__getReadMessageFromShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getReadMessageFromShop * SOAP_FMAC4 soap_get_ns2__getReadMessageFromShop(struct soap*, ns2__getReadMessageFromShop *, const char*, const char*);

inline int soap_read_ns2__getReadMessageFromShop(struct soap *soap, ns2__getReadMessageFromShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getReadMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getReadMessageFromShop(struct soap *soap, const char *URL, ns2__getReadMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getReadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getReadMessageFromShop(struct soap *soap, ns2__getReadMessageFromShop *p)
{
	if (::soap_read_ns2__getReadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductListByInfoResponse_DEFINED
#define SOAP_TYPE_ns2__getProductListByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductListByInfoResponse(struct soap*, const char*, int, const ns2__getProductListByInfoResponse *, const char*);
SOAP_FMAC3 ns2__getProductListByInfoResponse * SOAP_FMAC4 soap_in_ns2__getProductListByInfoResponse(struct soap*, const char*, ns2__getProductListByInfoResponse *, const char*);
SOAP_FMAC1 ns2__getProductListByInfoResponse * SOAP_FMAC2 soap_instantiate_ns2__getProductListByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductListByInfoResponse * soap_new_ns2__getProductListByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductListByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductListByInfoResponse * soap_new_req_ns2__getProductListByInfoResponse(
	struct soap *soap)
{
	ns2__getProductListByInfoResponse *_p = ::soap_new_ns2__getProductListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductListByInfoResponse * soap_new_set_ns2__getProductListByInfoResponse(
	struct soap *soap,
	const std::vector<ns2__product *> & return_)
{
	ns2__getProductListByInfoResponse *_p = ::soap_new_ns2__getProductListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductListByInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getProductListByInfoResponse(struct soap *soap, ns2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductListByInfoResponse(struct soap *soap, const char *URL, ns2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductListByInfoResponse(struct soap *soap, const char *URL, ns2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductListByInfoResponse(struct soap *soap, const char *URL, ns2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductListByInfoResponse * SOAP_FMAC4 soap_get_ns2__getProductListByInfoResponse(struct soap*, ns2__getProductListByInfoResponse *, const char*, const char*);

inline int soap_read_ns2__getProductListByInfoResponse(struct soap *soap, ns2__getProductListByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductListByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductListByInfoResponse(struct soap *soap, const char *URL, ns2__getProductListByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductListByInfoResponse(struct soap *soap, ns2__getProductListByInfoResponse *p)
{
	if (::soap_read_ns2__getProductListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getProductListByInfo_DEFINED
#define SOAP_TYPE_ns2__getProductListByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getProductListByInfo(struct soap*, const char*, int, const ns2__getProductListByInfo *, const char*);
SOAP_FMAC3 ns2__getProductListByInfo * SOAP_FMAC4 soap_in_ns2__getProductListByInfo(struct soap*, const char*, ns2__getProductListByInfo *, const char*);
SOAP_FMAC1 ns2__getProductListByInfo * SOAP_FMAC2 soap_instantiate_ns2__getProductListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getProductListByInfo * soap_new_ns2__getProductListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getProductListByInfo(soap, n, NULL, NULL, NULL);
}

inline ns2__getProductListByInfo * soap_new_req_ns2__getProductListByInfo(
	struct soap *soap)
{
	ns2__getProductListByInfo *_p = ::soap_new_ns2__getProductListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getProductListByInfo * soap_new_set_ns2__getProductListByInfo(
	struct soap *soap,
	ns2__product *arg0)
{
	ns2__getProductListByInfo *_p = ::soap_new_ns2__getProductListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getProductListByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getProductListByInfo(struct soap *soap, ns2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfo", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getProductListByInfo(struct soap *soap, const char *URL, ns2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfo", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getProductListByInfo(struct soap *soap, const char *URL, ns2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfo", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getProductListByInfo(struct soap *soap, const char *URL, ns2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getProductListByInfo", p->soap_type() == SOAP_TYPE_ns2__getProductListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getProductListByInfo * SOAP_FMAC4 soap_get_ns2__getProductListByInfo(struct soap*, ns2__getProductListByInfo *, const char*, const char*);

inline int soap_read_ns2__getProductListByInfo(struct soap *soap, ns2__getProductListByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getProductListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getProductListByInfo(struct soap *soap, const char *URL, ns2__getProductListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getProductListByInfo(struct soap *soap, ns2__getProductListByInfo *p)
{
	if (::soap_read_ns2__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateShopResponse_DEFINED
#define SOAP_TYPE_ns2__updateShopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateShopResponse(struct soap*, const char*, int, const ns2__updateShopResponse *, const char*);
SOAP_FMAC3 ns2__updateShopResponse * SOAP_FMAC4 soap_in_ns2__updateShopResponse(struct soap*, const char*, ns2__updateShopResponse *, const char*);
SOAP_FMAC1 ns2__updateShopResponse * SOAP_FMAC2 soap_instantiate_ns2__updateShopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateShopResponse * soap_new_ns2__updateShopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateShopResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__updateShopResponse * soap_new_req_ns2__updateShopResponse(
	struct soap *soap)
{
	ns2__updateShopResponse *_p = ::soap_new_ns2__updateShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateShopResponse * soap_new_set_ns2__updateShopResponse(
	struct soap *soap)
{
	ns2__updateShopResponse *_p = ::soap_new_ns2__updateShopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__updateShopResponse(struct soap *soap, ns2__updateShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateShopResponse(struct soap *soap, const char *URL, ns2__updateShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateShopResponse(struct soap *soap, const char *URL, ns2__updateShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateShopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateShopResponse(struct soap *soap, const char *URL, ns2__updateShopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShopResponse", p->soap_type() == SOAP_TYPE_ns2__updateShopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateShopResponse * SOAP_FMAC4 soap_get_ns2__updateShopResponse(struct soap*, ns2__updateShopResponse *, const char*, const char*);

inline int soap_read_ns2__updateShopResponse(struct soap *soap, ns2__updateShopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateShopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateShopResponse(struct soap *soap, const char *URL, ns2__updateShopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateShopResponse(struct soap *soap, ns2__updateShopResponse *p)
{
	if (::soap_read_ns2__updateShopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__updateShop_DEFINED
#define SOAP_TYPE_ns2__updateShop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__updateShop(struct soap*, const char*, int, const ns2__updateShop *, const char*);
SOAP_FMAC3 ns2__updateShop * SOAP_FMAC4 soap_in_ns2__updateShop(struct soap*, const char*, ns2__updateShop *, const char*);
SOAP_FMAC1 ns2__updateShop * SOAP_FMAC2 soap_instantiate_ns2__updateShop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__updateShop * soap_new_ns2__updateShop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__updateShop(soap, n, NULL, NULL, NULL);
}

inline ns2__updateShop * soap_new_req_ns2__updateShop(
	struct soap *soap)
{
	ns2__updateShop *_p = ::soap_new_ns2__updateShop(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__updateShop * soap_new_set_ns2__updateShop(
	struct soap *soap,
	ns2__shop *arg0)
{
	ns2__updateShop *_p = ::soap_new_ns2__updateShop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__updateShop::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__updateShop(struct soap *soap, ns2__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShop", p->soap_type() == SOAP_TYPE_ns2__updateShop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__updateShop(struct soap *soap, const char *URL, ns2__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShop", p->soap_type() == SOAP_TYPE_ns2__updateShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__updateShop(struct soap *soap, const char *URL, ns2__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShop", p->soap_type() == SOAP_TYPE_ns2__updateShop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__updateShop(struct soap *soap, const char *URL, ns2__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:updateShop", p->soap_type() == SOAP_TYPE_ns2__updateShop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__updateShop * SOAP_FMAC4 soap_get_ns2__updateShop(struct soap*, ns2__updateShop *, const char*, const char*);

inline int soap_read_ns2__updateShop(struct soap *soap, ns2__updateShop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__updateShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__updateShop(struct soap *soap, const char *URL, ns2__updateShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__updateShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__updateShop(struct soap *soap, ns2__updateShop *p)
{
	if (::soap_read_ns2__updateShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__shop_DEFINED
#define SOAP_TYPE_ns2__shop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__shop(struct soap*, const char*, int, const ns2__shop *, const char*);
SOAP_FMAC3 ns2__shop * SOAP_FMAC4 soap_in_ns2__shop(struct soap*, const char*, ns2__shop *, const char*);
SOAP_FMAC1 ns2__shop * SOAP_FMAC2 soap_instantiate_ns2__shop(struct soap*, int, const char*, const char*, size_t*);

inline ns2__shop * soap_new_ns2__shop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__shop(soap, n, NULL, NULL, NULL);
}

inline ns2__shop * soap_new_req_ns2__shop(
	struct soap *soap,
	int shopId)
{
	ns2__shop *_p = ::soap_new_ns2__shop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__shop::shopId = shopId;
	}
	return _p;
}

inline ns2__shop * soap_new_set_ns2__shop(
	struct soap *soap,
	std::string *shopEmail,
	int shopId,
	std::string *shopImage,
	std::string *shopName,
	std::string *shopPhone,
	std::string *shopPwd,
	time_t *shopSignTime)
{
	ns2__shop *_p = ::soap_new_ns2__shop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__shop::shopEmail = shopEmail;
		_p->ns2__shop::shopId = shopId;
		_p->ns2__shop::shopImage = shopImage;
		_p->ns2__shop::shopName = shopName;
		_p->ns2__shop::shopPhone = shopPhone;
		_p->ns2__shop::shopPwd = shopPwd;
		_p->ns2__shop::shopSignTime = shopSignTime;
	}
	return _p;
}

inline int soap_write_ns2__shop(struct soap *soap, ns2__shop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:shop", p->soap_type() == SOAP_TYPE_ns2__shop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__shop(struct soap *soap, const char *URL, ns2__shop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:shop", p->soap_type() == SOAP_TYPE_ns2__shop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__shop(struct soap *soap, const char *URL, ns2__shop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:shop", p->soap_type() == SOAP_TYPE_ns2__shop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__shop(struct soap *soap, const char *URL, ns2__shop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:shop", p->soap_type() == SOAP_TYPE_ns2__shop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__shop * SOAP_FMAC4 soap_get_ns2__shop(struct soap*, ns2__shop *, const char*, const char*);

inline int soap_read_ns2__shop(struct soap *soap, ns2__shop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__shop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__shop(struct soap *soap, const char *URL, ns2__shop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__shop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__shop(struct soap *soap, ns2__shop *p)
{
	if (::soap_read_ns2__shop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getShopByNameAndPwdResponse_DEFINED
#define SOAP_TYPE_ns2__getShopByNameAndPwdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getShopByNameAndPwdResponse(struct soap*, const char*, int, const ns2__getShopByNameAndPwdResponse *, const char*);
SOAP_FMAC3 ns2__getShopByNameAndPwdResponse * SOAP_FMAC4 soap_in_ns2__getShopByNameAndPwdResponse(struct soap*, const char*, ns2__getShopByNameAndPwdResponse *, const char*);
SOAP_FMAC1 ns2__getShopByNameAndPwdResponse * SOAP_FMAC2 soap_instantiate_ns2__getShopByNameAndPwdResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getShopByNameAndPwdResponse * soap_new_ns2__getShopByNameAndPwdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getShopByNameAndPwdResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getShopByNameAndPwdResponse * soap_new_req_ns2__getShopByNameAndPwdResponse(
	struct soap *soap)
{
	ns2__getShopByNameAndPwdResponse *_p = ::soap_new_ns2__getShopByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getShopByNameAndPwdResponse * soap_new_set_ns2__getShopByNameAndPwdResponse(
	struct soap *soap,
	ns2__shop *return_)
{
	ns2__getShopByNameAndPwdResponse *_p = ::soap_new_ns2__getShopByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getShopByNameAndPwdResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getShopByNameAndPwdResponse(struct soap *soap, ns2__getShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getShopByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getShopByNameAndPwdResponse * SOAP_FMAC4 soap_get_ns2__getShopByNameAndPwdResponse(struct soap*, ns2__getShopByNameAndPwdResponse *, const char*, const char*);

inline int soap_read_ns2__getShopByNameAndPwdResponse(struct soap *soap, ns2__getShopByNameAndPwdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getShopByNameAndPwdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getShopByNameAndPwdResponse(struct soap *soap, const char *URL, ns2__getShopByNameAndPwdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getShopByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getShopByNameAndPwdResponse(struct soap *soap, ns2__getShopByNameAndPwdResponse *p)
{
	if (::soap_read_ns2__getShopByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getShopByNameAndPwd_DEFINED
#define SOAP_TYPE_ns2__getShopByNameAndPwd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getShopByNameAndPwd(struct soap*, const char*, int, const ns2__getShopByNameAndPwd *, const char*);
SOAP_FMAC3 ns2__getShopByNameAndPwd * SOAP_FMAC4 soap_in_ns2__getShopByNameAndPwd(struct soap*, const char*, ns2__getShopByNameAndPwd *, const char*);
SOAP_FMAC1 ns2__getShopByNameAndPwd * SOAP_FMAC2 soap_instantiate_ns2__getShopByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getShopByNameAndPwd * soap_new_ns2__getShopByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getShopByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline ns2__getShopByNameAndPwd * soap_new_req_ns2__getShopByNameAndPwd(
	struct soap *soap)
{
	ns2__getShopByNameAndPwd *_p = ::soap_new_ns2__getShopByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getShopByNameAndPwd * soap_new_set_ns2__getShopByNameAndPwd(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	ns2__getShopByNameAndPwd *_p = ::soap_new_ns2__getShopByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getShopByNameAndPwd::arg0 = arg0;
		_p->ns2__getShopByNameAndPwd::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns2__getShopByNameAndPwd(struct soap *soap, ns2__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getShopByNameAndPwd(struct soap *soap, const char *URL, ns2__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getShopByNameAndPwd(struct soap *soap, const char *URL, ns2__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getShopByNameAndPwd(struct soap *soap, const char *URL, ns2__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getShopByNameAndPwd", p->soap_type() == SOAP_TYPE_ns2__getShopByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getShopByNameAndPwd * SOAP_FMAC4 soap_get_ns2__getShopByNameAndPwd(struct soap*, ns2__getShopByNameAndPwd *, const char*, const char*);

inline int soap_read_ns2__getShopByNameAndPwd(struct soap *soap, ns2__getShopByNameAndPwd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getShopByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getShopByNameAndPwd(struct soap *soap, const char *URL, ns2__getShopByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getShopByNameAndPwd(struct soap *soap, ns2__getShopByNameAndPwd *p)
{
	if (::soap_read_ns2__getShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderListResponse_DEFINED
#define SOAP_TYPE_ns2__getOrderListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderListResponse(struct soap*, const char*, int, const ns2__getOrderListResponse *, const char*);
SOAP_FMAC3 ns2__getOrderListResponse * SOAP_FMAC4 soap_in_ns2__getOrderListResponse(struct soap*, const char*, ns2__getOrderListResponse *, const char*);
SOAP_FMAC1 ns2__getOrderListResponse * SOAP_FMAC2 soap_instantiate_ns2__getOrderListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderListResponse * soap_new_ns2__getOrderListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderListResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderListResponse * soap_new_req_ns2__getOrderListResponse(
	struct soap *soap)
{
	ns2__getOrderListResponse *_p = ::soap_new_ns2__getOrderListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderListResponse * soap_new_set_ns2__getOrderListResponse(
	struct soap *soap,
	const std::vector<ns2__order *> & return_)
{
	ns2__getOrderListResponse *_p = ::soap_new_ns2__getOrderListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__getOrderListResponse(struct soap *soap, ns2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderListResponse(struct soap *soap, const char *URL, ns2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderListResponse(struct soap *soap, const char *URL, ns2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderListResponse(struct soap *soap, const char *URL, ns2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderListResponse", p->soap_type() == SOAP_TYPE_ns2__getOrderListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderListResponse * SOAP_FMAC4 soap_get_ns2__getOrderListResponse(struct soap*, ns2__getOrderListResponse *, const char*, const char*);

inline int soap_read_ns2__getOrderListResponse(struct soap *soap, ns2__getOrderListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderListResponse(struct soap *soap, const char *URL, ns2__getOrderListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderListResponse(struct soap *soap, ns2__getOrderListResponse *p)
{
	if (::soap_read_ns2__getOrderListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__order_DEFINED
#define SOAP_TYPE_ns2__order_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__order(struct soap*, const char*, int, const ns2__order *, const char*);
SOAP_FMAC3 ns2__order * SOAP_FMAC4 soap_in_ns2__order(struct soap*, const char*, ns2__order *, const char*);
SOAP_FMAC1 ns2__order * SOAP_FMAC2 soap_instantiate_ns2__order(struct soap*, int, const char*, const char*, size_t*);

inline ns2__order * soap_new_ns2__order(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__order(soap, n, NULL, NULL, NULL);
}

inline ns2__order * soap_new_req_ns2__order(
	struct soap *soap,
	int orderCheck,
	int orderClientId,
	int orderHide,
	int orderId,
	int orderProductId,
	int orderProductNum,
	int orderRefund,
	int orderShip,
	int orderShopId)
{
	ns2__order *_p = ::soap_new_ns2__order(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__order::orderCheck = orderCheck;
		_p->ns2__order::orderClientId = orderClientId;
		_p->ns2__order::orderHide = orderHide;
		_p->ns2__order::orderId = orderId;
		_p->ns2__order::orderProductId = orderProductId;
		_p->ns2__order::orderProductNum = orderProductNum;
		_p->ns2__order::orderRefund = orderRefund;
		_p->ns2__order::orderShip = orderShip;
		_p->ns2__order::orderShopId = orderShopId;
	}
	return _p;
}

inline ns2__order * soap_new_set_ns2__order(
	struct soap *soap,
	int orderCheck,
	std::string *orderClient,
	int orderClientId,
	std::string *orderCost,
	int orderHide,
	int orderId,
	int orderProductId,
	std::string *orderProductName,
	int orderProductNum,
	std::string *orderProductStyle,
	int orderRefund,
	int orderShip,
	int orderShopId,
	time_t *orderTime)
{
	ns2__order *_p = ::soap_new_ns2__order(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__order::orderCheck = orderCheck;
		_p->ns2__order::orderClient = orderClient;
		_p->ns2__order::orderClientId = orderClientId;
		_p->ns2__order::orderCost = orderCost;
		_p->ns2__order::orderHide = orderHide;
		_p->ns2__order::orderId = orderId;
		_p->ns2__order::orderProductId = orderProductId;
		_p->ns2__order::orderProductName = orderProductName;
		_p->ns2__order::orderProductNum = orderProductNum;
		_p->ns2__order::orderProductStyle = orderProductStyle;
		_p->ns2__order::orderRefund = orderRefund;
		_p->ns2__order::orderShip = orderShip;
		_p->ns2__order::orderShopId = orderShopId;
		_p->ns2__order::orderTime = orderTime;
	}
	return _p;
}

inline int soap_write_ns2__order(struct soap *soap, ns2__order const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:order", p->soap_type() == SOAP_TYPE_ns2__order ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__order(struct soap *soap, const char *URL, ns2__order const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:order", p->soap_type() == SOAP_TYPE_ns2__order ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__order(struct soap *soap, const char *URL, ns2__order const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:order", p->soap_type() == SOAP_TYPE_ns2__order ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__order(struct soap *soap, const char *URL, ns2__order const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:order", p->soap_type() == SOAP_TYPE_ns2__order ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__order * SOAP_FMAC4 soap_get_ns2__order(struct soap*, ns2__order *, const char*, const char*);

inline int soap_read_ns2__order(struct soap *soap, ns2__order *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__order(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__order(struct soap *soap, const char *URL, ns2__order *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__order(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__order(struct soap *soap, ns2__order *p)
{
	if (::soap_read_ns2__order(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getOrderList_DEFINED
#define SOAP_TYPE_ns2__getOrderList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getOrderList(struct soap*, const char*, int, const ns2__getOrderList *, const char*);
SOAP_FMAC3 ns2__getOrderList * SOAP_FMAC4 soap_in_ns2__getOrderList(struct soap*, const char*, ns2__getOrderList *, const char*);
SOAP_FMAC1 ns2__getOrderList * SOAP_FMAC2 soap_instantiate_ns2__getOrderList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__getOrderList * soap_new_ns2__getOrderList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getOrderList(soap, n, NULL, NULL, NULL);
}

inline ns2__getOrderList * soap_new_req_ns2__getOrderList(
	struct soap *soap)
{
	ns2__getOrderList *_p = ::soap_new_ns2__getOrderList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__getOrderList * soap_new_set_ns2__getOrderList(
	struct soap *soap,
	ns2__order *arg0)
{
	ns2__getOrderList *_p = ::soap_new_ns2__getOrderList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__getOrderList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__getOrderList(struct soap *soap, ns2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderList", p->soap_type() == SOAP_TYPE_ns2__getOrderList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getOrderList(struct soap *soap, const char *URL, ns2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderList", p->soap_type() == SOAP_TYPE_ns2__getOrderList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getOrderList(struct soap *soap, const char *URL, ns2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderList", p->soap_type() == SOAP_TYPE_ns2__getOrderList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getOrderList(struct soap *soap, const char *URL, ns2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getOrderList", p->soap_type() == SOAP_TYPE_ns2__getOrderList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__getOrderList * SOAP_FMAC4 soap_get_ns2__getOrderList(struct soap*, ns2__getOrderList *, const char*, const char*);

inline int soap_read_ns2__getOrderList(struct soap *soap, ns2__getOrderList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getOrderList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getOrderList(struct soap *soap, const char *URL, ns2__getOrderList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getOrderList(struct soap *soap, ns2__getOrderList *p)
{
	if (::soap_read_ns2__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteProductTypeByNameResponse_DEFINED
#define SOAP_TYPE_ns2__deleteProductTypeByNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteProductTypeByNameResponse(struct soap*, const char*, int, const ns2__deleteProductTypeByNameResponse *, const char*);
SOAP_FMAC3 ns2__deleteProductTypeByNameResponse * SOAP_FMAC4 soap_in_ns2__deleteProductTypeByNameResponse(struct soap*, const char*, ns2__deleteProductTypeByNameResponse *, const char*);
SOAP_FMAC1 ns2__deleteProductTypeByNameResponse * SOAP_FMAC2 soap_instantiate_ns2__deleteProductTypeByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteProductTypeByNameResponse * soap_new_ns2__deleteProductTypeByNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteProductTypeByNameResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteProductTypeByNameResponse * soap_new_req_ns2__deleteProductTypeByNameResponse(
	struct soap *soap)
{
	ns2__deleteProductTypeByNameResponse *_p = ::soap_new_ns2__deleteProductTypeByNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteProductTypeByNameResponse * soap_new_set_ns2__deleteProductTypeByNameResponse(
	struct soap *soap)
{
	ns2__deleteProductTypeByNameResponse *_p = ::soap_new_ns2__deleteProductTypeByNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__deleteProductTypeByNameResponse(struct soap *soap, ns2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, ns2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, ns2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, ns2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteProductTypeByNameResponse * SOAP_FMAC4 soap_get_ns2__deleteProductTypeByNameResponse(struct soap*, ns2__deleteProductTypeByNameResponse *, const char*, const char*);

inline int soap_read_ns2__deleteProductTypeByNameResponse(struct soap *soap, ns2__deleteProductTypeByNameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteProductTypeByNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, ns2__deleteProductTypeByNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteProductTypeByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteProductTypeByNameResponse(struct soap *soap, ns2__deleteProductTypeByNameResponse *p)
{
	if (::soap_read_ns2__deleteProductTypeByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__deleteProductTypeByName_DEFINED
#define SOAP_TYPE_ns2__deleteProductTypeByName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteProductTypeByName(struct soap*, const char*, int, const ns2__deleteProductTypeByName *, const char*);
SOAP_FMAC3 ns2__deleteProductTypeByName * SOAP_FMAC4 soap_in_ns2__deleteProductTypeByName(struct soap*, const char*, ns2__deleteProductTypeByName *, const char*);
SOAP_FMAC1 ns2__deleteProductTypeByName * SOAP_FMAC2 soap_instantiate_ns2__deleteProductTypeByName(struct soap*, int, const char*, const char*, size_t*);

inline ns2__deleteProductTypeByName * soap_new_ns2__deleteProductTypeByName(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__deleteProductTypeByName(soap, n, NULL, NULL, NULL);
}

inline ns2__deleteProductTypeByName * soap_new_req_ns2__deleteProductTypeByName(
	struct soap *soap)
{
	ns2__deleteProductTypeByName *_p = ::soap_new_ns2__deleteProductTypeByName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__deleteProductTypeByName * soap_new_set_ns2__deleteProductTypeByName(
	struct soap *soap,
	std::string *arg0)
{
	ns2__deleteProductTypeByName *_p = ::soap_new_ns2__deleteProductTypeByName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__deleteProductTypeByName::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__deleteProductTypeByName(struct soap *soap, ns2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__deleteProductTypeByName(struct soap *soap, const char *URL, ns2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__deleteProductTypeByName(struct soap *soap, const char *URL, ns2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__deleteProductTypeByName(struct soap *soap, const char *URL, ns2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_ns2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__deleteProductTypeByName * SOAP_FMAC4 soap_get_ns2__deleteProductTypeByName(struct soap*, ns2__deleteProductTypeByName *, const char*, const char*);

inline int soap_read_ns2__deleteProductTypeByName(struct soap *soap, ns2__deleteProductTypeByName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__deleteProductTypeByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__deleteProductTypeByName(struct soap *soap, const char *URL, ns2__deleteProductTypeByName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__deleteProductTypeByName(struct soap *soap, ns2__deleteProductTypeByName *p)
{
	if (::soap_read_ns2__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__addProductResponse_DEFINED
#define SOAP_TYPE_ns2__addProductResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addProductResponse(struct soap*, const char*, int, const ns2__addProductResponse *, const char*);
SOAP_FMAC3 ns2__addProductResponse * SOAP_FMAC4 soap_in_ns2__addProductResponse(struct soap*, const char*, ns2__addProductResponse *, const char*);
SOAP_FMAC1 ns2__addProductResponse * SOAP_FMAC2 soap_instantiate_ns2__addProductResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__addProductResponse * soap_new_ns2__addProductResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__addProductResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__addProductResponse * soap_new_req_ns2__addProductResponse(
	struct soap *soap)
{
	ns2__addProductResponse *_p = ::soap_new_ns2__addProductResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__addProductResponse * soap_new_set_ns2__addProductResponse(
	struct soap *soap)
{
	ns2__addProductResponse *_p = ::soap_new_ns2__addProductResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__addProductResponse(struct soap *soap, ns2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductResponse", p->soap_type() == SOAP_TYPE_ns2__addProductResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__addProductResponse(struct soap *soap, const char *URL, ns2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductResponse", p->soap_type() == SOAP_TYPE_ns2__addProductResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__addProductResponse(struct soap *soap, const char *URL, ns2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductResponse", p->soap_type() == SOAP_TYPE_ns2__addProductResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__addProductResponse(struct soap *soap, const char *URL, ns2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProductResponse", p->soap_type() == SOAP_TYPE_ns2__addProductResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__addProductResponse * SOAP_FMAC4 soap_get_ns2__addProductResponse(struct soap*, ns2__addProductResponse *, const char*, const char*);

inline int soap_read_ns2__addProductResponse(struct soap *soap, ns2__addProductResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__addProductResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__addProductResponse(struct soap *soap, const char *URL, ns2__addProductResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__addProductResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__addProductResponse(struct soap *soap, ns2__addProductResponse *p)
{
	if (::soap_read_ns2__addProductResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__addProduct_DEFINED
#define SOAP_TYPE_ns2__addProduct_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addProduct(struct soap*, const char*, int, const ns2__addProduct *, const char*);
SOAP_FMAC3 ns2__addProduct * SOAP_FMAC4 soap_in_ns2__addProduct(struct soap*, const char*, ns2__addProduct *, const char*);
SOAP_FMAC1 ns2__addProduct * SOAP_FMAC2 soap_instantiate_ns2__addProduct(struct soap*, int, const char*, const char*, size_t*);

inline ns2__addProduct * soap_new_ns2__addProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__addProduct(soap, n, NULL, NULL, NULL);
}

inline ns2__addProduct * soap_new_req_ns2__addProduct(
	struct soap *soap)
{
	ns2__addProduct *_p = ::soap_new_ns2__addProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__addProduct * soap_new_set_ns2__addProduct(
	struct soap *soap,
	ns2__product *arg0)
{
	ns2__addProduct *_p = ::soap_new_ns2__addProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__addProduct::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__addProduct(struct soap *soap, ns2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProduct", p->soap_type() == SOAP_TYPE_ns2__addProduct ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__addProduct(struct soap *soap, const char *URL, ns2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProduct", p->soap_type() == SOAP_TYPE_ns2__addProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__addProduct(struct soap *soap, const char *URL, ns2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProduct", p->soap_type() == SOAP_TYPE_ns2__addProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__addProduct(struct soap *soap, const char *URL, ns2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:addProduct", p->soap_type() == SOAP_TYPE_ns2__addProduct ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__addProduct * SOAP_FMAC4 soap_get_ns2__addProduct(struct soap*, ns2__addProduct *, const char*, const char*);

inline int soap_read_ns2__addProduct(struct soap *soap, ns2__addProduct *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__addProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__addProduct(struct soap *soap, const char *URL, ns2__addProduct *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__addProduct(struct soap *soap, ns2__addProduct *p)
{
	if (::soap_read_ns2__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__product_DEFINED
#define SOAP_TYPE_ns2__product_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__product(struct soap*, const char*, int, const ns2__product *, const char*);
SOAP_FMAC3 ns2__product * SOAP_FMAC4 soap_in_ns2__product(struct soap*, const char*, ns2__product *, const char*);
SOAP_FMAC1 ns2__product * SOAP_FMAC2 soap_instantiate_ns2__product(struct soap*, int, const char*, const char*, size_t*);

inline ns2__product * soap_new_ns2__product(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__product(soap, n, NULL, NULL, NULL);
}

inline ns2__product * soap_new_req_ns2__product(
	struct soap *soap,
	int flashSalePurchaseLimit,
	int productBuyNum,
	float productDiscount,
	float productFlashSalePrice,
	int productId,
	int productNum,
	int productPrice,
	int productShopId)
{
	ns2__product *_p = ::soap_new_ns2__product(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__product::flashSalePurchaseLimit = flashSalePurchaseLimit;
		_p->ns2__product::productBuyNum = productBuyNum;
		_p->ns2__product::productDiscount = productDiscount;
		_p->ns2__product::productFlashSalePrice = productFlashSalePrice;
		_p->ns2__product::productId = productId;
		_p->ns2__product::productNum = productNum;
		_p->ns2__product::productPrice = productPrice;
		_p->ns2__product::productShopId = productShopId;
	}
	return _p;
}

inline ns2__product * soap_new_set_ns2__product(
	struct soap *soap,
	time_t *discountEndTime,
	time_t *discountStartTime,
	time_t *flashSaleEndTime,
	int flashSalePurchaseLimit,
	time_t *flashSaleStartTime,
	int productBuyNum,
	float productDiscount,
	float productFlashSalePrice,
	int productId,
	std::string *productImage,
	std::string *productName,
	int productNum,
	int productPrice,
	int productShopId)
{
	ns2__product *_p = ::soap_new_ns2__product(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__product::discountEndTime = discountEndTime;
		_p->ns2__product::discountStartTime = discountStartTime;
		_p->ns2__product::flashSaleEndTime = flashSaleEndTime;
		_p->ns2__product::flashSalePurchaseLimit = flashSalePurchaseLimit;
		_p->ns2__product::flashSaleStartTime = flashSaleStartTime;
		_p->ns2__product::productBuyNum = productBuyNum;
		_p->ns2__product::productDiscount = productDiscount;
		_p->ns2__product::productFlashSalePrice = productFlashSalePrice;
		_p->ns2__product::productId = productId;
		_p->ns2__product::productImage = productImage;
		_p->ns2__product::productName = productName;
		_p->ns2__product::productNum = productNum;
		_p->ns2__product::productPrice = productPrice;
		_p->ns2__product::productShopId = productShopId;
	}
	return _p;
}

inline int soap_write_ns2__product(struct soap *soap, ns2__product const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:product", p->soap_type() == SOAP_TYPE_ns2__product ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__product(struct soap *soap, const char *URL, ns2__product const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:product", p->soap_type() == SOAP_TYPE_ns2__product ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__product(struct soap *soap, const char *URL, ns2__product const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:product", p->soap_type() == SOAP_TYPE_ns2__product ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__product(struct soap *soap, const char *URL, ns2__product const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:product", p->soap_type() == SOAP_TYPE_ns2__product ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__product * SOAP_FMAC4 soap_get_ns2__product(struct soap*, ns2__product *, const char*, const char*);

inline int soap_read_ns2__product(struct soap *soap, ns2__product *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__product(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__product(struct soap *soap, const char *URL, ns2__product *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__product(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__product(struct soap *soap, ns2__product *p)
{
	if (::soap_read_ns2__product(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__selectProductForUpdateResponse_DEFINED
#define SOAP_TYPE_ns2__selectProductForUpdateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__selectProductForUpdateResponse(struct soap*, const char*, int, const ns2__selectProductForUpdateResponse *, const char*);
SOAP_FMAC3 ns2__selectProductForUpdateResponse * SOAP_FMAC4 soap_in_ns2__selectProductForUpdateResponse(struct soap*, const char*, ns2__selectProductForUpdateResponse *, const char*);
SOAP_FMAC1 ns2__selectProductForUpdateResponse * SOAP_FMAC2 soap_instantiate_ns2__selectProductForUpdateResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__selectProductForUpdateResponse * soap_new_ns2__selectProductForUpdateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__selectProductForUpdateResponse(soap, n, NULL, NULL, NULL);
}

inline ns2__selectProductForUpdateResponse * soap_new_req_ns2__selectProductForUpdateResponse(
	struct soap *soap)
{
	ns2__selectProductForUpdateResponse *_p = ::soap_new_ns2__selectProductForUpdateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__selectProductForUpdateResponse * soap_new_set_ns2__selectProductForUpdateResponse(
	struct soap *soap,
	ns2__product *return_)
{
	ns2__selectProductForUpdateResponse *_p = ::soap_new_ns2__selectProductForUpdateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__selectProductForUpdateResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns2__selectProductForUpdateResponse(struct soap *soap, ns2__selectProductForUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdateResponse", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__selectProductForUpdateResponse(struct soap *soap, const char *URL, ns2__selectProductForUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdateResponse", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__selectProductForUpdateResponse(struct soap *soap, const char *URL, ns2__selectProductForUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdateResponse", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__selectProductForUpdateResponse(struct soap *soap, const char *URL, ns2__selectProductForUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdateResponse", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__selectProductForUpdateResponse * SOAP_FMAC4 soap_get_ns2__selectProductForUpdateResponse(struct soap*, ns2__selectProductForUpdateResponse *, const char*, const char*);

inline int soap_read_ns2__selectProductForUpdateResponse(struct soap *soap, ns2__selectProductForUpdateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__selectProductForUpdateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__selectProductForUpdateResponse(struct soap *soap, const char *URL, ns2__selectProductForUpdateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__selectProductForUpdateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__selectProductForUpdateResponse(struct soap *soap, ns2__selectProductForUpdateResponse *p)
{
	if (::soap_read_ns2__selectProductForUpdateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__selectProductForUpdate_DEFINED
#define SOAP_TYPE_ns2__selectProductForUpdate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__selectProductForUpdate(struct soap*, const char*, int, const ns2__selectProductForUpdate *, const char*);
SOAP_FMAC3 ns2__selectProductForUpdate * SOAP_FMAC4 soap_in_ns2__selectProductForUpdate(struct soap*, const char*, ns2__selectProductForUpdate *, const char*);
SOAP_FMAC1 ns2__selectProductForUpdate * SOAP_FMAC2 soap_instantiate_ns2__selectProductForUpdate(struct soap*, int, const char*, const char*, size_t*);

inline ns2__selectProductForUpdate * soap_new_ns2__selectProductForUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__selectProductForUpdate(soap, n, NULL, NULL, NULL);
}

inline ns2__selectProductForUpdate * soap_new_req_ns2__selectProductForUpdate(
	struct soap *soap,
	int arg0)
{
	ns2__selectProductForUpdate *_p = ::soap_new_ns2__selectProductForUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__selectProductForUpdate::arg0 = arg0;
	}
	return _p;
}

inline ns2__selectProductForUpdate * soap_new_set_ns2__selectProductForUpdate(
	struct soap *soap,
	int arg0)
{
	ns2__selectProductForUpdate *_p = ::soap_new_ns2__selectProductForUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__selectProductForUpdate::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns2__selectProductForUpdate(struct soap *soap, ns2__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdate", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__selectProductForUpdate(struct soap *soap, const char *URL, ns2__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdate", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__selectProductForUpdate(struct soap *soap, const char *URL, ns2__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdate", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__selectProductForUpdate(struct soap *soap, const char *URL, ns2__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:selectProductForUpdate", p->soap_type() == SOAP_TYPE_ns2__selectProductForUpdate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__selectProductForUpdate * SOAP_FMAC4 soap_get_ns2__selectProductForUpdate(struct soap*, ns2__selectProductForUpdate *, const char*, const char*);

inline int soap_read_ns2__selectProductForUpdate(struct soap *soap, ns2__selectProductForUpdate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__selectProductForUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__selectProductForUpdate(struct soap *soap, const char *URL, ns2__selectProductForUpdate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__selectProductForUpdate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__selectProductForUpdate(struct soap *soap, ns2__selectProductForUpdate *p)
{
	if (::soap_read_ns2__selectProductForUpdate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__InsertClient_DEFINED
#define SOAP_TYPE___ns1__InsertClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsertClient(struct soap*, struct __ns1__InsertClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsertClient(struct soap*, const struct __ns1__InsertClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsertClient(struct soap*, const char*, int, const struct __ns1__InsertClient *, const char*);
SOAP_FMAC3 struct __ns1__InsertClient * SOAP_FMAC4 soap_in___ns1__InsertClient(struct soap*, const char*, struct __ns1__InsertClient *, const char*);
SOAP_FMAC1 struct __ns1__InsertClient * SOAP_FMAC2 soap_instantiate___ns1__InsertClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsertClient * soap_new___ns1__InsertClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsertClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsertClient * soap_new_req___ns1__InsertClient(
	struct soap *soap)
{
	struct __ns1__InsertClient *_p = ::soap_new___ns1__InsertClient(soap);
	if (_p)
	{	::soap_default___ns1__InsertClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsertClient * soap_new_set___ns1__InsertClient(
	struct soap *soap,
	ns2__InsertClient *ns2__InsertClient_)
{
	struct __ns1__InsertClient *_p = ::soap_new___ns1__InsertClient(soap);
	if (_p)
	{	::soap_default___ns1__InsertClient(soap, _p);
		_p->ns2__InsertClient_ = ns2__InsertClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsertClient(struct soap*, const struct __ns1__InsertClient *, const char*, const char*);

inline int soap_write___ns1__InsertClient(struct soap *soap, struct __ns1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InsertClient(soap, p), 0) || ::soap_put___ns1__InsertClient(soap, p, "-ns1:InsertClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsertClient(struct soap *soap, const char *URL, struct __ns1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertClient(soap, p), 0) || ::soap_put___ns1__InsertClient(soap, p, "-ns1:InsertClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InsertClient(struct soap *soap, const char *URL, struct __ns1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertClient(soap, p), 0) || ::soap_put___ns1__InsertClient(soap, p, "-ns1:InsertClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsertClient(struct soap *soap, const char *URL, struct __ns1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertClient(soap, p), 0) || ::soap_put___ns1__InsertClient(soap, p, "-ns1:InsertClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsertClient * SOAP_FMAC4 soap_get___ns1__InsertClient(struct soap*, struct __ns1__InsertClient *, const char*, const char*);

inline int soap_read___ns1__InsertClient(struct soap *soap, struct __ns1__InsertClient *p)
{
	if (p)
	{	::soap_default___ns1__InsertClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InsertClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsertClient(struct soap *soap, const char *URL, struct __ns1__InsertClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InsertClient(struct soap *soap, struct __ns1__InsertClient *p)
{
	if (::soap_read___ns1__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteShoppingCart_DEFINED
#define SOAP_TYPE___ns1__deleteShoppingCart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteShoppingCart(struct soap*, struct __ns1__deleteShoppingCart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteShoppingCart(struct soap*, const struct __ns1__deleteShoppingCart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteShoppingCart(struct soap*, const char*, int, const struct __ns1__deleteShoppingCart *, const char*);
SOAP_FMAC3 struct __ns1__deleteShoppingCart * SOAP_FMAC4 soap_in___ns1__deleteShoppingCart(struct soap*, const char*, struct __ns1__deleteShoppingCart *, const char*);
SOAP_FMAC1 struct __ns1__deleteShoppingCart * SOAP_FMAC2 soap_instantiate___ns1__deleteShoppingCart(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteShoppingCart * soap_new___ns1__deleteShoppingCart(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteShoppingCart(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteShoppingCart * soap_new_req___ns1__deleteShoppingCart(
	struct soap *soap)
{
	struct __ns1__deleteShoppingCart *_p = ::soap_new___ns1__deleteShoppingCart(soap);
	if (_p)
	{	::soap_default___ns1__deleteShoppingCart(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteShoppingCart * soap_new_set___ns1__deleteShoppingCart(
	struct soap *soap,
	ns2__deleteShoppingCart *ns2__deleteShoppingCart_)
{
	struct __ns1__deleteShoppingCart *_p = ::soap_new___ns1__deleteShoppingCart(soap);
	if (_p)
	{	::soap_default___ns1__deleteShoppingCart(soap, _p);
		_p->ns2__deleteShoppingCart_ = ns2__deleteShoppingCart_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteShoppingCart(struct soap*, const struct __ns1__deleteShoppingCart *, const char*, const char*);

inline int soap_write___ns1__deleteShoppingCart(struct soap *soap, struct __ns1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteShoppingCart(soap, p), 0) || ::soap_put___ns1__deleteShoppingCart(soap, p, "-ns1:deleteShoppingCart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteShoppingCart(struct soap *soap, const char *URL, struct __ns1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteShoppingCart(soap, p), 0) || ::soap_put___ns1__deleteShoppingCart(soap, p, "-ns1:deleteShoppingCart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteShoppingCart(struct soap *soap, const char *URL, struct __ns1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteShoppingCart(soap, p), 0) || ::soap_put___ns1__deleteShoppingCart(soap, p, "-ns1:deleteShoppingCart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteShoppingCart(struct soap *soap, const char *URL, struct __ns1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteShoppingCart(soap, p), 0) || ::soap_put___ns1__deleteShoppingCart(soap, p, "-ns1:deleteShoppingCart", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteShoppingCart * SOAP_FMAC4 soap_get___ns1__deleteShoppingCart(struct soap*, struct __ns1__deleteShoppingCart *, const char*, const char*);

inline int soap_read___ns1__deleteShoppingCart(struct soap *soap, struct __ns1__deleteShoppingCart *p)
{
	if (p)
	{	::soap_default___ns1__deleteShoppingCart(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteShoppingCart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteShoppingCart(struct soap *soap, const char *URL, struct __ns1__deleteShoppingCart *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteShoppingCart(struct soap *soap, struct __ns1__deleteShoppingCart *p)
{
	if (::soap_read___ns1__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getClientByNameAndPwd_DEFINED
#define SOAP_TYPE___ns1__getClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getClientByNameAndPwd(struct soap*, struct __ns1__getClientByNameAndPwd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getClientByNameAndPwd(struct soap*, const struct __ns1__getClientByNameAndPwd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getClientByNameAndPwd(struct soap*, const char*, int, const struct __ns1__getClientByNameAndPwd *, const char*);
SOAP_FMAC3 struct __ns1__getClientByNameAndPwd * SOAP_FMAC4 soap_in___ns1__getClientByNameAndPwd(struct soap*, const char*, struct __ns1__getClientByNameAndPwd *, const char*);
SOAP_FMAC1 struct __ns1__getClientByNameAndPwd * SOAP_FMAC2 soap_instantiate___ns1__getClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getClientByNameAndPwd * soap_new___ns1__getClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getClientByNameAndPwd * soap_new_req___ns1__getClientByNameAndPwd(
	struct soap *soap)
{
	struct __ns1__getClientByNameAndPwd *_p = ::soap_new___ns1__getClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__getClientByNameAndPwd(soap, _p);
	}
	return _p;
}

inline struct __ns1__getClientByNameAndPwd * soap_new_set___ns1__getClientByNameAndPwd(
	struct soap *soap,
	ns2__getClientByNameAndPwd *ns2__getClientByNameAndPwd_)
{
	struct __ns1__getClientByNameAndPwd *_p = ::soap_new___ns1__getClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__getClientByNameAndPwd(soap, _p);
		_p->ns2__getClientByNameAndPwd_ = ns2__getClientByNameAndPwd_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getClientByNameAndPwd(struct soap*, const struct __ns1__getClientByNameAndPwd *, const char*, const char*);

inline int soap_write___ns1__getClientByNameAndPwd(struct soap *soap, struct __ns1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getClientByNameAndPwd(soap, p, "-ns1:getClientByNameAndPwd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getClientByNameAndPwd(soap, p, "-ns1:getClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getClientByNameAndPwd(soap, p, "-ns1:getClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getClientByNameAndPwd(soap, p, "-ns1:getClientByNameAndPwd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getClientByNameAndPwd * SOAP_FMAC4 soap_get___ns1__getClientByNameAndPwd(struct soap*, struct __ns1__getClientByNameAndPwd *, const char*, const char*);

inline int soap_read___ns1__getClientByNameAndPwd(struct soap *soap, struct __ns1__getClientByNameAndPwd *p)
{
	if (p)
	{	::soap_default___ns1__getClientByNameAndPwd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getClientByNameAndPwd(struct soap *soap, struct __ns1__getClientByNameAndPwd *p)
{
	if (::soap_read___ns1__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getProductLikeList_DEFINED
#define SOAP_TYPE___ns1__getProductLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProductLikeList(struct soap*, struct __ns1__getProductLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProductLikeList(struct soap*, const struct __ns1__getProductLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProductLikeList(struct soap*, const char*, int, const struct __ns1__getProductLikeList *, const char*);
SOAP_FMAC3 struct __ns1__getProductLikeList * SOAP_FMAC4 soap_in___ns1__getProductLikeList(struct soap*, const char*, struct __ns1__getProductLikeList *, const char*);
SOAP_FMAC1 struct __ns1__getProductLikeList * SOAP_FMAC2 soap_instantiate___ns1__getProductLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProductLikeList * soap_new___ns1__getProductLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getProductLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getProductLikeList * soap_new_req___ns1__getProductLikeList(
	struct soap *soap)
{
	struct __ns1__getProductLikeList *_p = ::soap_new___ns1__getProductLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getProductLikeList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getProductLikeList * soap_new_set___ns1__getProductLikeList(
	struct soap *soap,
	ns2__getProductLikeList *ns2__getProductLikeList_)
{
	struct __ns1__getProductLikeList *_p = ::soap_new___ns1__getProductLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getProductLikeList(soap, _p);
		_p->ns2__getProductLikeList_ = ns2__getProductLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProductLikeList(struct soap*, const struct __ns1__getProductLikeList *, const char*, const char*);

inline int soap_write___ns1__getProductLikeList(struct soap *soap, struct __ns1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getProductLikeList(soap, p), 0) || ::soap_put___ns1__getProductLikeList(soap, p, "-ns1:getProductLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getProductLikeList(struct soap *soap, const char *URL, struct __ns1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductLikeList(soap, p), 0) || ::soap_put___ns1__getProductLikeList(soap, p, "-ns1:getProductLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getProductLikeList(struct soap *soap, const char *URL, struct __ns1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductLikeList(soap, p), 0) || ::soap_put___ns1__getProductLikeList(soap, p, "-ns1:getProductLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getProductLikeList(struct soap *soap, const char *URL, struct __ns1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductLikeList(soap, p), 0) || ::soap_put___ns1__getProductLikeList(soap, p, "-ns1:getProductLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getProductLikeList * SOAP_FMAC4 soap_get___ns1__getProductLikeList(struct soap*, struct __ns1__getProductLikeList *, const char*, const char*);

inline int soap_read___ns1__getProductLikeList(struct soap *soap, struct __ns1__getProductLikeList *p)
{
	if (p)
	{	::soap_default___ns1__getProductLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getProductLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getProductLikeList(struct soap *soap, const char *URL, struct __ns1__getProductLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getProductLikeList(struct soap *soap, struct __ns1__getProductLikeList *p)
{
	if (::soap_read___ns1__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteMessageFromClient_DEFINED
#define SOAP_TYPE___ns1__deleteMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteMessageFromClient(struct soap*, struct __ns1__deleteMessageFromClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteMessageFromClient(struct soap*, const struct __ns1__deleteMessageFromClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteMessageFromClient(struct soap*, const char*, int, const struct __ns1__deleteMessageFromClient *, const char*);
SOAP_FMAC3 struct __ns1__deleteMessageFromClient * SOAP_FMAC4 soap_in___ns1__deleteMessageFromClient(struct soap*, const char*, struct __ns1__deleteMessageFromClient *, const char*);
SOAP_FMAC1 struct __ns1__deleteMessageFromClient * SOAP_FMAC2 soap_instantiate___ns1__deleteMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteMessageFromClient * soap_new___ns1__deleteMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteMessageFromClient * soap_new_req___ns1__deleteMessageFromClient(
	struct soap *soap)
{
	struct __ns1__deleteMessageFromClient *_p = ::soap_new___ns1__deleteMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__deleteMessageFromClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteMessageFromClient * soap_new_set___ns1__deleteMessageFromClient(
	struct soap *soap,
	ns2__deleteMessageFromClient *ns2__deleteMessageFromClient_)
{
	struct __ns1__deleteMessageFromClient *_p = ::soap_new___ns1__deleteMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__deleteMessageFromClient(soap, _p);
		_p->ns2__deleteMessageFromClient_ = ns2__deleteMessageFromClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteMessageFromClient(struct soap*, const struct __ns1__deleteMessageFromClient *, const char*, const char*);

inline int soap_write___ns1__deleteMessageFromClient(struct soap *soap, struct __ns1__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteMessageFromClient(soap, p), 0) || ::soap_put___ns1__deleteMessageFromClient(soap, p, "-ns1:deleteMessageFromClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteMessageFromClient(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteMessageFromClient(soap, p), 0) || ::soap_put___ns1__deleteMessageFromClient(soap, p, "-ns1:deleteMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteMessageFromClient(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteMessageFromClient(soap, p), 0) || ::soap_put___ns1__deleteMessageFromClient(soap, p, "-ns1:deleteMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteMessageFromClient(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteMessageFromClient(soap, p), 0) || ::soap_put___ns1__deleteMessageFromClient(soap, p, "-ns1:deleteMessageFromClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteMessageFromClient * SOAP_FMAC4 soap_get___ns1__deleteMessageFromClient(struct soap*, struct __ns1__deleteMessageFromClient *, const char*, const char*);

inline int soap_read___ns1__deleteMessageFromClient(struct soap *soap, struct __ns1__deleteMessageFromClient *p)
{
	if (p)
	{	::soap_default___ns1__deleteMessageFromClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteMessageFromClient(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteMessageFromClient(struct soap *soap, struct __ns1__deleteMessageFromClient *p)
{
	if (::soap_read___ns1__deleteMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__addProductType_DEFINED
#define SOAP_TYPE___ns1__addProductType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addProductType(struct soap*, struct __ns1__addProductType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addProductType(struct soap*, const struct __ns1__addProductType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addProductType(struct soap*, const char*, int, const struct __ns1__addProductType *, const char*);
SOAP_FMAC3 struct __ns1__addProductType * SOAP_FMAC4 soap_in___ns1__addProductType(struct soap*, const char*, struct __ns1__addProductType *, const char*);
SOAP_FMAC1 struct __ns1__addProductType * SOAP_FMAC2 soap_instantiate___ns1__addProductType(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__addProductType * soap_new___ns1__addProductType(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__addProductType(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__addProductType * soap_new_req___ns1__addProductType(
	struct soap *soap)
{
	struct __ns1__addProductType *_p = ::soap_new___ns1__addProductType(soap);
	if (_p)
	{	::soap_default___ns1__addProductType(soap, _p);
	}
	return _p;
}

inline struct __ns1__addProductType * soap_new_set___ns1__addProductType(
	struct soap *soap,
	ns2__addProductType *ns2__addProductType_)
{
	struct __ns1__addProductType *_p = ::soap_new___ns1__addProductType(soap);
	if (_p)
	{	::soap_default___ns1__addProductType(soap, _p);
		_p->ns2__addProductType_ = ns2__addProductType_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addProductType(struct soap*, const struct __ns1__addProductType *, const char*, const char*);

inline int soap_write___ns1__addProductType(struct soap *soap, struct __ns1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__addProductType(soap, p), 0) || ::soap_put___ns1__addProductType(soap, p, "-ns1:addProductType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__addProductType(struct soap *soap, const char *URL, struct __ns1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addProductType(soap, p), 0) || ::soap_put___ns1__addProductType(soap, p, "-ns1:addProductType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__addProductType(struct soap *soap, const char *URL, struct __ns1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addProductType(soap, p), 0) || ::soap_put___ns1__addProductType(soap, p, "-ns1:addProductType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__addProductType(struct soap *soap, const char *URL, struct __ns1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addProductType(soap, p), 0) || ::soap_put___ns1__addProductType(soap, p, "-ns1:addProductType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__addProductType * SOAP_FMAC4 soap_get___ns1__addProductType(struct soap*, struct __ns1__addProductType *, const char*, const char*);

inline int soap_read___ns1__addProductType(struct soap *soap, struct __ns1__addProductType *p)
{
	if (p)
	{	::soap_default___ns1__addProductType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__addProductType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__addProductType(struct soap *soap, const char *URL, struct __ns1__addProductType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__addProductType(struct soap *soap, struct __ns1__addProductType *p)
{
	if (::soap_read___ns1__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getOrderListByInfo_DEFINED
#define SOAP_TYPE___ns1__getOrderListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOrderListByInfo(struct soap*, struct __ns1__getOrderListByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOrderListByInfo(struct soap*, const struct __ns1__getOrderListByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOrderListByInfo(struct soap*, const char*, int, const struct __ns1__getOrderListByInfo *, const char*);
SOAP_FMAC3 struct __ns1__getOrderListByInfo * SOAP_FMAC4 soap_in___ns1__getOrderListByInfo(struct soap*, const char*, struct __ns1__getOrderListByInfo *, const char*);
SOAP_FMAC1 struct __ns1__getOrderListByInfo * SOAP_FMAC2 soap_instantiate___ns1__getOrderListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getOrderListByInfo * soap_new___ns1__getOrderListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getOrderListByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getOrderListByInfo * soap_new_req___ns1__getOrderListByInfo(
	struct soap *soap)
{
	struct __ns1__getOrderListByInfo *_p = ::soap_new___ns1__getOrderListByInfo(soap);
	if (_p)
	{	::soap_default___ns1__getOrderListByInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__getOrderListByInfo * soap_new_set___ns1__getOrderListByInfo(
	struct soap *soap,
	ns2__getOrderListByInfo *ns2__getOrderListByInfo_)
{
	struct __ns1__getOrderListByInfo *_p = ::soap_new___ns1__getOrderListByInfo(soap);
	if (_p)
	{	::soap_default___ns1__getOrderListByInfo(soap, _p);
		_p->ns2__getOrderListByInfo_ = ns2__getOrderListByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOrderListByInfo(struct soap*, const struct __ns1__getOrderListByInfo *, const char*, const char*);

inline int soap_write___ns1__getOrderListByInfo(struct soap *soap, struct __ns1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getOrderListByInfo(soap, p), 0) || ::soap_put___ns1__getOrderListByInfo(soap, p, "-ns1:getOrderListByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getOrderListByInfo(struct soap *soap, const char *URL, struct __ns1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderListByInfo(soap, p), 0) || ::soap_put___ns1__getOrderListByInfo(soap, p, "-ns1:getOrderListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getOrderListByInfo(struct soap *soap, const char *URL, struct __ns1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderListByInfo(soap, p), 0) || ::soap_put___ns1__getOrderListByInfo(soap, p, "-ns1:getOrderListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getOrderListByInfo(struct soap *soap, const char *URL, struct __ns1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderListByInfo(soap, p), 0) || ::soap_put___ns1__getOrderListByInfo(soap, p, "-ns1:getOrderListByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getOrderListByInfo * SOAP_FMAC4 soap_get___ns1__getOrderListByInfo(struct soap*, struct __ns1__getOrderListByInfo *, const char*, const char*);

inline int soap_read___ns1__getOrderListByInfo(struct soap *soap, struct __ns1__getOrderListByInfo *p)
{
	if (p)
	{	::soap_default___ns1__getOrderListByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getOrderListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getOrderListByInfo(struct soap *soap, const char *URL, struct __ns1__getOrderListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getOrderListByInfo(struct soap *soap, struct __ns1__getOrderListByInfo *p)
{
	if (::soap_read___ns1__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getShopList_DEFINED
#define SOAP_TYPE___ns1__getShopList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getShopList(struct soap*, struct __ns1__getShopList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getShopList(struct soap*, const struct __ns1__getShopList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getShopList(struct soap*, const char*, int, const struct __ns1__getShopList *, const char*);
SOAP_FMAC3 struct __ns1__getShopList * SOAP_FMAC4 soap_in___ns1__getShopList(struct soap*, const char*, struct __ns1__getShopList *, const char*);
SOAP_FMAC1 struct __ns1__getShopList * SOAP_FMAC2 soap_instantiate___ns1__getShopList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getShopList * soap_new___ns1__getShopList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getShopList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getShopList * soap_new_req___ns1__getShopList(
	struct soap *soap)
{
	struct __ns1__getShopList *_p = ::soap_new___ns1__getShopList(soap);
	if (_p)
	{	::soap_default___ns1__getShopList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getShopList * soap_new_set___ns1__getShopList(
	struct soap *soap,
	ns2__getShopList *ns2__getShopList_)
{
	struct __ns1__getShopList *_p = ::soap_new___ns1__getShopList(soap);
	if (_p)
	{	::soap_default___ns1__getShopList(soap, _p);
		_p->ns2__getShopList_ = ns2__getShopList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getShopList(struct soap*, const struct __ns1__getShopList *, const char*, const char*);

inline int soap_write___ns1__getShopList(struct soap *soap, struct __ns1__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getShopList(soap, p), 0) || ::soap_put___ns1__getShopList(soap, p, "-ns1:getShopList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getShopList(struct soap *soap, const char *URL, struct __ns1__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopList(soap, p), 0) || ::soap_put___ns1__getShopList(soap, p, "-ns1:getShopList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getShopList(struct soap *soap, const char *URL, struct __ns1__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopList(soap, p), 0) || ::soap_put___ns1__getShopList(soap, p, "-ns1:getShopList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getShopList(struct soap *soap, const char *URL, struct __ns1__getShopList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopList(soap, p), 0) || ::soap_put___ns1__getShopList(soap, p, "-ns1:getShopList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getShopList * SOAP_FMAC4 soap_get___ns1__getShopList(struct soap*, struct __ns1__getShopList *, const char*, const char*);

inline int soap_read___ns1__getShopList(struct soap *soap, struct __ns1__getShopList *p)
{
	if (p)
	{	::soap_default___ns1__getShopList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getShopList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getShopList(struct soap *soap, const char *URL, struct __ns1__getShopList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getShopList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getShopList(struct soap *soap, struct __ns1__getShopList *p)
{
	if (::soap_read___ns1__getShopList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getClientLikeList_DEFINED
#define SOAP_TYPE___ns1__getClientLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getClientLikeList(struct soap*, struct __ns1__getClientLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getClientLikeList(struct soap*, const struct __ns1__getClientLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getClientLikeList(struct soap*, const char*, int, const struct __ns1__getClientLikeList *, const char*);
SOAP_FMAC3 struct __ns1__getClientLikeList * SOAP_FMAC4 soap_in___ns1__getClientLikeList(struct soap*, const char*, struct __ns1__getClientLikeList *, const char*);
SOAP_FMAC1 struct __ns1__getClientLikeList * SOAP_FMAC2 soap_instantiate___ns1__getClientLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getClientLikeList * soap_new___ns1__getClientLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getClientLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getClientLikeList * soap_new_req___ns1__getClientLikeList(
	struct soap *soap)
{
	struct __ns1__getClientLikeList *_p = ::soap_new___ns1__getClientLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getClientLikeList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getClientLikeList * soap_new_set___ns1__getClientLikeList(
	struct soap *soap,
	ns2__getClientLikeList *ns2__getClientLikeList_)
{
	struct __ns1__getClientLikeList *_p = ::soap_new___ns1__getClientLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getClientLikeList(soap, _p);
		_p->ns2__getClientLikeList_ = ns2__getClientLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getClientLikeList(struct soap*, const struct __ns1__getClientLikeList *, const char*, const char*);

inline int soap_write___ns1__getClientLikeList(struct soap *soap, struct __ns1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getClientLikeList(soap, p), 0) || ::soap_put___ns1__getClientLikeList(soap, p, "-ns1:getClientLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getClientLikeList(struct soap *soap, const char *URL, struct __ns1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientLikeList(soap, p), 0) || ::soap_put___ns1__getClientLikeList(soap, p, "-ns1:getClientLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getClientLikeList(struct soap *soap, const char *URL, struct __ns1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientLikeList(soap, p), 0) || ::soap_put___ns1__getClientLikeList(soap, p, "-ns1:getClientLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getClientLikeList(struct soap *soap, const char *URL, struct __ns1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientLikeList(soap, p), 0) || ::soap_put___ns1__getClientLikeList(soap, p, "-ns1:getClientLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getClientLikeList * SOAP_FMAC4 soap_get___ns1__getClientLikeList(struct soap*, struct __ns1__getClientLikeList *, const char*, const char*);

inline int soap_read___ns1__getClientLikeList(struct soap *soap, struct __ns1__getClientLikeList *p)
{
	if (p)
	{	::soap_default___ns1__getClientLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getClientLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getClientLikeList(struct soap *soap, const char *URL, struct __ns1__getClientLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getClientLikeList(struct soap *soap, struct __ns1__getClientLikeList *p)
{
	if (::soap_read___ns1__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getUnreadMessageFromShop_DEFINED
#define SOAP_TYPE___ns1__getUnreadMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getUnreadMessageFromShop(struct soap*, struct __ns1__getUnreadMessageFromShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUnreadMessageFromShop(struct soap*, const struct __ns1__getUnreadMessageFromShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getUnreadMessageFromShop(struct soap*, const char*, int, const struct __ns1__getUnreadMessageFromShop *, const char*);
SOAP_FMAC3 struct __ns1__getUnreadMessageFromShop * SOAP_FMAC4 soap_in___ns1__getUnreadMessageFromShop(struct soap*, const char*, struct __ns1__getUnreadMessageFromShop *, const char*);
SOAP_FMAC1 struct __ns1__getUnreadMessageFromShop * SOAP_FMAC2 soap_instantiate___ns1__getUnreadMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getUnreadMessageFromShop * soap_new___ns1__getUnreadMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getUnreadMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getUnreadMessageFromShop * soap_new_req___ns1__getUnreadMessageFromShop(
	struct soap *soap)
{
	struct __ns1__getUnreadMessageFromShop *_p = ::soap_new___ns1__getUnreadMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__getUnreadMessageFromShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__getUnreadMessageFromShop * soap_new_set___ns1__getUnreadMessageFromShop(
	struct soap *soap,
	ns2__getUnreadMessageFromShop *ns2__getUnreadMessageFromShop_)
{
	struct __ns1__getUnreadMessageFromShop *_p = ::soap_new___ns1__getUnreadMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__getUnreadMessageFromShop(soap, _p);
		_p->ns2__getUnreadMessageFromShop_ = ns2__getUnreadMessageFromShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getUnreadMessageFromShop(struct soap*, const struct __ns1__getUnreadMessageFromShop *, const char*, const char*);

inline int soap_write___ns1__getUnreadMessageFromShop(struct soap *soap, struct __ns1__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getUnreadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromShop(soap, p, "-ns1:getUnreadMessageFromShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getUnreadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getUnreadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromShop(soap, p, "-ns1:getUnreadMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getUnreadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getUnreadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromShop(soap, p, "-ns1:getUnreadMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getUnreadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getUnreadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromShop(soap, p, "-ns1:getUnreadMessageFromShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getUnreadMessageFromShop * SOAP_FMAC4 soap_get___ns1__getUnreadMessageFromShop(struct soap*, struct __ns1__getUnreadMessageFromShop *, const char*, const char*);

inline int soap_read___ns1__getUnreadMessageFromShop(struct soap *soap, struct __ns1__getUnreadMessageFromShop *p)
{
	if (p)
	{	::soap_default___ns1__getUnreadMessageFromShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getUnreadMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getUnreadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getUnreadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getUnreadMessageFromShop(struct soap *soap, struct __ns1__getUnreadMessageFromShop *p)
{
	if (::soap_read___ns1__getUnreadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getOrderLikeList_DEFINED
#define SOAP_TYPE___ns1__getOrderLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOrderLikeList(struct soap*, struct __ns1__getOrderLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOrderLikeList(struct soap*, const struct __ns1__getOrderLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOrderLikeList(struct soap*, const char*, int, const struct __ns1__getOrderLikeList *, const char*);
SOAP_FMAC3 struct __ns1__getOrderLikeList * SOAP_FMAC4 soap_in___ns1__getOrderLikeList(struct soap*, const char*, struct __ns1__getOrderLikeList *, const char*);
SOAP_FMAC1 struct __ns1__getOrderLikeList * SOAP_FMAC2 soap_instantiate___ns1__getOrderLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getOrderLikeList * soap_new___ns1__getOrderLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getOrderLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getOrderLikeList * soap_new_req___ns1__getOrderLikeList(
	struct soap *soap)
{
	struct __ns1__getOrderLikeList *_p = ::soap_new___ns1__getOrderLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getOrderLikeList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getOrderLikeList * soap_new_set___ns1__getOrderLikeList(
	struct soap *soap,
	ns2__getOrderLikeList *ns2__getOrderLikeList_)
{
	struct __ns1__getOrderLikeList *_p = ::soap_new___ns1__getOrderLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getOrderLikeList(soap, _p);
		_p->ns2__getOrderLikeList_ = ns2__getOrderLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOrderLikeList(struct soap*, const struct __ns1__getOrderLikeList *, const char*, const char*);

inline int soap_write___ns1__getOrderLikeList(struct soap *soap, struct __ns1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getOrderLikeList(soap, p), 0) || ::soap_put___ns1__getOrderLikeList(soap, p, "-ns1:getOrderLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getOrderLikeList(struct soap *soap, const char *URL, struct __ns1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderLikeList(soap, p), 0) || ::soap_put___ns1__getOrderLikeList(soap, p, "-ns1:getOrderLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getOrderLikeList(struct soap *soap, const char *URL, struct __ns1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderLikeList(soap, p), 0) || ::soap_put___ns1__getOrderLikeList(soap, p, "-ns1:getOrderLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getOrderLikeList(struct soap *soap, const char *URL, struct __ns1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderLikeList(soap, p), 0) || ::soap_put___ns1__getOrderLikeList(soap, p, "-ns1:getOrderLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getOrderLikeList * SOAP_FMAC4 soap_get___ns1__getOrderLikeList(struct soap*, struct __ns1__getOrderLikeList *, const char*, const char*);

inline int soap_read___ns1__getOrderLikeList(struct soap *soap, struct __ns1__getOrderLikeList *p)
{
	if (p)
	{	::soap_default___ns1__getOrderLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getOrderLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getOrderLikeList(struct soap *soap, const char *URL, struct __ns1__getOrderLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getOrderLikeList(struct soap *soap, struct __ns1__getOrderLikeList *p)
{
	if (::soap_read___ns1__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteMessageFromShop_DEFINED
#define SOAP_TYPE___ns1__deleteMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteMessageFromShop(struct soap*, struct __ns1__deleteMessageFromShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteMessageFromShop(struct soap*, const struct __ns1__deleteMessageFromShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteMessageFromShop(struct soap*, const char*, int, const struct __ns1__deleteMessageFromShop *, const char*);
SOAP_FMAC3 struct __ns1__deleteMessageFromShop * SOAP_FMAC4 soap_in___ns1__deleteMessageFromShop(struct soap*, const char*, struct __ns1__deleteMessageFromShop *, const char*);
SOAP_FMAC1 struct __ns1__deleteMessageFromShop * SOAP_FMAC2 soap_instantiate___ns1__deleteMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteMessageFromShop * soap_new___ns1__deleteMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteMessageFromShop * soap_new_req___ns1__deleteMessageFromShop(
	struct soap *soap)
{
	struct __ns1__deleteMessageFromShop *_p = ::soap_new___ns1__deleteMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__deleteMessageFromShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteMessageFromShop * soap_new_set___ns1__deleteMessageFromShop(
	struct soap *soap,
	ns2__deleteMessageFromShop *ns2__deleteMessageFromShop_)
{
	struct __ns1__deleteMessageFromShop *_p = ::soap_new___ns1__deleteMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__deleteMessageFromShop(soap, _p);
		_p->ns2__deleteMessageFromShop_ = ns2__deleteMessageFromShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteMessageFromShop(struct soap*, const struct __ns1__deleteMessageFromShop *, const char*, const char*);

inline int soap_write___ns1__deleteMessageFromShop(struct soap *soap, struct __ns1__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteMessageFromShop(soap, p), 0) || ::soap_put___ns1__deleteMessageFromShop(soap, p, "-ns1:deleteMessageFromShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteMessageFromShop(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteMessageFromShop(soap, p), 0) || ::soap_put___ns1__deleteMessageFromShop(soap, p, "-ns1:deleteMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteMessageFromShop(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteMessageFromShop(soap, p), 0) || ::soap_put___ns1__deleteMessageFromShop(soap, p, "-ns1:deleteMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteMessageFromShop(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteMessageFromShop(soap, p), 0) || ::soap_put___ns1__deleteMessageFromShop(soap, p, "-ns1:deleteMessageFromShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteMessageFromShop * SOAP_FMAC4 soap_get___ns1__deleteMessageFromShop(struct soap*, struct __ns1__deleteMessageFromShop *, const char*, const char*);

inline int soap_read___ns1__deleteMessageFromShop(struct soap *soap, struct __ns1__deleteMessageFromShop *p)
{
	if (p)
	{	::soap_default___ns1__deleteMessageFromShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteMessageFromShop(struct soap *soap, const char *URL, struct __ns1__deleteMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteMessageFromShop(struct soap *soap, struct __ns1__deleteMessageFromShop *p)
{
	if (::soap_read___ns1__deleteMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getMessageFromShop_DEFINED
#define SOAP_TYPE___ns1__getMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMessageFromShop(struct soap*, struct __ns1__getMessageFromShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMessageFromShop(struct soap*, const struct __ns1__getMessageFromShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMessageFromShop(struct soap*, const char*, int, const struct __ns1__getMessageFromShop *, const char*);
SOAP_FMAC3 struct __ns1__getMessageFromShop * SOAP_FMAC4 soap_in___ns1__getMessageFromShop(struct soap*, const char*, struct __ns1__getMessageFromShop *, const char*);
SOAP_FMAC1 struct __ns1__getMessageFromShop * SOAP_FMAC2 soap_instantiate___ns1__getMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMessageFromShop * soap_new___ns1__getMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMessageFromShop * soap_new_req___ns1__getMessageFromShop(
	struct soap *soap)
{
	struct __ns1__getMessageFromShop *_p = ::soap_new___ns1__getMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__getMessageFromShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMessageFromShop * soap_new_set___ns1__getMessageFromShop(
	struct soap *soap,
	ns2__getMessageFromShop *ns2__getMessageFromShop_)
{
	struct __ns1__getMessageFromShop *_p = ::soap_new___ns1__getMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__getMessageFromShop(soap, _p);
		_p->ns2__getMessageFromShop_ = ns2__getMessageFromShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMessageFromShop(struct soap*, const struct __ns1__getMessageFromShop *, const char*, const char*);

inline int soap_write___ns1__getMessageFromShop(struct soap *soap, struct __ns1__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getMessageFromShop(soap, p), 0) || ::soap_put___ns1__getMessageFromShop(soap, p, "-ns1:getMessageFromShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessageFromShop(soap, p), 0) || ::soap_put___ns1__getMessageFromShop(soap, p, "-ns1:getMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessageFromShop(soap, p), 0) || ::soap_put___ns1__getMessageFromShop(soap, p, "-ns1:getMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessageFromShop(soap, p), 0) || ::soap_put___ns1__getMessageFromShop(soap, p, "-ns1:getMessageFromShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMessageFromShop * SOAP_FMAC4 soap_get___ns1__getMessageFromShop(struct soap*, struct __ns1__getMessageFromShop *, const char*, const char*);

inline int soap_read___ns1__getMessageFromShop(struct soap *soap, struct __ns1__getMessageFromShop *p)
{
	if (p)
	{	::soap_default___ns1__getMessageFromShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getMessageFromShop(struct soap *soap, struct __ns1__getMessageFromShop *p)
{
	if (::soap_read___ns1__getMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getShopLikeList_DEFINED
#define SOAP_TYPE___ns1__getShopLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getShopLikeList(struct soap*, struct __ns1__getShopLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getShopLikeList(struct soap*, const struct __ns1__getShopLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getShopLikeList(struct soap*, const char*, int, const struct __ns1__getShopLikeList *, const char*);
SOAP_FMAC3 struct __ns1__getShopLikeList * SOAP_FMAC4 soap_in___ns1__getShopLikeList(struct soap*, const char*, struct __ns1__getShopLikeList *, const char*);
SOAP_FMAC1 struct __ns1__getShopLikeList * SOAP_FMAC2 soap_instantiate___ns1__getShopLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getShopLikeList * soap_new___ns1__getShopLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getShopLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getShopLikeList * soap_new_req___ns1__getShopLikeList(
	struct soap *soap)
{
	struct __ns1__getShopLikeList *_p = ::soap_new___ns1__getShopLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getShopLikeList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getShopLikeList * soap_new_set___ns1__getShopLikeList(
	struct soap *soap,
	ns2__getShopLikeList *ns2__getShopLikeList_)
{
	struct __ns1__getShopLikeList *_p = ::soap_new___ns1__getShopLikeList(soap);
	if (_p)
	{	::soap_default___ns1__getShopLikeList(soap, _p);
		_p->ns2__getShopLikeList_ = ns2__getShopLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getShopLikeList(struct soap*, const struct __ns1__getShopLikeList *, const char*, const char*);

inline int soap_write___ns1__getShopLikeList(struct soap *soap, struct __ns1__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getShopLikeList(soap, p), 0) || ::soap_put___ns1__getShopLikeList(soap, p, "-ns1:getShopLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getShopLikeList(struct soap *soap, const char *URL, struct __ns1__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopLikeList(soap, p), 0) || ::soap_put___ns1__getShopLikeList(soap, p, "-ns1:getShopLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getShopLikeList(struct soap *soap, const char *URL, struct __ns1__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopLikeList(soap, p), 0) || ::soap_put___ns1__getShopLikeList(soap, p, "-ns1:getShopLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getShopLikeList(struct soap *soap, const char *URL, struct __ns1__getShopLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopLikeList(soap, p), 0) || ::soap_put___ns1__getShopLikeList(soap, p, "-ns1:getShopLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getShopLikeList * SOAP_FMAC4 soap_get___ns1__getShopLikeList(struct soap*, struct __ns1__getShopLikeList *, const char*, const char*);

inline int soap_read___ns1__getShopLikeList(struct soap *soap, struct __ns1__getShopLikeList *p)
{
	if (p)
	{	::soap_default___ns1__getShopLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getShopLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getShopLikeList(struct soap *soap, const char *URL, struct __ns1__getShopLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getShopLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getShopLikeList(struct soap *soap, struct __ns1__getShopLikeList *p)
{
	if (::soap_read___ns1__getShopLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InsertMessage_DEFINED
#define SOAP_TYPE___ns1__InsertMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsertMessage(struct soap*, struct __ns1__InsertMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsertMessage(struct soap*, const struct __ns1__InsertMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsertMessage(struct soap*, const char*, int, const struct __ns1__InsertMessage *, const char*);
SOAP_FMAC3 struct __ns1__InsertMessage * SOAP_FMAC4 soap_in___ns1__InsertMessage(struct soap*, const char*, struct __ns1__InsertMessage *, const char*);
SOAP_FMAC1 struct __ns1__InsertMessage * SOAP_FMAC2 soap_instantiate___ns1__InsertMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsertMessage * soap_new___ns1__InsertMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsertMessage(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsertMessage * soap_new_req___ns1__InsertMessage(
	struct soap *soap)
{
	struct __ns1__InsertMessage *_p = ::soap_new___ns1__InsertMessage(soap);
	if (_p)
	{	::soap_default___ns1__InsertMessage(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsertMessage * soap_new_set___ns1__InsertMessage(
	struct soap *soap,
	ns2__InsertMessage *ns2__InsertMessage_)
{
	struct __ns1__InsertMessage *_p = ::soap_new___ns1__InsertMessage(soap);
	if (_p)
	{	::soap_default___ns1__InsertMessage(soap, _p);
		_p->ns2__InsertMessage_ = ns2__InsertMessage_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsertMessage(struct soap*, const struct __ns1__InsertMessage *, const char*, const char*);

inline int soap_write___ns1__InsertMessage(struct soap *soap, struct __ns1__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InsertMessage(soap, p), 0) || ::soap_put___ns1__InsertMessage(soap, p, "-ns1:InsertMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsertMessage(struct soap *soap, const char *URL, struct __ns1__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertMessage(soap, p), 0) || ::soap_put___ns1__InsertMessage(soap, p, "-ns1:InsertMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InsertMessage(struct soap *soap, const char *URL, struct __ns1__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertMessage(soap, p), 0) || ::soap_put___ns1__InsertMessage(soap, p, "-ns1:InsertMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsertMessage(struct soap *soap, const char *URL, struct __ns1__InsertMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertMessage(soap, p), 0) || ::soap_put___ns1__InsertMessage(soap, p, "-ns1:InsertMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsertMessage * SOAP_FMAC4 soap_get___ns1__InsertMessage(struct soap*, struct __ns1__InsertMessage *, const char*, const char*);

inline int soap_read___ns1__InsertMessage(struct soap *soap, struct __ns1__InsertMessage *p)
{
	if (p)
	{	::soap_default___ns1__InsertMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InsertMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsertMessage(struct soap *soap, const char *URL, struct __ns1__InsertMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InsertMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InsertMessage(struct soap *soap, struct __ns1__InsertMessage *p)
{
	if (::soap_read___ns1__InsertMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__updateHistory_DEFINED
#define SOAP_TYPE___ns1__updateHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateHistory(struct soap*, struct __ns1__updateHistory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateHistory(struct soap*, const struct __ns1__updateHistory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateHistory(struct soap*, const char*, int, const struct __ns1__updateHistory *, const char*);
SOAP_FMAC3 struct __ns1__updateHistory * SOAP_FMAC4 soap_in___ns1__updateHistory(struct soap*, const char*, struct __ns1__updateHistory *, const char*);
SOAP_FMAC1 struct __ns1__updateHistory * SOAP_FMAC2 soap_instantiate___ns1__updateHistory(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateHistory * soap_new___ns1__updateHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__updateHistory(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateHistory * soap_new_req___ns1__updateHistory(
	struct soap *soap)
{
	struct __ns1__updateHistory *_p = ::soap_new___ns1__updateHistory(soap);
	if (_p)
	{	::soap_default___ns1__updateHistory(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateHistory * soap_new_set___ns1__updateHistory(
	struct soap *soap,
	ns2__updateHistory *ns2__updateHistory_)
{
	struct __ns1__updateHistory *_p = ::soap_new___ns1__updateHistory(soap);
	if (_p)
	{	::soap_default___ns1__updateHistory(soap, _p);
		_p->ns2__updateHistory_ = ns2__updateHistory_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateHistory(struct soap*, const struct __ns1__updateHistory *, const char*, const char*);

inline int soap_write___ns1__updateHistory(struct soap *soap, struct __ns1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__updateHistory(soap, p), 0) || ::soap_put___ns1__updateHistory(soap, p, "-ns1:updateHistory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__updateHistory(struct soap *soap, const char *URL, struct __ns1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateHistory(soap, p), 0) || ::soap_put___ns1__updateHistory(soap, p, "-ns1:updateHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__updateHistory(struct soap *soap, const char *URL, struct __ns1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateHistory(soap, p), 0) || ::soap_put___ns1__updateHistory(soap, p, "-ns1:updateHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__updateHistory(struct soap *soap, const char *URL, struct __ns1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateHistory(soap, p), 0) || ::soap_put___ns1__updateHistory(soap, p, "-ns1:updateHistory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateHistory * SOAP_FMAC4 soap_get___ns1__updateHistory(struct soap*, struct __ns1__updateHistory *, const char*, const char*);

inline int soap_read___ns1__updateHistory(struct soap *soap, struct __ns1__updateHistory *p)
{
	if (p)
	{	::soap_default___ns1__updateHistory(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__updateHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__updateHistory(struct soap *soap, const char *URL, struct __ns1__updateHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__updateHistory(struct soap *soap, struct __ns1__updateHistory *p)
{
	if (::soap_read___ns1__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getReadMessageFromClient_DEFINED
#define SOAP_TYPE___ns1__getReadMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getReadMessageFromClient(struct soap*, struct __ns1__getReadMessageFromClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getReadMessageFromClient(struct soap*, const struct __ns1__getReadMessageFromClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getReadMessageFromClient(struct soap*, const char*, int, const struct __ns1__getReadMessageFromClient *, const char*);
SOAP_FMAC3 struct __ns1__getReadMessageFromClient * SOAP_FMAC4 soap_in___ns1__getReadMessageFromClient(struct soap*, const char*, struct __ns1__getReadMessageFromClient *, const char*);
SOAP_FMAC1 struct __ns1__getReadMessageFromClient * SOAP_FMAC2 soap_instantiate___ns1__getReadMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getReadMessageFromClient * soap_new___ns1__getReadMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getReadMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getReadMessageFromClient * soap_new_req___ns1__getReadMessageFromClient(
	struct soap *soap)
{
	struct __ns1__getReadMessageFromClient *_p = ::soap_new___ns1__getReadMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__getReadMessageFromClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__getReadMessageFromClient * soap_new_set___ns1__getReadMessageFromClient(
	struct soap *soap,
	ns2__getReadMessageFromClient *ns2__getReadMessageFromClient_)
{
	struct __ns1__getReadMessageFromClient *_p = ::soap_new___ns1__getReadMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__getReadMessageFromClient(soap, _p);
		_p->ns2__getReadMessageFromClient_ = ns2__getReadMessageFromClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getReadMessageFromClient(struct soap*, const struct __ns1__getReadMessageFromClient *, const char*, const char*);

inline int soap_write___ns1__getReadMessageFromClient(struct soap *soap, struct __ns1__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getReadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getReadMessageFromClient(soap, p, "-ns1:getReadMessageFromClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getReadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getReadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getReadMessageFromClient(soap, p, "-ns1:getReadMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getReadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getReadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getReadMessageFromClient(soap, p, "-ns1:getReadMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getReadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getReadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getReadMessageFromClient(soap, p, "-ns1:getReadMessageFromClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getReadMessageFromClient * SOAP_FMAC4 soap_get___ns1__getReadMessageFromClient(struct soap*, struct __ns1__getReadMessageFromClient *, const char*, const char*);

inline int soap_read___ns1__getReadMessageFromClient(struct soap *soap, struct __ns1__getReadMessageFromClient *p)
{
	if (p)
	{	::soap_default___ns1__getReadMessageFromClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getReadMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getReadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getReadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getReadMessageFromClient(struct soap *soap, struct __ns1__getReadMessageFromClient *p)
{
	if (::soap_read___ns1__getReadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getOrderListHistory_DEFINED
#define SOAP_TYPE___ns1__getOrderListHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOrderListHistory(struct soap*, struct __ns1__getOrderListHistory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOrderListHistory(struct soap*, const struct __ns1__getOrderListHistory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOrderListHistory(struct soap*, const char*, int, const struct __ns1__getOrderListHistory *, const char*);
SOAP_FMAC3 struct __ns1__getOrderListHistory * SOAP_FMAC4 soap_in___ns1__getOrderListHistory(struct soap*, const char*, struct __ns1__getOrderListHistory *, const char*);
SOAP_FMAC1 struct __ns1__getOrderListHistory * SOAP_FMAC2 soap_instantiate___ns1__getOrderListHistory(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getOrderListHistory * soap_new___ns1__getOrderListHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getOrderListHistory(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getOrderListHistory * soap_new_req___ns1__getOrderListHistory(
	struct soap *soap)
{
	struct __ns1__getOrderListHistory *_p = ::soap_new___ns1__getOrderListHistory(soap);
	if (_p)
	{	::soap_default___ns1__getOrderListHistory(soap, _p);
	}
	return _p;
}

inline struct __ns1__getOrderListHistory * soap_new_set___ns1__getOrderListHistory(
	struct soap *soap,
	ns2__getOrderListHistory *ns2__getOrderListHistory_)
{
	struct __ns1__getOrderListHistory *_p = ::soap_new___ns1__getOrderListHistory(soap);
	if (_p)
	{	::soap_default___ns1__getOrderListHistory(soap, _p);
		_p->ns2__getOrderListHistory_ = ns2__getOrderListHistory_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOrderListHistory(struct soap*, const struct __ns1__getOrderListHistory *, const char*, const char*);

inline int soap_write___ns1__getOrderListHistory(struct soap *soap, struct __ns1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getOrderListHistory(soap, p), 0) || ::soap_put___ns1__getOrderListHistory(soap, p, "-ns1:getOrderListHistory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getOrderListHistory(struct soap *soap, const char *URL, struct __ns1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderListHistory(soap, p), 0) || ::soap_put___ns1__getOrderListHistory(soap, p, "-ns1:getOrderListHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getOrderListHistory(struct soap *soap, const char *URL, struct __ns1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderListHistory(soap, p), 0) || ::soap_put___ns1__getOrderListHistory(soap, p, "-ns1:getOrderListHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getOrderListHistory(struct soap *soap, const char *URL, struct __ns1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderListHistory(soap, p), 0) || ::soap_put___ns1__getOrderListHistory(soap, p, "-ns1:getOrderListHistory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getOrderListHistory * SOAP_FMAC4 soap_get___ns1__getOrderListHistory(struct soap*, struct __ns1__getOrderListHistory *, const char*, const char*);

inline int soap_read___ns1__getOrderListHistory(struct soap *soap, struct __ns1__getOrderListHistory *p)
{
	if (p)
	{	::soap_default___ns1__getOrderListHistory(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getOrderListHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getOrderListHistory(struct soap *soap, const char *URL, struct __ns1__getOrderListHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getOrderListHistory(struct soap *soap, struct __ns1__getOrderListHistory *p)
{
	if (::soap_read___ns1__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getProductList_DEFINED
#define SOAP_TYPE___ns1__getProductList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProductList(struct soap*, struct __ns1__getProductList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProductList(struct soap*, const struct __ns1__getProductList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProductList(struct soap*, const char*, int, const struct __ns1__getProductList *, const char*);
SOAP_FMAC3 struct __ns1__getProductList * SOAP_FMAC4 soap_in___ns1__getProductList(struct soap*, const char*, struct __ns1__getProductList *, const char*);
SOAP_FMAC1 struct __ns1__getProductList * SOAP_FMAC2 soap_instantiate___ns1__getProductList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProductList * soap_new___ns1__getProductList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getProductList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getProductList * soap_new_req___ns1__getProductList(
	struct soap *soap)
{
	struct __ns1__getProductList *_p = ::soap_new___ns1__getProductList(soap);
	if (_p)
	{	::soap_default___ns1__getProductList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getProductList * soap_new_set___ns1__getProductList(
	struct soap *soap,
	ns2__getProductList *ns2__getProductList_)
{
	struct __ns1__getProductList *_p = ::soap_new___ns1__getProductList(soap);
	if (_p)
	{	::soap_default___ns1__getProductList(soap, _p);
		_p->ns2__getProductList_ = ns2__getProductList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProductList(struct soap*, const struct __ns1__getProductList *, const char*, const char*);

inline int soap_write___ns1__getProductList(struct soap *soap, struct __ns1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getProductList(soap, p), 0) || ::soap_put___ns1__getProductList(soap, p, "-ns1:getProductList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getProductList(struct soap *soap, const char *URL, struct __ns1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductList(soap, p), 0) || ::soap_put___ns1__getProductList(soap, p, "-ns1:getProductList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getProductList(struct soap *soap, const char *URL, struct __ns1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductList(soap, p), 0) || ::soap_put___ns1__getProductList(soap, p, "-ns1:getProductList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getProductList(struct soap *soap, const char *URL, struct __ns1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductList(soap, p), 0) || ::soap_put___ns1__getProductList(soap, p, "-ns1:getProductList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getProductList * SOAP_FMAC4 soap_get___ns1__getProductList(struct soap*, struct __ns1__getProductList *, const char*, const char*);

inline int soap_read___ns1__getProductList(struct soap *soap, struct __ns1__getProductList *p)
{
	if (p)
	{	::soap_default___ns1__getProductList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getProductList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getProductList(struct soap *soap, const char *URL, struct __ns1__getProductList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getProductList(struct soap *soap, struct __ns1__getProductList *p)
{
	if (::soap_read___ns1__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteShopByNameAndPwd_DEFINED
#define SOAP_TYPE___ns1__deleteShopByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteShopByNameAndPwd(struct soap*, struct __ns1__deleteShopByNameAndPwd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteShopByNameAndPwd(struct soap*, const struct __ns1__deleteShopByNameAndPwd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteShopByNameAndPwd(struct soap*, const char*, int, const struct __ns1__deleteShopByNameAndPwd *, const char*);
SOAP_FMAC3 struct __ns1__deleteShopByNameAndPwd * SOAP_FMAC4 soap_in___ns1__deleteShopByNameAndPwd(struct soap*, const char*, struct __ns1__deleteShopByNameAndPwd *, const char*);
SOAP_FMAC1 struct __ns1__deleteShopByNameAndPwd * SOAP_FMAC2 soap_instantiate___ns1__deleteShopByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteShopByNameAndPwd * soap_new___ns1__deleteShopByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteShopByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteShopByNameAndPwd * soap_new_req___ns1__deleteShopByNameAndPwd(
	struct soap *soap)
{
	struct __ns1__deleteShopByNameAndPwd *_p = ::soap_new___ns1__deleteShopByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__deleteShopByNameAndPwd(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteShopByNameAndPwd * soap_new_set___ns1__deleteShopByNameAndPwd(
	struct soap *soap,
	ns2__deleteShopByNameAndPwd *ns2__deleteShopByNameAndPwd_)
{
	struct __ns1__deleteShopByNameAndPwd *_p = ::soap_new___ns1__deleteShopByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__deleteShopByNameAndPwd(soap, _p);
		_p->ns2__deleteShopByNameAndPwd_ = ns2__deleteShopByNameAndPwd_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteShopByNameAndPwd(struct soap*, const struct __ns1__deleteShopByNameAndPwd *, const char*, const char*);

inline int soap_write___ns1__deleteShopByNameAndPwd(struct soap *soap, struct __ns1__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteShopByNameAndPwd(soap, p, "-ns1:deleteShopByNameAndPwd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteShopByNameAndPwd(soap, p, "-ns1:deleteShopByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteShopByNameAndPwd(soap, p, "-ns1:deleteShopByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteShopByNameAndPwd(soap, p, "-ns1:deleteShopByNameAndPwd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteShopByNameAndPwd * SOAP_FMAC4 soap_get___ns1__deleteShopByNameAndPwd(struct soap*, struct __ns1__deleteShopByNameAndPwd *, const char*, const char*);

inline int soap_read___ns1__deleteShopByNameAndPwd(struct soap *soap, struct __ns1__deleteShopByNameAndPwd *p)
{
	if (p)
	{	::soap_default___ns1__deleteShopByNameAndPwd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteShopByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteShopByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteShopByNameAndPwd(struct soap *soap, struct __ns1__deleteShopByNameAndPwd *p)
{
	if (::soap_read___ns1__deleteShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__addOrder_DEFINED
#define SOAP_TYPE___ns1__addOrder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addOrder(struct soap*, struct __ns1__addOrder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addOrder(struct soap*, const struct __ns1__addOrder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addOrder(struct soap*, const char*, int, const struct __ns1__addOrder *, const char*);
SOAP_FMAC3 struct __ns1__addOrder * SOAP_FMAC4 soap_in___ns1__addOrder(struct soap*, const char*, struct __ns1__addOrder *, const char*);
SOAP_FMAC1 struct __ns1__addOrder * SOAP_FMAC2 soap_instantiate___ns1__addOrder(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__addOrder * soap_new___ns1__addOrder(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__addOrder(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__addOrder * soap_new_req___ns1__addOrder(
	struct soap *soap)
{
	struct __ns1__addOrder *_p = ::soap_new___ns1__addOrder(soap);
	if (_p)
	{	::soap_default___ns1__addOrder(soap, _p);
	}
	return _p;
}

inline struct __ns1__addOrder * soap_new_set___ns1__addOrder(
	struct soap *soap,
	ns2__addOrder *ns2__addOrder_)
{
	struct __ns1__addOrder *_p = ::soap_new___ns1__addOrder(soap);
	if (_p)
	{	::soap_default___ns1__addOrder(soap, _p);
		_p->ns2__addOrder_ = ns2__addOrder_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addOrder(struct soap*, const struct __ns1__addOrder *, const char*, const char*);

inline int soap_write___ns1__addOrder(struct soap *soap, struct __ns1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__addOrder(soap, p), 0) || ::soap_put___ns1__addOrder(soap, p, "-ns1:addOrder", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__addOrder(struct soap *soap, const char *URL, struct __ns1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addOrder(soap, p), 0) || ::soap_put___ns1__addOrder(soap, p, "-ns1:addOrder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__addOrder(struct soap *soap, const char *URL, struct __ns1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addOrder(soap, p), 0) || ::soap_put___ns1__addOrder(soap, p, "-ns1:addOrder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__addOrder(struct soap *soap, const char *URL, struct __ns1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addOrder(soap, p), 0) || ::soap_put___ns1__addOrder(soap, p, "-ns1:addOrder", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__addOrder * SOAP_FMAC4 soap_get___ns1__addOrder(struct soap*, struct __ns1__addOrder *, const char*, const char*);

inline int soap_read___ns1__addOrder(struct soap *soap, struct __ns1__addOrder *p)
{
	if (p)
	{	::soap_default___ns1__addOrder(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__addOrder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__addOrder(struct soap *soap, const char *URL, struct __ns1__addOrder *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__addOrder(struct soap *soap, struct __ns1__addOrder *p)
{
	if (::soap_read___ns1__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getMessageFromClient_DEFINED
#define SOAP_TYPE___ns1__getMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMessageFromClient(struct soap*, struct __ns1__getMessageFromClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMessageFromClient(struct soap*, const struct __ns1__getMessageFromClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMessageFromClient(struct soap*, const char*, int, const struct __ns1__getMessageFromClient *, const char*);
SOAP_FMAC3 struct __ns1__getMessageFromClient * SOAP_FMAC4 soap_in___ns1__getMessageFromClient(struct soap*, const char*, struct __ns1__getMessageFromClient *, const char*);
SOAP_FMAC1 struct __ns1__getMessageFromClient * SOAP_FMAC2 soap_instantiate___ns1__getMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMessageFromClient * soap_new___ns1__getMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMessageFromClient * soap_new_req___ns1__getMessageFromClient(
	struct soap *soap)
{
	struct __ns1__getMessageFromClient *_p = ::soap_new___ns1__getMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__getMessageFromClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMessageFromClient * soap_new_set___ns1__getMessageFromClient(
	struct soap *soap,
	ns2__getMessageFromClient *ns2__getMessageFromClient_)
{
	struct __ns1__getMessageFromClient *_p = ::soap_new___ns1__getMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__getMessageFromClient(soap, _p);
		_p->ns2__getMessageFromClient_ = ns2__getMessageFromClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMessageFromClient(struct soap*, const struct __ns1__getMessageFromClient *, const char*, const char*);

inline int soap_write___ns1__getMessageFromClient(struct soap *soap, struct __ns1__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getMessageFromClient(soap, p), 0) || ::soap_put___ns1__getMessageFromClient(soap, p, "-ns1:getMessageFromClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessageFromClient(soap, p), 0) || ::soap_put___ns1__getMessageFromClient(soap, p, "-ns1:getMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessageFromClient(soap, p), 0) || ::soap_put___ns1__getMessageFromClient(soap, p, "-ns1:getMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessageFromClient(soap, p), 0) || ::soap_put___ns1__getMessageFromClient(soap, p, "-ns1:getMessageFromClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMessageFromClient * SOAP_FMAC4 soap_get___ns1__getMessageFromClient(struct soap*, struct __ns1__getMessageFromClient *, const char*, const char*);

inline int soap_read___ns1__getMessageFromClient(struct soap *soap, struct __ns1__getMessageFromClient *p)
{
	if (p)
	{	::soap_default___ns1__getMessageFromClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getMessageFromClient(struct soap *soap, struct __ns1__getMessageFromClient *p)
{
	if (::soap_read___ns1__getMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__updateProductByInfo_DEFINED
#define SOAP_TYPE___ns1__updateProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateProductByInfo(struct soap*, struct __ns1__updateProductByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateProductByInfo(struct soap*, const struct __ns1__updateProductByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateProductByInfo(struct soap*, const char*, int, const struct __ns1__updateProductByInfo *, const char*);
SOAP_FMAC3 struct __ns1__updateProductByInfo * SOAP_FMAC4 soap_in___ns1__updateProductByInfo(struct soap*, const char*, struct __ns1__updateProductByInfo *, const char*);
SOAP_FMAC1 struct __ns1__updateProductByInfo * SOAP_FMAC2 soap_instantiate___ns1__updateProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateProductByInfo * soap_new___ns1__updateProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__updateProductByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateProductByInfo * soap_new_req___ns1__updateProductByInfo(
	struct soap *soap)
{
	struct __ns1__updateProductByInfo *_p = ::soap_new___ns1__updateProductByInfo(soap);
	if (_p)
	{	::soap_default___ns1__updateProductByInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateProductByInfo * soap_new_set___ns1__updateProductByInfo(
	struct soap *soap,
	ns2__updateProductByInfo *ns2__updateProductByInfo_)
{
	struct __ns1__updateProductByInfo *_p = ::soap_new___ns1__updateProductByInfo(soap);
	if (_p)
	{	::soap_default___ns1__updateProductByInfo(soap, _p);
		_p->ns2__updateProductByInfo_ = ns2__updateProductByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateProductByInfo(struct soap*, const struct __ns1__updateProductByInfo *, const char*, const char*);

inline int soap_write___ns1__updateProductByInfo(struct soap *soap, struct __ns1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__updateProductByInfo(soap, p), 0) || ::soap_put___ns1__updateProductByInfo(soap, p, "-ns1:updateProductByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__updateProductByInfo(struct soap *soap, const char *URL, struct __ns1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateProductByInfo(soap, p), 0) || ::soap_put___ns1__updateProductByInfo(soap, p, "-ns1:updateProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__updateProductByInfo(struct soap *soap, const char *URL, struct __ns1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateProductByInfo(soap, p), 0) || ::soap_put___ns1__updateProductByInfo(soap, p, "-ns1:updateProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__updateProductByInfo(struct soap *soap, const char *URL, struct __ns1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateProductByInfo(soap, p), 0) || ::soap_put___ns1__updateProductByInfo(soap, p, "-ns1:updateProductByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateProductByInfo * SOAP_FMAC4 soap_get___ns1__updateProductByInfo(struct soap*, struct __ns1__updateProductByInfo *, const char*, const char*);

inline int soap_read___ns1__updateProductByInfo(struct soap *soap, struct __ns1__updateProductByInfo *p)
{
	if (p)
	{	::soap_default___ns1__updateProductByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__updateProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__updateProductByInfo(struct soap *soap, const char *URL, struct __ns1__updateProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__updateProductByInfo(struct soap *soap, struct __ns1__updateProductByInfo *p)
{
	if (::soap_read___ns1__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getUnreadMessageFromClient_DEFINED
#define SOAP_TYPE___ns1__getUnreadMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getUnreadMessageFromClient(struct soap*, struct __ns1__getUnreadMessageFromClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getUnreadMessageFromClient(struct soap*, const struct __ns1__getUnreadMessageFromClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getUnreadMessageFromClient(struct soap*, const char*, int, const struct __ns1__getUnreadMessageFromClient *, const char*);
SOAP_FMAC3 struct __ns1__getUnreadMessageFromClient * SOAP_FMAC4 soap_in___ns1__getUnreadMessageFromClient(struct soap*, const char*, struct __ns1__getUnreadMessageFromClient *, const char*);
SOAP_FMAC1 struct __ns1__getUnreadMessageFromClient * SOAP_FMAC2 soap_instantiate___ns1__getUnreadMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getUnreadMessageFromClient * soap_new___ns1__getUnreadMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getUnreadMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getUnreadMessageFromClient * soap_new_req___ns1__getUnreadMessageFromClient(
	struct soap *soap)
{
	struct __ns1__getUnreadMessageFromClient *_p = ::soap_new___ns1__getUnreadMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__getUnreadMessageFromClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__getUnreadMessageFromClient * soap_new_set___ns1__getUnreadMessageFromClient(
	struct soap *soap,
	ns2__getUnreadMessageFromClient *ns2__getUnreadMessageFromClient_)
{
	struct __ns1__getUnreadMessageFromClient *_p = ::soap_new___ns1__getUnreadMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__getUnreadMessageFromClient(soap, _p);
		_p->ns2__getUnreadMessageFromClient_ = ns2__getUnreadMessageFromClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getUnreadMessageFromClient(struct soap*, const struct __ns1__getUnreadMessageFromClient *, const char*, const char*);

inline int soap_write___ns1__getUnreadMessageFromClient(struct soap *soap, struct __ns1__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getUnreadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromClient(soap, p, "-ns1:getUnreadMessageFromClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getUnreadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getUnreadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromClient(soap, p, "-ns1:getUnreadMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getUnreadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getUnreadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromClient(soap, p, "-ns1:getUnreadMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getUnreadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getUnreadMessageFromClient(soap, p), 0) || ::soap_put___ns1__getUnreadMessageFromClient(soap, p, "-ns1:getUnreadMessageFromClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getUnreadMessageFromClient * SOAP_FMAC4 soap_get___ns1__getUnreadMessageFromClient(struct soap*, struct __ns1__getUnreadMessageFromClient *, const char*, const char*);

inline int soap_read___ns1__getUnreadMessageFromClient(struct soap *soap, struct __ns1__getUnreadMessageFromClient *p)
{
	if (p)
	{	::soap_default___ns1__getUnreadMessageFromClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getUnreadMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getUnreadMessageFromClient(struct soap *soap, const char *URL, struct __ns1__getUnreadMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getUnreadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getUnreadMessageFromClient(struct soap *soap, struct __ns1__getUnreadMessageFromClient *p)
{
	if (::soap_read___ns1__getUnreadMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__updateMessageFromClient_DEFINED
#define SOAP_TYPE___ns1__updateMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateMessageFromClient(struct soap*, struct __ns1__updateMessageFromClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateMessageFromClient(struct soap*, const struct __ns1__updateMessageFromClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateMessageFromClient(struct soap*, const char*, int, const struct __ns1__updateMessageFromClient *, const char*);
SOAP_FMAC3 struct __ns1__updateMessageFromClient * SOAP_FMAC4 soap_in___ns1__updateMessageFromClient(struct soap*, const char*, struct __ns1__updateMessageFromClient *, const char*);
SOAP_FMAC1 struct __ns1__updateMessageFromClient * SOAP_FMAC2 soap_instantiate___ns1__updateMessageFromClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateMessageFromClient * soap_new___ns1__updateMessageFromClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__updateMessageFromClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateMessageFromClient * soap_new_req___ns1__updateMessageFromClient(
	struct soap *soap)
{
	struct __ns1__updateMessageFromClient *_p = ::soap_new___ns1__updateMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__updateMessageFromClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateMessageFromClient * soap_new_set___ns1__updateMessageFromClient(
	struct soap *soap,
	ns2__updateMessageFromClient *ns2__updateMessageFromClient_)
{
	struct __ns1__updateMessageFromClient *_p = ::soap_new___ns1__updateMessageFromClient(soap);
	if (_p)
	{	::soap_default___ns1__updateMessageFromClient(soap, _p);
		_p->ns2__updateMessageFromClient_ = ns2__updateMessageFromClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateMessageFromClient(struct soap*, const struct __ns1__updateMessageFromClient *, const char*, const char*);

inline int soap_write___ns1__updateMessageFromClient(struct soap *soap, struct __ns1__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__updateMessageFromClient(soap, p), 0) || ::soap_put___ns1__updateMessageFromClient(soap, p, "-ns1:updateMessageFromClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__updateMessageFromClient(struct soap *soap, const char *URL, struct __ns1__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateMessageFromClient(soap, p), 0) || ::soap_put___ns1__updateMessageFromClient(soap, p, "-ns1:updateMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__updateMessageFromClient(struct soap *soap, const char *URL, struct __ns1__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateMessageFromClient(soap, p), 0) || ::soap_put___ns1__updateMessageFromClient(soap, p, "-ns1:updateMessageFromClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__updateMessageFromClient(struct soap *soap, const char *URL, struct __ns1__updateMessageFromClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateMessageFromClient(soap, p), 0) || ::soap_put___ns1__updateMessageFromClient(soap, p, "-ns1:updateMessageFromClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateMessageFromClient * SOAP_FMAC4 soap_get___ns1__updateMessageFromClient(struct soap*, struct __ns1__updateMessageFromClient *, const char*, const char*);

inline int soap_read___ns1__updateMessageFromClient(struct soap *soap, struct __ns1__updateMessageFromClient *p)
{
	if (p)
	{	::soap_default___ns1__updateMessageFromClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__updateMessageFromClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__updateMessageFromClient(struct soap *soap, const char *URL, struct __ns1__updateMessageFromClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__updateMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__updateMessageFromClient(struct soap *soap, struct __ns1__updateMessageFromClient *p)
{
	if (::soap_read___ns1__updateMessageFromClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__purchaseProduct_DEFINED
#define SOAP_TYPE___ns1__purchaseProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__purchaseProduct(struct soap*, struct __ns1__purchaseProduct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__purchaseProduct(struct soap*, const struct __ns1__purchaseProduct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__purchaseProduct(struct soap*, const char*, int, const struct __ns1__purchaseProduct *, const char*);
SOAP_FMAC3 struct __ns1__purchaseProduct * SOAP_FMAC4 soap_in___ns1__purchaseProduct(struct soap*, const char*, struct __ns1__purchaseProduct *, const char*);
SOAP_FMAC1 struct __ns1__purchaseProduct * SOAP_FMAC2 soap_instantiate___ns1__purchaseProduct(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__purchaseProduct * soap_new___ns1__purchaseProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__purchaseProduct(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__purchaseProduct * soap_new_req___ns1__purchaseProduct(
	struct soap *soap)
{
	struct __ns1__purchaseProduct *_p = ::soap_new___ns1__purchaseProduct(soap);
	if (_p)
	{	::soap_default___ns1__purchaseProduct(soap, _p);
	}
	return _p;
}

inline struct __ns1__purchaseProduct * soap_new_set___ns1__purchaseProduct(
	struct soap *soap,
	ns2__purchaseProduct *ns2__purchaseProduct_)
{
	struct __ns1__purchaseProduct *_p = ::soap_new___ns1__purchaseProduct(soap);
	if (_p)
	{	::soap_default___ns1__purchaseProduct(soap, _p);
		_p->ns2__purchaseProduct_ = ns2__purchaseProduct_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__purchaseProduct(struct soap*, const struct __ns1__purchaseProduct *, const char*, const char*);

inline int soap_write___ns1__purchaseProduct(struct soap *soap, struct __ns1__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__purchaseProduct(soap, p), 0) || ::soap_put___ns1__purchaseProduct(soap, p, "-ns1:purchaseProduct", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__purchaseProduct(struct soap *soap, const char *URL, struct __ns1__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__purchaseProduct(soap, p), 0) || ::soap_put___ns1__purchaseProduct(soap, p, "-ns1:purchaseProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__purchaseProduct(struct soap *soap, const char *URL, struct __ns1__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__purchaseProduct(soap, p), 0) || ::soap_put___ns1__purchaseProduct(soap, p, "-ns1:purchaseProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__purchaseProduct(struct soap *soap, const char *URL, struct __ns1__purchaseProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__purchaseProduct(soap, p), 0) || ::soap_put___ns1__purchaseProduct(soap, p, "-ns1:purchaseProduct", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__purchaseProduct * SOAP_FMAC4 soap_get___ns1__purchaseProduct(struct soap*, struct __ns1__purchaseProduct *, const char*, const char*);

inline int soap_read___ns1__purchaseProduct(struct soap *soap, struct __ns1__purchaseProduct *p)
{
	if (p)
	{	::soap_default___ns1__purchaseProduct(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__purchaseProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__purchaseProduct(struct soap *soap, const char *URL, struct __ns1__purchaseProduct *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__purchaseProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__purchaseProduct(struct soap *soap, struct __ns1__purchaseProduct *p)
{
	if (::soap_read___ns1__purchaseProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getClientList_DEFINED
#define SOAP_TYPE___ns1__getClientList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getClientList(struct soap*, struct __ns1__getClientList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getClientList(struct soap*, const struct __ns1__getClientList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getClientList(struct soap*, const char*, int, const struct __ns1__getClientList *, const char*);
SOAP_FMAC3 struct __ns1__getClientList * SOAP_FMAC4 soap_in___ns1__getClientList(struct soap*, const char*, struct __ns1__getClientList *, const char*);
SOAP_FMAC1 struct __ns1__getClientList * SOAP_FMAC2 soap_instantiate___ns1__getClientList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getClientList * soap_new___ns1__getClientList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getClientList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getClientList * soap_new_req___ns1__getClientList(
	struct soap *soap)
{
	struct __ns1__getClientList *_p = ::soap_new___ns1__getClientList(soap);
	if (_p)
	{	::soap_default___ns1__getClientList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getClientList * soap_new_set___ns1__getClientList(
	struct soap *soap,
	ns2__getClientList *ns2__getClientList_)
{
	struct __ns1__getClientList *_p = ::soap_new___ns1__getClientList(soap);
	if (_p)
	{	::soap_default___ns1__getClientList(soap, _p);
		_p->ns2__getClientList_ = ns2__getClientList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getClientList(struct soap*, const struct __ns1__getClientList *, const char*, const char*);

inline int soap_write___ns1__getClientList(struct soap *soap, struct __ns1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getClientList(soap, p), 0) || ::soap_put___ns1__getClientList(soap, p, "-ns1:getClientList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getClientList(struct soap *soap, const char *URL, struct __ns1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientList(soap, p), 0) || ::soap_put___ns1__getClientList(soap, p, "-ns1:getClientList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getClientList(struct soap *soap, const char *URL, struct __ns1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientList(soap, p), 0) || ::soap_put___ns1__getClientList(soap, p, "-ns1:getClientList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getClientList(struct soap *soap, const char *URL, struct __ns1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getClientList(soap, p), 0) || ::soap_put___ns1__getClientList(soap, p, "-ns1:getClientList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getClientList * SOAP_FMAC4 soap_get___ns1__getClientList(struct soap*, struct __ns1__getClientList *, const char*, const char*);

inline int soap_read___ns1__getClientList(struct soap *soap, struct __ns1__getClientList *p)
{
	if (p)
	{	::soap_default___ns1__getClientList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getClientList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getClientList(struct soap *soap, const char *URL, struct __ns1__getClientList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getClientList(struct soap *soap, struct __ns1__getClientList *p)
{
	if (::soap_read___ns1__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getProductTypeByProName_DEFINED
#define SOAP_TYPE___ns1__getProductTypeByProName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProductTypeByProName(struct soap*, struct __ns1__getProductTypeByProName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProductTypeByProName(struct soap*, const struct __ns1__getProductTypeByProName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProductTypeByProName(struct soap*, const char*, int, const struct __ns1__getProductTypeByProName *, const char*);
SOAP_FMAC3 struct __ns1__getProductTypeByProName * SOAP_FMAC4 soap_in___ns1__getProductTypeByProName(struct soap*, const char*, struct __ns1__getProductTypeByProName *, const char*);
SOAP_FMAC1 struct __ns1__getProductTypeByProName * SOAP_FMAC2 soap_instantiate___ns1__getProductTypeByProName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProductTypeByProName * soap_new___ns1__getProductTypeByProName(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getProductTypeByProName(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getProductTypeByProName * soap_new_req___ns1__getProductTypeByProName(
	struct soap *soap)
{
	struct __ns1__getProductTypeByProName *_p = ::soap_new___ns1__getProductTypeByProName(soap);
	if (_p)
	{	::soap_default___ns1__getProductTypeByProName(soap, _p);
	}
	return _p;
}

inline struct __ns1__getProductTypeByProName * soap_new_set___ns1__getProductTypeByProName(
	struct soap *soap,
	ns2__getProductTypeByProName *ns2__getProductTypeByProName_)
{
	struct __ns1__getProductTypeByProName *_p = ::soap_new___ns1__getProductTypeByProName(soap);
	if (_p)
	{	::soap_default___ns1__getProductTypeByProName(soap, _p);
		_p->ns2__getProductTypeByProName_ = ns2__getProductTypeByProName_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProductTypeByProName(struct soap*, const struct __ns1__getProductTypeByProName *, const char*, const char*);

inline int soap_write___ns1__getProductTypeByProName(struct soap *soap, struct __ns1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getProductTypeByProName(soap, p), 0) || ::soap_put___ns1__getProductTypeByProName(soap, p, "-ns1:getProductTypeByProName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getProductTypeByProName(struct soap *soap, const char *URL, struct __ns1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductTypeByProName(soap, p), 0) || ::soap_put___ns1__getProductTypeByProName(soap, p, "-ns1:getProductTypeByProName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getProductTypeByProName(struct soap *soap, const char *URL, struct __ns1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductTypeByProName(soap, p), 0) || ::soap_put___ns1__getProductTypeByProName(soap, p, "-ns1:getProductTypeByProName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getProductTypeByProName(struct soap *soap, const char *URL, struct __ns1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductTypeByProName(soap, p), 0) || ::soap_put___ns1__getProductTypeByProName(soap, p, "-ns1:getProductTypeByProName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getProductTypeByProName * SOAP_FMAC4 soap_get___ns1__getProductTypeByProName(struct soap*, struct __ns1__getProductTypeByProName *, const char*, const char*);

inline int soap_read___ns1__getProductTypeByProName(struct soap *soap, struct __ns1__getProductTypeByProName *p)
{
	if (p)
	{	::soap_default___ns1__getProductTypeByProName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getProductTypeByProName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getProductTypeByProName(struct soap *soap, const char *URL, struct __ns1__getProductTypeByProName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getProductTypeByProName(struct soap *soap, struct __ns1__getProductTypeByProName *p)
{
	if (::soap_read___ns1__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__updateMessageFromShop_DEFINED
#define SOAP_TYPE___ns1__updateMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateMessageFromShop(struct soap*, struct __ns1__updateMessageFromShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateMessageFromShop(struct soap*, const struct __ns1__updateMessageFromShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateMessageFromShop(struct soap*, const char*, int, const struct __ns1__updateMessageFromShop *, const char*);
SOAP_FMAC3 struct __ns1__updateMessageFromShop * SOAP_FMAC4 soap_in___ns1__updateMessageFromShop(struct soap*, const char*, struct __ns1__updateMessageFromShop *, const char*);
SOAP_FMAC1 struct __ns1__updateMessageFromShop * SOAP_FMAC2 soap_instantiate___ns1__updateMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateMessageFromShop * soap_new___ns1__updateMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__updateMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateMessageFromShop * soap_new_req___ns1__updateMessageFromShop(
	struct soap *soap)
{
	struct __ns1__updateMessageFromShop *_p = ::soap_new___ns1__updateMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__updateMessageFromShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateMessageFromShop * soap_new_set___ns1__updateMessageFromShop(
	struct soap *soap,
	ns2__updateMessageFromShop *ns2__updateMessageFromShop_)
{
	struct __ns1__updateMessageFromShop *_p = ::soap_new___ns1__updateMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__updateMessageFromShop(soap, _p);
		_p->ns2__updateMessageFromShop_ = ns2__updateMessageFromShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateMessageFromShop(struct soap*, const struct __ns1__updateMessageFromShop *, const char*, const char*);

inline int soap_write___ns1__updateMessageFromShop(struct soap *soap, struct __ns1__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__updateMessageFromShop(soap, p), 0) || ::soap_put___ns1__updateMessageFromShop(soap, p, "-ns1:updateMessageFromShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__updateMessageFromShop(struct soap *soap, const char *URL, struct __ns1__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateMessageFromShop(soap, p), 0) || ::soap_put___ns1__updateMessageFromShop(soap, p, "-ns1:updateMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__updateMessageFromShop(struct soap *soap, const char *URL, struct __ns1__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateMessageFromShop(soap, p), 0) || ::soap_put___ns1__updateMessageFromShop(soap, p, "-ns1:updateMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__updateMessageFromShop(struct soap *soap, const char *URL, struct __ns1__updateMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateMessageFromShop(soap, p), 0) || ::soap_put___ns1__updateMessageFromShop(soap, p, "-ns1:updateMessageFromShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateMessageFromShop * SOAP_FMAC4 soap_get___ns1__updateMessageFromShop(struct soap*, struct __ns1__updateMessageFromShop *, const char*, const char*);

inline int soap_read___ns1__updateMessageFromShop(struct soap *soap, struct __ns1__updateMessageFromShop *p)
{
	if (p)
	{	::soap_default___ns1__updateMessageFromShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__updateMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__updateMessageFromShop(struct soap *soap, const char *URL, struct __ns1__updateMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__updateMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__updateMessageFromShop(struct soap *soap, struct __ns1__updateMessageFromShop *p)
{
	if (::soap_read___ns1__updateMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InsertShop_DEFINED
#define SOAP_TYPE___ns1__InsertShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsertShop(struct soap*, struct __ns1__InsertShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsertShop(struct soap*, const struct __ns1__InsertShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsertShop(struct soap*, const char*, int, const struct __ns1__InsertShop *, const char*);
SOAP_FMAC3 struct __ns1__InsertShop * SOAP_FMAC4 soap_in___ns1__InsertShop(struct soap*, const char*, struct __ns1__InsertShop *, const char*);
SOAP_FMAC1 struct __ns1__InsertShop * SOAP_FMAC2 soap_instantiate___ns1__InsertShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsertShop * soap_new___ns1__InsertShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsertShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsertShop * soap_new_req___ns1__InsertShop(
	struct soap *soap)
{
	struct __ns1__InsertShop *_p = ::soap_new___ns1__InsertShop(soap);
	if (_p)
	{	::soap_default___ns1__InsertShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsertShop * soap_new_set___ns1__InsertShop(
	struct soap *soap,
	ns2__InsertShop *ns2__InsertShop_)
{
	struct __ns1__InsertShop *_p = ::soap_new___ns1__InsertShop(soap);
	if (_p)
	{	::soap_default___ns1__InsertShop(soap, _p);
		_p->ns2__InsertShop_ = ns2__InsertShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsertShop(struct soap*, const struct __ns1__InsertShop *, const char*, const char*);

inline int soap_write___ns1__InsertShop(struct soap *soap, struct __ns1__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InsertShop(soap, p), 0) || ::soap_put___ns1__InsertShop(soap, p, "-ns1:InsertShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InsertShop(struct soap *soap, const char *URL, struct __ns1__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertShop(soap, p), 0) || ::soap_put___ns1__InsertShop(soap, p, "-ns1:InsertShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InsertShop(struct soap *soap, const char *URL, struct __ns1__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertShop(soap, p), 0) || ::soap_put___ns1__InsertShop(soap, p, "-ns1:InsertShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InsertShop(struct soap *soap, const char *URL, struct __ns1__InsertShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InsertShop(soap, p), 0) || ::soap_put___ns1__InsertShop(soap, p, "-ns1:InsertShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsertShop * SOAP_FMAC4 soap_get___ns1__InsertShop(struct soap*, struct __ns1__InsertShop *, const char*, const char*);

inline int soap_read___ns1__InsertShop(struct soap *soap, struct __ns1__InsertShop *p)
{
	if (p)
	{	::soap_default___ns1__InsertShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InsertShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InsertShop(struct soap *soap, const char *URL, struct __ns1__InsertShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InsertShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InsertShop(struct soap *soap, struct __ns1__InsertShop *p)
{
	if (::soap_read___ns1__InsertShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteClientByNameAndPwd_DEFINED
#define SOAP_TYPE___ns1__deleteClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteClientByNameAndPwd(struct soap*, struct __ns1__deleteClientByNameAndPwd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteClientByNameAndPwd(struct soap*, const struct __ns1__deleteClientByNameAndPwd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteClientByNameAndPwd(struct soap*, const char*, int, const struct __ns1__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC3 struct __ns1__deleteClientByNameAndPwd * SOAP_FMAC4 soap_in___ns1__deleteClientByNameAndPwd(struct soap*, const char*, struct __ns1__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC1 struct __ns1__deleteClientByNameAndPwd * SOAP_FMAC2 soap_instantiate___ns1__deleteClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteClientByNameAndPwd * soap_new___ns1__deleteClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteClientByNameAndPwd * soap_new_req___ns1__deleteClientByNameAndPwd(
	struct soap *soap)
{
	struct __ns1__deleteClientByNameAndPwd *_p = ::soap_new___ns1__deleteClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__deleteClientByNameAndPwd(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteClientByNameAndPwd * soap_new_set___ns1__deleteClientByNameAndPwd(
	struct soap *soap,
	ns2__deleteClientByNameAndPwd *ns2__deleteClientByNameAndPwd_)
{
	struct __ns1__deleteClientByNameAndPwd *_p = ::soap_new___ns1__deleteClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__deleteClientByNameAndPwd(soap, _p);
		_p->ns2__deleteClientByNameAndPwd_ = ns2__deleteClientByNameAndPwd_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteClientByNameAndPwd(struct soap*, const struct __ns1__deleteClientByNameAndPwd *, const char*, const char*);

inline int soap_write___ns1__deleteClientByNameAndPwd(struct soap *soap, struct __ns1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteClientByNameAndPwd(soap, p, "-ns1:deleteClientByNameAndPwd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteClientByNameAndPwd(soap, p, "-ns1:deleteClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteClientByNameAndPwd(soap, p, "-ns1:deleteClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___ns1__deleteClientByNameAndPwd(soap, p, "-ns1:deleteClientByNameAndPwd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteClientByNameAndPwd * SOAP_FMAC4 soap_get___ns1__deleteClientByNameAndPwd(struct soap*, struct __ns1__deleteClientByNameAndPwd *, const char*, const char*);

inline int soap_read___ns1__deleteClientByNameAndPwd(struct soap *soap, struct __ns1__deleteClientByNameAndPwd *p)
{
	if (p)
	{	::soap_default___ns1__deleteClientByNameAndPwd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__deleteClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteClientByNameAndPwd(struct soap *soap, struct __ns1__deleteClientByNameAndPwd *p)
{
	if (::soap_read___ns1__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteProductByInfo_DEFINED
#define SOAP_TYPE___ns1__deleteProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteProductByInfo(struct soap*, struct __ns1__deleteProductByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteProductByInfo(struct soap*, const struct __ns1__deleteProductByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteProductByInfo(struct soap*, const char*, int, const struct __ns1__deleteProductByInfo *, const char*);
SOAP_FMAC3 struct __ns1__deleteProductByInfo * SOAP_FMAC4 soap_in___ns1__deleteProductByInfo(struct soap*, const char*, struct __ns1__deleteProductByInfo *, const char*);
SOAP_FMAC1 struct __ns1__deleteProductByInfo * SOAP_FMAC2 soap_instantiate___ns1__deleteProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteProductByInfo * soap_new___ns1__deleteProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteProductByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteProductByInfo * soap_new_req___ns1__deleteProductByInfo(
	struct soap *soap)
{
	struct __ns1__deleteProductByInfo *_p = ::soap_new___ns1__deleteProductByInfo(soap);
	if (_p)
	{	::soap_default___ns1__deleteProductByInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteProductByInfo * soap_new_set___ns1__deleteProductByInfo(
	struct soap *soap,
	ns2__deleteProductByInfo *ns2__deleteProductByInfo_)
{
	struct __ns1__deleteProductByInfo *_p = ::soap_new___ns1__deleteProductByInfo(soap);
	if (_p)
	{	::soap_default___ns1__deleteProductByInfo(soap, _p);
		_p->ns2__deleteProductByInfo_ = ns2__deleteProductByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteProductByInfo(struct soap*, const struct __ns1__deleteProductByInfo *, const char*, const char*);

inline int soap_write___ns1__deleteProductByInfo(struct soap *soap, struct __ns1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteProductByInfo(soap, p), 0) || ::soap_put___ns1__deleteProductByInfo(soap, p, "-ns1:deleteProductByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteProductByInfo(struct soap *soap, const char *URL, struct __ns1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteProductByInfo(soap, p), 0) || ::soap_put___ns1__deleteProductByInfo(soap, p, "-ns1:deleteProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteProductByInfo(struct soap *soap, const char *URL, struct __ns1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteProductByInfo(soap, p), 0) || ::soap_put___ns1__deleteProductByInfo(soap, p, "-ns1:deleteProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteProductByInfo(struct soap *soap, const char *URL, struct __ns1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteProductByInfo(soap, p), 0) || ::soap_put___ns1__deleteProductByInfo(soap, p, "-ns1:deleteProductByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteProductByInfo * SOAP_FMAC4 soap_get___ns1__deleteProductByInfo(struct soap*, struct __ns1__deleteProductByInfo *, const char*, const char*);

inline int soap_read___ns1__deleteProductByInfo(struct soap *soap, struct __ns1__deleteProductByInfo *p)
{
	if (p)
	{	::soap_default___ns1__deleteProductByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteProductByInfo(struct soap *soap, const char *URL, struct __ns1__deleteProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteProductByInfo(struct soap *soap, struct __ns1__deleteProductByInfo *p)
{
	if (::soap_read___ns1__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__updateClient_DEFINED
#define SOAP_TYPE___ns1__updateClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateClient(struct soap*, struct __ns1__updateClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateClient(struct soap*, const struct __ns1__updateClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateClient(struct soap*, const char*, int, const struct __ns1__updateClient *, const char*);
SOAP_FMAC3 struct __ns1__updateClient * SOAP_FMAC4 soap_in___ns1__updateClient(struct soap*, const char*, struct __ns1__updateClient *, const char*);
SOAP_FMAC1 struct __ns1__updateClient * SOAP_FMAC2 soap_instantiate___ns1__updateClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateClient * soap_new___ns1__updateClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__updateClient(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateClient * soap_new_req___ns1__updateClient(
	struct soap *soap)
{
	struct __ns1__updateClient *_p = ::soap_new___ns1__updateClient(soap);
	if (_p)
	{	::soap_default___ns1__updateClient(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateClient * soap_new_set___ns1__updateClient(
	struct soap *soap,
	ns2__updateClient *ns2__updateClient_)
{
	struct __ns1__updateClient *_p = ::soap_new___ns1__updateClient(soap);
	if (_p)
	{	::soap_default___ns1__updateClient(soap, _p);
		_p->ns2__updateClient_ = ns2__updateClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateClient(struct soap*, const struct __ns1__updateClient *, const char*, const char*);

inline int soap_write___ns1__updateClient(struct soap *soap, struct __ns1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__updateClient(soap, p), 0) || ::soap_put___ns1__updateClient(soap, p, "-ns1:updateClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__updateClient(struct soap *soap, const char *URL, struct __ns1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateClient(soap, p), 0) || ::soap_put___ns1__updateClient(soap, p, "-ns1:updateClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__updateClient(struct soap *soap, const char *URL, struct __ns1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateClient(soap, p), 0) || ::soap_put___ns1__updateClient(soap, p, "-ns1:updateClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__updateClient(struct soap *soap, const char *URL, struct __ns1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateClient(soap, p), 0) || ::soap_put___ns1__updateClient(soap, p, "-ns1:updateClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateClient * SOAP_FMAC4 soap_get___ns1__updateClient(struct soap*, struct __ns1__updateClient *, const char*, const char*);

inline int soap_read___ns1__updateClient(struct soap *soap, struct __ns1__updateClient *p)
{
	if (p)
	{	::soap_default___ns1__updateClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__updateClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__updateClient(struct soap *soap, const char *URL, struct __ns1__updateClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__updateClient(struct soap *soap, struct __ns1__updateClient *p)
{
	if (::soap_read___ns1__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getReadMessageFromShop_DEFINED
#define SOAP_TYPE___ns1__getReadMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getReadMessageFromShop(struct soap*, struct __ns1__getReadMessageFromShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getReadMessageFromShop(struct soap*, const struct __ns1__getReadMessageFromShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getReadMessageFromShop(struct soap*, const char*, int, const struct __ns1__getReadMessageFromShop *, const char*);
SOAP_FMAC3 struct __ns1__getReadMessageFromShop * SOAP_FMAC4 soap_in___ns1__getReadMessageFromShop(struct soap*, const char*, struct __ns1__getReadMessageFromShop *, const char*);
SOAP_FMAC1 struct __ns1__getReadMessageFromShop * SOAP_FMAC2 soap_instantiate___ns1__getReadMessageFromShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getReadMessageFromShop * soap_new___ns1__getReadMessageFromShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getReadMessageFromShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getReadMessageFromShop * soap_new_req___ns1__getReadMessageFromShop(
	struct soap *soap)
{
	struct __ns1__getReadMessageFromShop *_p = ::soap_new___ns1__getReadMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__getReadMessageFromShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__getReadMessageFromShop * soap_new_set___ns1__getReadMessageFromShop(
	struct soap *soap,
	ns2__getReadMessageFromShop *ns2__getReadMessageFromShop_)
{
	struct __ns1__getReadMessageFromShop *_p = ::soap_new___ns1__getReadMessageFromShop(soap);
	if (_p)
	{	::soap_default___ns1__getReadMessageFromShop(soap, _p);
		_p->ns2__getReadMessageFromShop_ = ns2__getReadMessageFromShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getReadMessageFromShop(struct soap*, const struct __ns1__getReadMessageFromShop *, const char*, const char*);

inline int soap_write___ns1__getReadMessageFromShop(struct soap *soap, struct __ns1__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getReadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getReadMessageFromShop(soap, p, "-ns1:getReadMessageFromShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getReadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getReadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getReadMessageFromShop(soap, p, "-ns1:getReadMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getReadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getReadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getReadMessageFromShop(soap, p, "-ns1:getReadMessageFromShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getReadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getReadMessageFromShop(soap, p), 0) || ::soap_put___ns1__getReadMessageFromShop(soap, p, "-ns1:getReadMessageFromShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getReadMessageFromShop * SOAP_FMAC4 soap_get___ns1__getReadMessageFromShop(struct soap*, struct __ns1__getReadMessageFromShop *, const char*, const char*);

inline int soap_read___ns1__getReadMessageFromShop(struct soap *soap, struct __ns1__getReadMessageFromShop *p)
{
	if (p)
	{	::soap_default___ns1__getReadMessageFromShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getReadMessageFromShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getReadMessageFromShop(struct soap *soap, const char *URL, struct __ns1__getReadMessageFromShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getReadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getReadMessageFromShop(struct soap *soap, struct __ns1__getReadMessageFromShop *p)
{
	if (::soap_read___ns1__getReadMessageFromShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getProductListByInfo_DEFINED
#define SOAP_TYPE___ns1__getProductListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProductListByInfo(struct soap*, struct __ns1__getProductListByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProductListByInfo(struct soap*, const struct __ns1__getProductListByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProductListByInfo(struct soap*, const char*, int, const struct __ns1__getProductListByInfo *, const char*);
SOAP_FMAC3 struct __ns1__getProductListByInfo * SOAP_FMAC4 soap_in___ns1__getProductListByInfo(struct soap*, const char*, struct __ns1__getProductListByInfo *, const char*);
SOAP_FMAC1 struct __ns1__getProductListByInfo * SOAP_FMAC2 soap_instantiate___ns1__getProductListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProductListByInfo * soap_new___ns1__getProductListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getProductListByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getProductListByInfo * soap_new_req___ns1__getProductListByInfo(
	struct soap *soap)
{
	struct __ns1__getProductListByInfo *_p = ::soap_new___ns1__getProductListByInfo(soap);
	if (_p)
	{	::soap_default___ns1__getProductListByInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__getProductListByInfo * soap_new_set___ns1__getProductListByInfo(
	struct soap *soap,
	ns2__getProductListByInfo *ns2__getProductListByInfo_)
{
	struct __ns1__getProductListByInfo *_p = ::soap_new___ns1__getProductListByInfo(soap);
	if (_p)
	{	::soap_default___ns1__getProductListByInfo(soap, _p);
		_p->ns2__getProductListByInfo_ = ns2__getProductListByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProductListByInfo(struct soap*, const struct __ns1__getProductListByInfo *, const char*, const char*);

inline int soap_write___ns1__getProductListByInfo(struct soap *soap, struct __ns1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getProductListByInfo(soap, p), 0) || ::soap_put___ns1__getProductListByInfo(soap, p, "-ns1:getProductListByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getProductListByInfo(struct soap *soap, const char *URL, struct __ns1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductListByInfo(soap, p), 0) || ::soap_put___ns1__getProductListByInfo(soap, p, "-ns1:getProductListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getProductListByInfo(struct soap *soap, const char *URL, struct __ns1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductListByInfo(soap, p), 0) || ::soap_put___ns1__getProductListByInfo(soap, p, "-ns1:getProductListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getProductListByInfo(struct soap *soap, const char *URL, struct __ns1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProductListByInfo(soap, p), 0) || ::soap_put___ns1__getProductListByInfo(soap, p, "-ns1:getProductListByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getProductListByInfo * SOAP_FMAC4 soap_get___ns1__getProductListByInfo(struct soap*, struct __ns1__getProductListByInfo *, const char*, const char*);

inline int soap_read___ns1__getProductListByInfo(struct soap *soap, struct __ns1__getProductListByInfo *p)
{
	if (p)
	{	::soap_default___ns1__getProductListByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getProductListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getProductListByInfo(struct soap *soap, const char *URL, struct __ns1__getProductListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getProductListByInfo(struct soap *soap, struct __ns1__getProductListByInfo *p)
{
	if (::soap_read___ns1__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__updateShop_DEFINED
#define SOAP_TYPE___ns1__updateShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__updateShop(struct soap*, struct __ns1__updateShop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__updateShop(struct soap*, const struct __ns1__updateShop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__updateShop(struct soap*, const char*, int, const struct __ns1__updateShop *, const char*);
SOAP_FMAC3 struct __ns1__updateShop * SOAP_FMAC4 soap_in___ns1__updateShop(struct soap*, const char*, struct __ns1__updateShop *, const char*);
SOAP_FMAC1 struct __ns1__updateShop * SOAP_FMAC2 soap_instantiate___ns1__updateShop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__updateShop * soap_new___ns1__updateShop(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__updateShop(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__updateShop * soap_new_req___ns1__updateShop(
	struct soap *soap)
{
	struct __ns1__updateShop *_p = ::soap_new___ns1__updateShop(soap);
	if (_p)
	{	::soap_default___ns1__updateShop(soap, _p);
	}
	return _p;
}

inline struct __ns1__updateShop * soap_new_set___ns1__updateShop(
	struct soap *soap,
	ns2__updateShop *ns2__updateShop_)
{
	struct __ns1__updateShop *_p = ::soap_new___ns1__updateShop(soap);
	if (_p)
	{	::soap_default___ns1__updateShop(soap, _p);
		_p->ns2__updateShop_ = ns2__updateShop_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__updateShop(struct soap*, const struct __ns1__updateShop *, const char*, const char*);

inline int soap_write___ns1__updateShop(struct soap *soap, struct __ns1__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__updateShop(soap, p), 0) || ::soap_put___ns1__updateShop(soap, p, "-ns1:updateShop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__updateShop(struct soap *soap, const char *URL, struct __ns1__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateShop(soap, p), 0) || ::soap_put___ns1__updateShop(soap, p, "-ns1:updateShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__updateShop(struct soap *soap, const char *URL, struct __ns1__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateShop(soap, p), 0) || ::soap_put___ns1__updateShop(soap, p, "-ns1:updateShop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__updateShop(struct soap *soap, const char *URL, struct __ns1__updateShop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__updateShop(soap, p), 0) || ::soap_put___ns1__updateShop(soap, p, "-ns1:updateShop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__updateShop * SOAP_FMAC4 soap_get___ns1__updateShop(struct soap*, struct __ns1__updateShop *, const char*, const char*);

inline int soap_read___ns1__updateShop(struct soap *soap, struct __ns1__updateShop *p)
{
	if (p)
	{	::soap_default___ns1__updateShop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__updateShop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__updateShop(struct soap *soap, const char *URL, struct __ns1__updateShop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__updateShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__updateShop(struct soap *soap, struct __ns1__updateShop *p)
{
	if (::soap_read___ns1__updateShop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getShopByNameAndPwd_DEFINED
#define SOAP_TYPE___ns1__getShopByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getShopByNameAndPwd(struct soap*, struct __ns1__getShopByNameAndPwd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getShopByNameAndPwd(struct soap*, const struct __ns1__getShopByNameAndPwd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getShopByNameAndPwd(struct soap*, const char*, int, const struct __ns1__getShopByNameAndPwd *, const char*);
SOAP_FMAC3 struct __ns1__getShopByNameAndPwd * SOAP_FMAC4 soap_in___ns1__getShopByNameAndPwd(struct soap*, const char*, struct __ns1__getShopByNameAndPwd *, const char*);
SOAP_FMAC1 struct __ns1__getShopByNameAndPwd * SOAP_FMAC2 soap_instantiate___ns1__getShopByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getShopByNameAndPwd * soap_new___ns1__getShopByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getShopByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getShopByNameAndPwd * soap_new_req___ns1__getShopByNameAndPwd(
	struct soap *soap)
{
	struct __ns1__getShopByNameAndPwd *_p = ::soap_new___ns1__getShopByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__getShopByNameAndPwd(soap, _p);
	}
	return _p;
}

inline struct __ns1__getShopByNameAndPwd * soap_new_set___ns1__getShopByNameAndPwd(
	struct soap *soap,
	ns2__getShopByNameAndPwd *ns2__getShopByNameAndPwd_)
{
	struct __ns1__getShopByNameAndPwd *_p = ::soap_new___ns1__getShopByNameAndPwd(soap);
	if (_p)
	{	::soap_default___ns1__getShopByNameAndPwd(soap, _p);
		_p->ns2__getShopByNameAndPwd_ = ns2__getShopByNameAndPwd_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getShopByNameAndPwd(struct soap*, const struct __ns1__getShopByNameAndPwd *, const char*, const char*);

inline int soap_write___ns1__getShopByNameAndPwd(struct soap *soap, struct __ns1__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getShopByNameAndPwd(soap, p, "-ns1:getShopByNameAndPwd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getShopByNameAndPwd(soap, p, "-ns1:getShopByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getShopByNameAndPwd(soap, p, "-ns1:getShopByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getShopByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getShopByNameAndPwd(soap, p), 0) || ::soap_put___ns1__getShopByNameAndPwd(soap, p, "-ns1:getShopByNameAndPwd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getShopByNameAndPwd * SOAP_FMAC4 soap_get___ns1__getShopByNameAndPwd(struct soap*, struct __ns1__getShopByNameAndPwd *, const char*, const char*);

inline int soap_read___ns1__getShopByNameAndPwd(struct soap *soap, struct __ns1__getShopByNameAndPwd *p)
{
	if (p)
	{	::soap_default___ns1__getShopByNameAndPwd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getShopByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getShopByNameAndPwd(struct soap *soap, const char *URL, struct __ns1__getShopByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getShopByNameAndPwd(struct soap *soap, struct __ns1__getShopByNameAndPwd *p)
{
	if (::soap_read___ns1__getShopByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getOrderList_DEFINED
#define SOAP_TYPE___ns1__getOrderList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOrderList(struct soap*, struct __ns1__getOrderList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOrderList(struct soap*, const struct __ns1__getOrderList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOrderList(struct soap*, const char*, int, const struct __ns1__getOrderList *, const char*);
SOAP_FMAC3 struct __ns1__getOrderList * SOAP_FMAC4 soap_in___ns1__getOrderList(struct soap*, const char*, struct __ns1__getOrderList *, const char*);
SOAP_FMAC1 struct __ns1__getOrderList * SOAP_FMAC2 soap_instantiate___ns1__getOrderList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getOrderList * soap_new___ns1__getOrderList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getOrderList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getOrderList * soap_new_req___ns1__getOrderList(
	struct soap *soap)
{
	struct __ns1__getOrderList *_p = ::soap_new___ns1__getOrderList(soap);
	if (_p)
	{	::soap_default___ns1__getOrderList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getOrderList * soap_new_set___ns1__getOrderList(
	struct soap *soap,
	ns2__getOrderList *ns2__getOrderList_)
{
	struct __ns1__getOrderList *_p = ::soap_new___ns1__getOrderList(soap);
	if (_p)
	{	::soap_default___ns1__getOrderList(soap, _p);
		_p->ns2__getOrderList_ = ns2__getOrderList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOrderList(struct soap*, const struct __ns1__getOrderList *, const char*, const char*);

inline int soap_write___ns1__getOrderList(struct soap *soap, struct __ns1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getOrderList(soap, p), 0) || ::soap_put___ns1__getOrderList(soap, p, "-ns1:getOrderList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getOrderList(struct soap *soap, const char *URL, struct __ns1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderList(soap, p), 0) || ::soap_put___ns1__getOrderList(soap, p, "-ns1:getOrderList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getOrderList(struct soap *soap, const char *URL, struct __ns1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderList(soap, p), 0) || ::soap_put___ns1__getOrderList(soap, p, "-ns1:getOrderList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getOrderList(struct soap *soap, const char *URL, struct __ns1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrderList(soap, p), 0) || ::soap_put___ns1__getOrderList(soap, p, "-ns1:getOrderList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getOrderList * SOAP_FMAC4 soap_get___ns1__getOrderList(struct soap*, struct __ns1__getOrderList *, const char*, const char*);

inline int soap_read___ns1__getOrderList(struct soap *soap, struct __ns1__getOrderList *p)
{
	if (p)
	{	::soap_default___ns1__getOrderList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getOrderList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getOrderList(struct soap *soap, const char *URL, struct __ns1__getOrderList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getOrderList(struct soap *soap, struct __ns1__getOrderList *p)
{
	if (::soap_read___ns1__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__deleteProductTypeByName_DEFINED
#define SOAP_TYPE___ns1__deleteProductTypeByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteProductTypeByName(struct soap*, struct __ns1__deleteProductTypeByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteProductTypeByName(struct soap*, const struct __ns1__deleteProductTypeByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteProductTypeByName(struct soap*, const char*, int, const struct __ns1__deleteProductTypeByName *, const char*);
SOAP_FMAC3 struct __ns1__deleteProductTypeByName * SOAP_FMAC4 soap_in___ns1__deleteProductTypeByName(struct soap*, const char*, struct __ns1__deleteProductTypeByName *, const char*);
SOAP_FMAC1 struct __ns1__deleteProductTypeByName * SOAP_FMAC2 soap_instantiate___ns1__deleteProductTypeByName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteProductTypeByName * soap_new___ns1__deleteProductTypeByName(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__deleteProductTypeByName(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__deleteProductTypeByName * soap_new_req___ns1__deleteProductTypeByName(
	struct soap *soap)
{
	struct __ns1__deleteProductTypeByName *_p = ::soap_new___ns1__deleteProductTypeByName(soap);
	if (_p)
	{	::soap_default___ns1__deleteProductTypeByName(soap, _p);
	}
	return _p;
}

inline struct __ns1__deleteProductTypeByName * soap_new_set___ns1__deleteProductTypeByName(
	struct soap *soap,
	ns2__deleteProductTypeByName *ns2__deleteProductTypeByName_)
{
	struct __ns1__deleteProductTypeByName *_p = ::soap_new___ns1__deleteProductTypeByName(soap);
	if (_p)
	{	::soap_default___ns1__deleteProductTypeByName(soap, _p);
		_p->ns2__deleteProductTypeByName_ = ns2__deleteProductTypeByName_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteProductTypeByName(struct soap*, const struct __ns1__deleteProductTypeByName *, const char*, const char*);

inline int soap_write___ns1__deleteProductTypeByName(struct soap *soap, struct __ns1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__deleteProductTypeByName(soap, p), 0) || ::soap_put___ns1__deleteProductTypeByName(soap, p, "-ns1:deleteProductTypeByName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __ns1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteProductTypeByName(soap, p), 0) || ::soap_put___ns1__deleteProductTypeByName(soap, p, "-ns1:deleteProductTypeByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __ns1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteProductTypeByName(soap, p), 0) || ::soap_put___ns1__deleteProductTypeByName(soap, p, "-ns1:deleteProductTypeByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __ns1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__deleteProductTypeByName(soap, p), 0) || ::soap_put___ns1__deleteProductTypeByName(soap, p, "-ns1:deleteProductTypeByName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__deleteProductTypeByName * SOAP_FMAC4 soap_get___ns1__deleteProductTypeByName(struct soap*, struct __ns1__deleteProductTypeByName *, const char*, const char*);

inline int soap_read___ns1__deleteProductTypeByName(struct soap *soap, struct __ns1__deleteProductTypeByName *p)
{
	if (p)
	{	::soap_default___ns1__deleteProductTypeByName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__deleteProductTypeByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __ns1__deleteProductTypeByName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__deleteProductTypeByName(struct soap *soap, struct __ns1__deleteProductTypeByName *p)
{
	if (::soap_read___ns1__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__addProduct_DEFINED
#define SOAP_TYPE___ns1__addProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addProduct(struct soap*, struct __ns1__addProduct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addProduct(struct soap*, const struct __ns1__addProduct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addProduct(struct soap*, const char*, int, const struct __ns1__addProduct *, const char*);
SOAP_FMAC3 struct __ns1__addProduct * SOAP_FMAC4 soap_in___ns1__addProduct(struct soap*, const char*, struct __ns1__addProduct *, const char*);
SOAP_FMAC1 struct __ns1__addProduct * SOAP_FMAC2 soap_instantiate___ns1__addProduct(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__addProduct * soap_new___ns1__addProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__addProduct(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__addProduct * soap_new_req___ns1__addProduct(
	struct soap *soap)
{
	struct __ns1__addProduct *_p = ::soap_new___ns1__addProduct(soap);
	if (_p)
	{	::soap_default___ns1__addProduct(soap, _p);
	}
	return _p;
}

inline struct __ns1__addProduct * soap_new_set___ns1__addProduct(
	struct soap *soap,
	ns2__addProduct *ns2__addProduct_)
{
	struct __ns1__addProduct *_p = ::soap_new___ns1__addProduct(soap);
	if (_p)
	{	::soap_default___ns1__addProduct(soap, _p);
		_p->ns2__addProduct_ = ns2__addProduct_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addProduct(struct soap*, const struct __ns1__addProduct *, const char*, const char*);

inline int soap_write___ns1__addProduct(struct soap *soap, struct __ns1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__addProduct(soap, p), 0) || ::soap_put___ns1__addProduct(soap, p, "-ns1:addProduct", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__addProduct(struct soap *soap, const char *URL, struct __ns1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addProduct(soap, p), 0) || ::soap_put___ns1__addProduct(soap, p, "-ns1:addProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__addProduct(struct soap *soap, const char *URL, struct __ns1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addProduct(soap, p), 0) || ::soap_put___ns1__addProduct(soap, p, "-ns1:addProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__addProduct(struct soap *soap, const char *URL, struct __ns1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__addProduct(soap, p), 0) || ::soap_put___ns1__addProduct(soap, p, "-ns1:addProduct", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__addProduct * SOAP_FMAC4 soap_get___ns1__addProduct(struct soap*, struct __ns1__addProduct *, const char*, const char*);

inline int soap_read___ns1__addProduct(struct soap *soap, struct __ns1__addProduct *p)
{
	if (p)
	{	::soap_default___ns1__addProduct(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__addProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__addProduct(struct soap *soap, const char *URL, struct __ns1__addProduct *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__addProduct(struct soap *soap, struct __ns1__addProduct *p)
{
	if (::soap_read___ns1__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__selectProductForUpdate_DEFINED
#define SOAP_TYPE___ns1__selectProductForUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__selectProductForUpdate(struct soap*, struct __ns1__selectProductForUpdate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__selectProductForUpdate(struct soap*, const struct __ns1__selectProductForUpdate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__selectProductForUpdate(struct soap*, const char*, int, const struct __ns1__selectProductForUpdate *, const char*);
SOAP_FMAC3 struct __ns1__selectProductForUpdate * SOAP_FMAC4 soap_in___ns1__selectProductForUpdate(struct soap*, const char*, struct __ns1__selectProductForUpdate *, const char*);
SOAP_FMAC1 struct __ns1__selectProductForUpdate * SOAP_FMAC2 soap_instantiate___ns1__selectProductForUpdate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__selectProductForUpdate * soap_new___ns1__selectProductForUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__selectProductForUpdate(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__selectProductForUpdate * soap_new_req___ns1__selectProductForUpdate(
	struct soap *soap)
{
	struct __ns1__selectProductForUpdate *_p = ::soap_new___ns1__selectProductForUpdate(soap);
	if (_p)
	{	::soap_default___ns1__selectProductForUpdate(soap, _p);
	}
	return _p;
}

inline struct __ns1__selectProductForUpdate * soap_new_set___ns1__selectProductForUpdate(
	struct soap *soap,
	ns2__selectProductForUpdate *ns2__selectProductForUpdate_)
{
	struct __ns1__selectProductForUpdate *_p = ::soap_new___ns1__selectProductForUpdate(soap);
	if (_p)
	{	::soap_default___ns1__selectProductForUpdate(soap, _p);
		_p->ns2__selectProductForUpdate_ = ns2__selectProductForUpdate_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__selectProductForUpdate(struct soap*, const struct __ns1__selectProductForUpdate *, const char*, const char*);

inline int soap_write___ns1__selectProductForUpdate(struct soap *soap, struct __ns1__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__selectProductForUpdate(soap, p), 0) || ::soap_put___ns1__selectProductForUpdate(soap, p, "-ns1:selectProductForUpdate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__selectProductForUpdate(struct soap *soap, const char *URL, struct __ns1__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__selectProductForUpdate(soap, p), 0) || ::soap_put___ns1__selectProductForUpdate(soap, p, "-ns1:selectProductForUpdate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__selectProductForUpdate(struct soap *soap, const char *URL, struct __ns1__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__selectProductForUpdate(soap, p), 0) || ::soap_put___ns1__selectProductForUpdate(soap, p, "-ns1:selectProductForUpdate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__selectProductForUpdate(struct soap *soap, const char *URL, struct __ns1__selectProductForUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__selectProductForUpdate(soap, p), 0) || ::soap_put___ns1__selectProductForUpdate(soap, p, "-ns1:selectProductForUpdate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__selectProductForUpdate * SOAP_FMAC4 soap_get___ns1__selectProductForUpdate(struct soap*, struct __ns1__selectProductForUpdate *, const char*, const char*);

inline int soap_read___ns1__selectProductForUpdate(struct soap *soap, struct __ns1__selectProductForUpdate *p)
{
	if (p)
	{	::soap_default___ns1__selectProductForUpdate(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__selectProductForUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__selectProductForUpdate(struct soap *soap, const char *URL, struct __ns1__selectProductForUpdate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__selectProductForUpdate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__selectProductForUpdate(struct soap *soap, struct __ns1__selectProductForUpdate *p)
{
	if (::soap_read___ns1__selectProductForUpdate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons2__InsertClient_DEFINED
#define SOAP_TYPE_PointerTons2__InsertClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__InsertClient(struct soap*, ns2__InsertClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__InsertClient(struct soap*, const char *, int, ns2__InsertClient *const*, const char *);
SOAP_FMAC3 ns2__InsertClient ** SOAP_FMAC4 soap_in_PointerTons2__InsertClient(struct soap*, const char*, ns2__InsertClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__InsertClient(struct soap*, ns2__InsertClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__InsertClient ** SOAP_FMAC4 soap_get_PointerTons2__InsertClient(struct soap*, ns2__InsertClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteShoppingCart_DEFINED
#define SOAP_TYPE_PointerTons2__deleteShoppingCart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteShoppingCart(struct soap*, ns2__deleteShoppingCart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteShoppingCart(struct soap*, const char *, int, ns2__deleteShoppingCart *const*, const char *);
SOAP_FMAC3 ns2__deleteShoppingCart ** SOAP_FMAC4 soap_in_PointerTons2__deleteShoppingCart(struct soap*, const char*, ns2__deleteShoppingCart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteShoppingCart(struct soap*, ns2__deleteShoppingCart *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteShoppingCart ** SOAP_FMAC4 soap_get_PointerTons2__deleteShoppingCart(struct soap*, ns2__deleteShoppingCart **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getClientByNameAndPwd_DEFINED
#define SOAP_TYPE_PointerTons2__getClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getClientByNameAndPwd(struct soap*, ns2__getClientByNameAndPwd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getClientByNameAndPwd(struct soap*, const char *, int, ns2__getClientByNameAndPwd *const*, const char *);
SOAP_FMAC3 ns2__getClientByNameAndPwd ** SOAP_FMAC4 soap_in_PointerTons2__getClientByNameAndPwd(struct soap*, const char*, ns2__getClientByNameAndPwd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getClientByNameAndPwd(struct soap*, ns2__getClientByNameAndPwd *const*, const char*, const char*);
SOAP_FMAC3 ns2__getClientByNameAndPwd ** SOAP_FMAC4 soap_get_PointerTons2__getClientByNameAndPwd(struct soap*, ns2__getClientByNameAndPwd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getProductLikeList_DEFINED
#define SOAP_TYPE_PointerTons2__getProductLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getProductLikeList(struct soap*, ns2__getProductLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getProductLikeList(struct soap*, const char *, int, ns2__getProductLikeList *const*, const char *);
SOAP_FMAC3 ns2__getProductLikeList ** SOAP_FMAC4 soap_in_PointerTons2__getProductLikeList(struct soap*, const char*, ns2__getProductLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getProductLikeList(struct soap*, ns2__getProductLikeList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getProductLikeList ** SOAP_FMAC4 soap_get_PointerTons2__getProductLikeList(struct soap*, ns2__getProductLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteMessageFromClient_DEFINED
#define SOAP_TYPE_PointerTons2__deleteMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteMessageFromClient(struct soap*, ns2__deleteMessageFromClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteMessageFromClient(struct soap*, const char *, int, ns2__deleteMessageFromClient *const*, const char *);
SOAP_FMAC3 ns2__deleteMessageFromClient ** SOAP_FMAC4 soap_in_PointerTons2__deleteMessageFromClient(struct soap*, const char*, ns2__deleteMessageFromClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteMessageFromClient(struct soap*, ns2__deleteMessageFromClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteMessageFromClient ** SOAP_FMAC4 soap_get_PointerTons2__deleteMessageFromClient(struct soap*, ns2__deleteMessageFromClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__addProductType_DEFINED
#define SOAP_TYPE_PointerTons2__addProductType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__addProductType(struct soap*, ns2__addProductType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__addProductType(struct soap*, const char *, int, ns2__addProductType *const*, const char *);
SOAP_FMAC3 ns2__addProductType ** SOAP_FMAC4 soap_in_PointerTons2__addProductType(struct soap*, const char*, ns2__addProductType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__addProductType(struct soap*, ns2__addProductType *const*, const char*, const char*);
SOAP_FMAC3 ns2__addProductType ** SOAP_FMAC4 soap_get_PointerTons2__addProductType(struct soap*, ns2__addProductType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getOrderListByInfo_DEFINED
#define SOAP_TYPE_PointerTons2__getOrderListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getOrderListByInfo(struct soap*, ns2__getOrderListByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getOrderListByInfo(struct soap*, const char *, int, ns2__getOrderListByInfo *const*, const char *);
SOAP_FMAC3 ns2__getOrderListByInfo ** SOAP_FMAC4 soap_in_PointerTons2__getOrderListByInfo(struct soap*, const char*, ns2__getOrderListByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getOrderListByInfo(struct soap*, ns2__getOrderListByInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__getOrderListByInfo ** SOAP_FMAC4 soap_get_PointerTons2__getOrderListByInfo(struct soap*, ns2__getOrderListByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getShopList_DEFINED
#define SOAP_TYPE_PointerTons2__getShopList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getShopList(struct soap*, ns2__getShopList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getShopList(struct soap*, const char *, int, ns2__getShopList *const*, const char *);
SOAP_FMAC3 ns2__getShopList ** SOAP_FMAC4 soap_in_PointerTons2__getShopList(struct soap*, const char*, ns2__getShopList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getShopList(struct soap*, ns2__getShopList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getShopList ** SOAP_FMAC4 soap_get_PointerTons2__getShopList(struct soap*, ns2__getShopList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getClientLikeList_DEFINED
#define SOAP_TYPE_PointerTons2__getClientLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getClientLikeList(struct soap*, ns2__getClientLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getClientLikeList(struct soap*, const char *, int, ns2__getClientLikeList *const*, const char *);
SOAP_FMAC3 ns2__getClientLikeList ** SOAP_FMAC4 soap_in_PointerTons2__getClientLikeList(struct soap*, const char*, ns2__getClientLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getClientLikeList(struct soap*, ns2__getClientLikeList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getClientLikeList ** SOAP_FMAC4 soap_get_PointerTons2__getClientLikeList(struct soap*, ns2__getClientLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getUnreadMessageFromShop_DEFINED
#define SOAP_TYPE_PointerTons2__getUnreadMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getUnreadMessageFromShop(struct soap*, ns2__getUnreadMessageFromShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getUnreadMessageFromShop(struct soap*, const char *, int, ns2__getUnreadMessageFromShop *const*, const char *);
SOAP_FMAC3 ns2__getUnreadMessageFromShop ** SOAP_FMAC4 soap_in_PointerTons2__getUnreadMessageFromShop(struct soap*, const char*, ns2__getUnreadMessageFromShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getUnreadMessageFromShop(struct soap*, ns2__getUnreadMessageFromShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__getUnreadMessageFromShop ** SOAP_FMAC4 soap_get_PointerTons2__getUnreadMessageFromShop(struct soap*, ns2__getUnreadMessageFromShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getOrderLikeList_DEFINED
#define SOAP_TYPE_PointerTons2__getOrderLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getOrderLikeList(struct soap*, ns2__getOrderLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getOrderLikeList(struct soap*, const char *, int, ns2__getOrderLikeList *const*, const char *);
SOAP_FMAC3 ns2__getOrderLikeList ** SOAP_FMAC4 soap_in_PointerTons2__getOrderLikeList(struct soap*, const char*, ns2__getOrderLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getOrderLikeList(struct soap*, ns2__getOrderLikeList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getOrderLikeList ** SOAP_FMAC4 soap_get_PointerTons2__getOrderLikeList(struct soap*, ns2__getOrderLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteMessageFromShop_DEFINED
#define SOAP_TYPE_PointerTons2__deleteMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteMessageFromShop(struct soap*, ns2__deleteMessageFromShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteMessageFromShop(struct soap*, const char *, int, ns2__deleteMessageFromShop *const*, const char *);
SOAP_FMAC3 ns2__deleteMessageFromShop ** SOAP_FMAC4 soap_in_PointerTons2__deleteMessageFromShop(struct soap*, const char*, ns2__deleteMessageFromShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteMessageFromShop(struct soap*, ns2__deleteMessageFromShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteMessageFromShop ** SOAP_FMAC4 soap_get_PointerTons2__deleteMessageFromShop(struct soap*, ns2__deleteMessageFromShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getMessageFromShop_DEFINED
#define SOAP_TYPE_PointerTons2__getMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getMessageFromShop(struct soap*, ns2__getMessageFromShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getMessageFromShop(struct soap*, const char *, int, ns2__getMessageFromShop *const*, const char *);
SOAP_FMAC3 ns2__getMessageFromShop ** SOAP_FMAC4 soap_in_PointerTons2__getMessageFromShop(struct soap*, const char*, ns2__getMessageFromShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getMessageFromShop(struct soap*, ns2__getMessageFromShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__getMessageFromShop ** SOAP_FMAC4 soap_get_PointerTons2__getMessageFromShop(struct soap*, ns2__getMessageFromShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getShopLikeList_DEFINED
#define SOAP_TYPE_PointerTons2__getShopLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getShopLikeList(struct soap*, ns2__getShopLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getShopLikeList(struct soap*, const char *, int, ns2__getShopLikeList *const*, const char *);
SOAP_FMAC3 ns2__getShopLikeList ** SOAP_FMAC4 soap_in_PointerTons2__getShopLikeList(struct soap*, const char*, ns2__getShopLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getShopLikeList(struct soap*, ns2__getShopLikeList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getShopLikeList ** SOAP_FMAC4 soap_get_PointerTons2__getShopLikeList(struct soap*, ns2__getShopLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__InsertMessage_DEFINED
#define SOAP_TYPE_PointerTons2__InsertMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__InsertMessage(struct soap*, ns2__InsertMessage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__InsertMessage(struct soap*, const char *, int, ns2__InsertMessage *const*, const char *);
SOAP_FMAC3 ns2__InsertMessage ** SOAP_FMAC4 soap_in_PointerTons2__InsertMessage(struct soap*, const char*, ns2__InsertMessage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__InsertMessage(struct soap*, ns2__InsertMessage *const*, const char*, const char*);
SOAP_FMAC3 ns2__InsertMessage ** SOAP_FMAC4 soap_get_PointerTons2__InsertMessage(struct soap*, ns2__InsertMessage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__updateHistory_DEFINED
#define SOAP_TYPE_PointerTons2__updateHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateHistory(struct soap*, ns2__updateHistory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateHistory(struct soap*, const char *, int, ns2__updateHistory *const*, const char *);
SOAP_FMAC3 ns2__updateHistory ** SOAP_FMAC4 soap_in_PointerTons2__updateHistory(struct soap*, const char*, ns2__updateHistory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateHistory(struct soap*, ns2__updateHistory *const*, const char*, const char*);
SOAP_FMAC3 ns2__updateHistory ** SOAP_FMAC4 soap_get_PointerTons2__updateHistory(struct soap*, ns2__updateHistory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getReadMessageFromClient_DEFINED
#define SOAP_TYPE_PointerTons2__getReadMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getReadMessageFromClient(struct soap*, ns2__getReadMessageFromClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getReadMessageFromClient(struct soap*, const char *, int, ns2__getReadMessageFromClient *const*, const char *);
SOAP_FMAC3 ns2__getReadMessageFromClient ** SOAP_FMAC4 soap_in_PointerTons2__getReadMessageFromClient(struct soap*, const char*, ns2__getReadMessageFromClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getReadMessageFromClient(struct soap*, ns2__getReadMessageFromClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__getReadMessageFromClient ** SOAP_FMAC4 soap_get_PointerTons2__getReadMessageFromClient(struct soap*, ns2__getReadMessageFromClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getOrderListHistory_DEFINED
#define SOAP_TYPE_PointerTons2__getOrderListHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getOrderListHistory(struct soap*, ns2__getOrderListHistory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getOrderListHistory(struct soap*, const char *, int, ns2__getOrderListHistory *const*, const char *);
SOAP_FMAC3 ns2__getOrderListHistory ** SOAP_FMAC4 soap_in_PointerTons2__getOrderListHistory(struct soap*, const char*, ns2__getOrderListHistory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getOrderListHistory(struct soap*, ns2__getOrderListHistory *const*, const char*, const char*);
SOAP_FMAC3 ns2__getOrderListHistory ** SOAP_FMAC4 soap_get_PointerTons2__getOrderListHistory(struct soap*, ns2__getOrderListHistory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getProductList_DEFINED
#define SOAP_TYPE_PointerTons2__getProductList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getProductList(struct soap*, ns2__getProductList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getProductList(struct soap*, const char *, int, ns2__getProductList *const*, const char *);
SOAP_FMAC3 ns2__getProductList ** SOAP_FMAC4 soap_in_PointerTons2__getProductList(struct soap*, const char*, ns2__getProductList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getProductList(struct soap*, ns2__getProductList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getProductList ** SOAP_FMAC4 soap_get_PointerTons2__getProductList(struct soap*, ns2__getProductList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteShopByNameAndPwd_DEFINED
#define SOAP_TYPE_PointerTons2__deleteShopByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteShopByNameAndPwd(struct soap*, ns2__deleteShopByNameAndPwd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteShopByNameAndPwd(struct soap*, const char *, int, ns2__deleteShopByNameAndPwd *const*, const char *);
SOAP_FMAC3 ns2__deleteShopByNameAndPwd ** SOAP_FMAC4 soap_in_PointerTons2__deleteShopByNameAndPwd(struct soap*, const char*, ns2__deleteShopByNameAndPwd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteShopByNameAndPwd(struct soap*, ns2__deleteShopByNameAndPwd *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteShopByNameAndPwd ** SOAP_FMAC4 soap_get_PointerTons2__deleteShopByNameAndPwd(struct soap*, ns2__deleteShopByNameAndPwd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__addOrder_DEFINED
#define SOAP_TYPE_PointerTons2__addOrder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__addOrder(struct soap*, ns2__addOrder *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__addOrder(struct soap*, const char *, int, ns2__addOrder *const*, const char *);
SOAP_FMAC3 ns2__addOrder ** SOAP_FMAC4 soap_in_PointerTons2__addOrder(struct soap*, const char*, ns2__addOrder **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__addOrder(struct soap*, ns2__addOrder *const*, const char*, const char*);
SOAP_FMAC3 ns2__addOrder ** SOAP_FMAC4 soap_get_PointerTons2__addOrder(struct soap*, ns2__addOrder **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getMessageFromClient_DEFINED
#define SOAP_TYPE_PointerTons2__getMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getMessageFromClient(struct soap*, ns2__getMessageFromClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getMessageFromClient(struct soap*, const char *, int, ns2__getMessageFromClient *const*, const char *);
SOAP_FMAC3 ns2__getMessageFromClient ** SOAP_FMAC4 soap_in_PointerTons2__getMessageFromClient(struct soap*, const char*, ns2__getMessageFromClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getMessageFromClient(struct soap*, ns2__getMessageFromClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__getMessageFromClient ** SOAP_FMAC4 soap_get_PointerTons2__getMessageFromClient(struct soap*, ns2__getMessageFromClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__updateProductByInfo_DEFINED
#define SOAP_TYPE_PointerTons2__updateProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateProductByInfo(struct soap*, ns2__updateProductByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateProductByInfo(struct soap*, const char *, int, ns2__updateProductByInfo *const*, const char *);
SOAP_FMAC3 ns2__updateProductByInfo ** SOAP_FMAC4 soap_in_PointerTons2__updateProductByInfo(struct soap*, const char*, ns2__updateProductByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateProductByInfo(struct soap*, ns2__updateProductByInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__updateProductByInfo ** SOAP_FMAC4 soap_get_PointerTons2__updateProductByInfo(struct soap*, ns2__updateProductByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getUnreadMessageFromClient_DEFINED
#define SOAP_TYPE_PointerTons2__getUnreadMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getUnreadMessageFromClient(struct soap*, ns2__getUnreadMessageFromClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getUnreadMessageFromClient(struct soap*, const char *, int, ns2__getUnreadMessageFromClient *const*, const char *);
SOAP_FMAC3 ns2__getUnreadMessageFromClient ** SOAP_FMAC4 soap_in_PointerTons2__getUnreadMessageFromClient(struct soap*, const char*, ns2__getUnreadMessageFromClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getUnreadMessageFromClient(struct soap*, ns2__getUnreadMessageFromClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__getUnreadMessageFromClient ** SOAP_FMAC4 soap_get_PointerTons2__getUnreadMessageFromClient(struct soap*, ns2__getUnreadMessageFromClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__updateMessageFromClient_DEFINED
#define SOAP_TYPE_PointerTons2__updateMessageFromClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateMessageFromClient(struct soap*, ns2__updateMessageFromClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateMessageFromClient(struct soap*, const char *, int, ns2__updateMessageFromClient *const*, const char *);
SOAP_FMAC3 ns2__updateMessageFromClient ** SOAP_FMAC4 soap_in_PointerTons2__updateMessageFromClient(struct soap*, const char*, ns2__updateMessageFromClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateMessageFromClient(struct soap*, ns2__updateMessageFromClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__updateMessageFromClient ** SOAP_FMAC4 soap_get_PointerTons2__updateMessageFromClient(struct soap*, ns2__updateMessageFromClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__purchaseProduct_DEFINED
#define SOAP_TYPE_PointerTons2__purchaseProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__purchaseProduct(struct soap*, ns2__purchaseProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__purchaseProduct(struct soap*, const char *, int, ns2__purchaseProduct *const*, const char *);
SOAP_FMAC3 ns2__purchaseProduct ** SOAP_FMAC4 soap_in_PointerTons2__purchaseProduct(struct soap*, const char*, ns2__purchaseProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__purchaseProduct(struct soap*, ns2__purchaseProduct *const*, const char*, const char*);
SOAP_FMAC3 ns2__purchaseProduct ** SOAP_FMAC4 soap_get_PointerTons2__purchaseProduct(struct soap*, ns2__purchaseProduct **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getClientList_DEFINED
#define SOAP_TYPE_PointerTons2__getClientList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getClientList(struct soap*, ns2__getClientList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getClientList(struct soap*, const char *, int, ns2__getClientList *const*, const char *);
SOAP_FMAC3 ns2__getClientList ** SOAP_FMAC4 soap_in_PointerTons2__getClientList(struct soap*, const char*, ns2__getClientList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getClientList(struct soap*, ns2__getClientList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getClientList ** SOAP_FMAC4 soap_get_PointerTons2__getClientList(struct soap*, ns2__getClientList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getProductTypeByProName_DEFINED
#define SOAP_TYPE_PointerTons2__getProductTypeByProName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getProductTypeByProName(struct soap*, ns2__getProductTypeByProName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getProductTypeByProName(struct soap*, const char *, int, ns2__getProductTypeByProName *const*, const char *);
SOAP_FMAC3 ns2__getProductTypeByProName ** SOAP_FMAC4 soap_in_PointerTons2__getProductTypeByProName(struct soap*, const char*, ns2__getProductTypeByProName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getProductTypeByProName(struct soap*, ns2__getProductTypeByProName *const*, const char*, const char*);
SOAP_FMAC3 ns2__getProductTypeByProName ** SOAP_FMAC4 soap_get_PointerTons2__getProductTypeByProName(struct soap*, ns2__getProductTypeByProName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__updateMessageFromShop_DEFINED
#define SOAP_TYPE_PointerTons2__updateMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateMessageFromShop(struct soap*, ns2__updateMessageFromShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateMessageFromShop(struct soap*, const char *, int, ns2__updateMessageFromShop *const*, const char *);
SOAP_FMAC3 ns2__updateMessageFromShop ** SOAP_FMAC4 soap_in_PointerTons2__updateMessageFromShop(struct soap*, const char*, ns2__updateMessageFromShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateMessageFromShop(struct soap*, ns2__updateMessageFromShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__updateMessageFromShop ** SOAP_FMAC4 soap_get_PointerTons2__updateMessageFromShop(struct soap*, ns2__updateMessageFromShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__InsertShop_DEFINED
#define SOAP_TYPE_PointerTons2__InsertShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__InsertShop(struct soap*, ns2__InsertShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__InsertShop(struct soap*, const char *, int, ns2__InsertShop *const*, const char *);
SOAP_FMAC3 ns2__InsertShop ** SOAP_FMAC4 soap_in_PointerTons2__InsertShop(struct soap*, const char*, ns2__InsertShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__InsertShop(struct soap*, ns2__InsertShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__InsertShop ** SOAP_FMAC4 soap_get_PointerTons2__InsertShop(struct soap*, ns2__InsertShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteClientByNameAndPwd_DEFINED
#define SOAP_TYPE_PointerTons2__deleteClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteClientByNameAndPwd(struct soap*, ns2__deleteClientByNameAndPwd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteClientByNameAndPwd(struct soap*, const char *, int, ns2__deleteClientByNameAndPwd *const*, const char *);
SOAP_FMAC3 ns2__deleteClientByNameAndPwd ** SOAP_FMAC4 soap_in_PointerTons2__deleteClientByNameAndPwd(struct soap*, const char*, ns2__deleteClientByNameAndPwd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteClientByNameAndPwd(struct soap*, ns2__deleteClientByNameAndPwd *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteClientByNameAndPwd ** SOAP_FMAC4 soap_get_PointerTons2__deleteClientByNameAndPwd(struct soap*, ns2__deleteClientByNameAndPwd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteProductByInfo_DEFINED
#define SOAP_TYPE_PointerTons2__deleteProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteProductByInfo(struct soap*, ns2__deleteProductByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteProductByInfo(struct soap*, const char *, int, ns2__deleteProductByInfo *const*, const char *);
SOAP_FMAC3 ns2__deleteProductByInfo ** SOAP_FMAC4 soap_in_PointerTons2__deleteProductByInfo(struct soap*, const char*, ns2__deleteProductByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteProductByInfo(struct soap*, ns2__deleteProductByInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteProductByInfo ** SOAP_FMAC4 soap_get_PointerTons2__deleteProductByInfo(struct soap*, ns2__deleteProductByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__updateClient_DEFINED
#define SOAP_TYPE_PointerTons2__updateClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateClient(struct soap*, ns2__updateClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateClient(struct soap*, const char *, int, ns2__updateClient *const*, const char *);
SOAP_FMAC3 ns2__updateClient ** SOAP_FMAC4 soap_in_PointerTons2__updateClient(struct soap*, const char*, ns2__updateClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateClient(struct soap*, ns2__updateClient *const*, const char*, const char*);
SOAP_FMAC3 ns2__updateClient ** SOAP_FMAC4 soap_get_PointerTons2__updateClient(struct soap*, ns2__updateClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getReadMessageFromShop_DEFINED
#define SOAP_TYPE_PointerTons2__getReadMessageFromShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getReadMessageFromShop(struct soap*, ns2__getReadMessageFromShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getReadMessageFromShop(struct soap*, const char *, int, ns2__getReadMessageFromShop *const*, const char *);
SOAP_FMAC3 ns2__getReadMessageFromShop ** SOAP_FMAC4 soap_in_PointerTons2__getReadMessageFromShop(struct soap*, const char*, ns2__getReadMessageFromShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getReadMessageFromShop(struct soap*, ns2__getReadMessageFromShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__getReadMessageFromShop ** SOAP_FMAC4 soap_get_PointerTons2__getReadMessageFromShop(struct soap*, ns2__getReadMessageFromShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getProductListByInfo_DEFINED
#define SOAP_TYPE_PointerTons2__getProductListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getProductListByInfo(struct soap*, ns2__getProductListByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getProductListByInfo(struct soap*, const char *, int, ns2__getProductListByInfo *const*, const char *);
SOAP_FMAC3 ns2__getProductListByInfo ** SOAP_FMAC4 soap_in_PointerTons2__getProductListByInfo(struct soap*, const char*, ns2__getProductListByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getProductListByInfo(struct soap*, ns2__getProductListByInfo *const*, const char*, const char*);
SOAP_FMAC3 ns2__getProductListByInfo ** SOAP_FMAC4 soap_get_PointerTons2__getProductListByInfo(struct soap*, ns2__getProductListByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__updateShop_DEFINED
#define SOAP_TYPE_PointerTons2__updateShop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__updateShop(struct soap*, ns2__updateShop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__updateShop(struct soap*, const char *, int, ns2__updateShop *const*, const char *);
SOAP_FMAC3 ns2__updateShop ** SOAP_FMAC4 soap_in_PointerTons2__updateShop(struct soap*, const char*, ns2__updateShop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__updateShop(struct soap*, ns2__updateShop *const*, const char*, const char*);
SOAP_FMAC3 ns2__updateShop ** SOAP_FMAC4 soap_get_PointerTons2__updateShop(struct soap*, ns2__updateShop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getShopByNameAndPwd_DEFINED
#define SOAP_TYPE_PointerTons2__getShopByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getShopByNameAndPwd(struct soap*, ns2__getShopByNameAndPwd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getShopByNameAndPwd(struct soap*, const char *, int, ns2__getShopByNameAndPwd *const*, const char *);
SOAP_FMAC3 ns2__getShopByNameAndPwd ** SOAP_FMAC4 soap_in_PointerTons2__getShopByNameAndPwd(struct soap*, const char*, ns2__getShopByNameAndPwd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getShopByNameAndPwd(struct soap*, ns2__getShopByNameAndPwd *const*, const char*, const char*);
SOAP_FMAC3 ns2__getShopByNameAndPwd ** SOAP_FMAC4 soap_get_PointerTons2__getShopByNameAndPwd(struct soap*, ns2__getShopByNameAndPwd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__getOrderList_DEFINED
#define SOAP_TYPE_PointerTons2__getOrderList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__getOrderList(struct soap*, ns2__getOrderList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__getOrderList(struct soap*, const char *, int, ns2__getOrderList *const*, const char *);
SOAP_FMAC3 ns2__getOrderList ** SOAP_FMAC4 soap_in_PointerTons2__getOrderList(struct soap*, const char*, ns2__getOrderList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__getOrderList(struct soap*, ns2__getOrderList *const*, const char*, const char*);
SOAP_FMAC3 ns2__getOrderList ** SOAP_FMAC4 soap_get_PointerTons2__getOrderList(struct soap*, ns2__getOrderList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__deleteProductTypeByName_DEFINED
#define SOAP_TYPE_PointerTons2__deleteProductTypeByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__deleteProductTypeByName(struct soap*, ns2__deleteProductTypeByName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__deleteProductTypeByName(struct soap*, const char *, int, ns2__deleteProductTypeByName *const*, const char *);
SOAP_FMAC3 ns2__deleteProductTypeByName ** SOAP_FMAC4 soap_in_PointerTons2__deleteProductTypeByName(struct soap*, const char*, ns2__deleteProductTypeByName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__deleteProductTypeByName(struct soap*, ns2__deleteProductTypeByName *const*, const char*, const char*);
SOAP_FMAC3 ns2__deleteProductTypeByName ** SOAP_FMAC4 soap_get_PointerTons2__deleteProductTypeByName(struct soap*, ns2__deleteProductTypeByName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__addProduct_DEFINED
#define SOAP_TYPE_PointerTons2__addProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__addProduct(struct soap*, ns2__addProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__addProduct(struct soap*, const char *, int, ns2__addProduct *const*, const char *);
SOAP_FMAC3 ns2__addProduct ** SOAP_FMAC4 soap_in_PointerTons2__addProduct(struct soap*, const char*, ns2__addProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__addProduct(struct soap*, ns2__addProduct *const*, const char*, const char*);
SOAP_FMAC3 ns2__addProduct ** SOAP_FMAC4 soap_get_PointerTons2__addProduct(struct soap*, ns2__addProduct **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__selectProductForUpdate_DEFINED
#define SOAP_TYPE_PointerTons2__selectProductForUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__selectProductForUpdate(struct soap*, ns2__selectProductForUpdate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__selectProductForUpdate(struct soap*, const char *, int, ns2__selectProductForUpdate *const*, const char *);
SOAP_FMAC3 ns2__selectProductForUpdate ** SOAP_FMAC4 soap_in_PointerTons2__selectProductForUpdate(struct soap*, const char*, ns2__selectProductForUpdate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__selectProductForUpdate(struct soap*, ns2__selectProductForUpdate *const*, const char*, const char*);
SOAP_FMAC3 ns2__selectProductForUpdate ** SOAP_FMAC4 soap_get_PointerTons2__selectProductForUpdate(struct soap*, ns2__selectProductForUpdate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__productType_DEFINED
#define SOAP_TYPE_PointerTons2__productType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__productType(struct soap*, ns2__productType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__productType(struct soap*, const char *, int, ns2__productType *const*, const char *);
SOAP_FMAC3 ns2__productType ** SOAP_FMAC4 soap_in_PointerTons2__productType(struct soap*, const char*, ns2__productType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__productType(struct soap*, ns2__productType *const*, const char*, const char*);
SOAP_FMAC3 ns2__productType ** SOAP_FMAC4 soap_get_PointerTons2__productType(struct soap*, ns2__productType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__message_DEFINED
#define SOAP_TYPE_PointerTons2__message_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__message(struct soap*, ns2__message *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__message(struct soap*, const char *, int, ns2__message *const*, const char *);
SOAP_FMAC3 ns2__message ** SOAP_FMAC4 soap_in_PointerTons2__message(struct soap*, const char*, ns2__message **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__message(struct soap*, ns2__message *const*, const char*, const char*);
SOAP_FMAC3 ns2__message ** SOAP_FMAC4 soap_get_PointerTons2__message(struct soap*, ns2__message **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__client_DEFINED
#define SOAP_TYPE_PointerTons2__client_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__client(struct soap*, ns2__client *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__client(struct soap*, const char *, int, ns2__client *const*, const char *);
SOAP_FMAC3 ns2__client ** SOAP_FMAC4 soap_in_PointerTons2__client(struct soap*, const char*, ns2__client **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__client(struct soap*, ns2__client *const*, const char*, const char*);
SOAP_FMAC3 ns2__client ** SOAP_FMAC4 soap_get_PointerTons2__client(struct soap*, ns2__client **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__shop_DEFINED
#define SOAP_TYPE_PointerTons2__shop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__shop(struct soap*, ns2__shop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__shop(struct soap*, const char *, int, ns2__shop *const*, const char *);
SOAP_FMAC3 ns2__shop ** SOAP_FMAC4 soap_in_PointerTons2__shop(struct soap*, const char*, ns2__shop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__shop(struct soap*, ns2__shop *const*, const char*, const char*);
SOAP_FMAC3 ns2__shop ** SOAP_FMAC4 soap_get_PointerTons2__shop(struct soap*, ns2__shop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__order_DEFINED
#define SOAP_TYPE_PointerTons2__order_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__order(struct soap*, ns2__order *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__order(struct soap*, const char *, int, ns2__order *const*, const char *);
SOAP_FMAC3 ns2__order ** SOAP_FMAC4 soap_in_PointerTons2__order(struct soap*, const char*, ns2__order **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__order(struct soap*, ns2__order *const*, const char*, const char*);
SOAP_FMAC3 ns2__order ** SOAP_FMAC4 soap_get_PointerTons2__order(struct soap*, ns2__order **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__product_DEFINED
#define SOAP_TYPE_PointerTons2__product_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__product(struct soap*, ns2__product *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__product(struct soap*, const char *, int, ns2__product *const*, const char *);
SOAP_FMAC3 ns2__product ** SOAP_FMAC4 soap_in_PointerTons2__product(struct soap*, const char*, ns2__product **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__product(struct soap*, ns2__product *const*, const char*, const char*);
SOAP_FMAC3 ns2__product ** SOAP_FMAC4 soap_get_PointerTons2__product(struct soap*, ns2__product **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__shop_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__shop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__shop(struct soap*, std::vector<ns2__shop *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__shop(struct soap*, const std::vector<ns2__shop *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__shop(struct soap*, const char*, int, const std::vector<ns2__shop *> *, const char*);
SOAP_FMAC3 std::vector<ns2__shop *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__shop(struct soap*, const char*, std::vector<ns2__shop *> *, const char*);
SOAP_FMAC1 std::vector<ns2__shop *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__shop(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__shop *>  * soap_new_std__vectorTemplateOfPointerTons2__shop(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__shop(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__client_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__client_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__client(struct soap*, std::vector<ns2__client *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__client(struct soap*, const std::vector<ns2__client *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__client(struct soap*, const char*, int, const std::vector<ns2__client *> *, const char*);
SOAP_FMAC3 std::vector<ns2__client *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__client(struct soap*, const char*, std::vector<ns2__client *> *, const char*);
SOAP_FMAC1 std::vector<ns2__client *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__client(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__client *>  * soap_new_std__vectorTemplateOfPointerTons2__client(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__client(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__productType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__productType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__productType(struct soap*, std::vector<ns2__productType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__productType(struct soap*, const std::vector<ns2__productType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__productType(struct soap*, const char*, int, const std::vector<ns2__productType *> *, const char*);
SOAP_FMAC3 std::vector<ns2__productType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__productType(struct soap*, const char*, std::vector<ns2__productType *> *, const char*);
SOAP_FMAC1 std::vector<ns2__productType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__productType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__productType *>  * soap_new_std__vectorTemplateOfPointerTons2__productType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__productType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__message_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__message_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__message(struct soap*, std::vector<ns2__message *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__message(struct soap*, const std::vector<ns2__message *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__message(struct soap*, const char*, int, const std::vector<ns2__message *> *, const char*);
SOAP_FMAC3 std::vector<ns2__message *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__message(struct soap*, const char*, std::vector<ns2__message *> *, const char*);
SOAP_FMAC1 std::vector<ns2__message *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__message(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__message *>  * soap_new_std__vectorTemplateOfPointerTons2__message(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__message(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__product_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__product_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__product(struct soap*, std::vector<ns2__product *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__product(struct soap*, const std::vector<ns2__product *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__product(struct soap*, const char*, int, const std::vector<ns2__product *> *, const char*);
SOAP_FMAC3 std::vector<ns2__product *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__product(struct soap*, const char*, std::vector<ns2__product *> *, const char*);
SOAP_FMAC1 std::vector<ns2__product *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__product(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__product *>  * soap_new_std__vectorTemplateOfPointerTons2__product(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__product(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__order_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__order_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__order(struct soap*, std::vector<ns2__order *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__order(struct soap*, const std::vector<ns2__order *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__order(struct soap*, const char*, int, const std::vector<ns2__order *> *, const char*);
SOAP_FMAC3 std::vector<ns2__order *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__order(struct soap*, const char*, std::vector<ns2__order *> *, const char*);
SOAP_FMAC1 std::vector<ns2__order *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__order(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__order *>  * soap_new_std__vectorTemplateOfPointerTons2__order(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__order(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
